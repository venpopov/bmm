[{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://venpopov.github.io/bmm/dev/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://venpopov.github.io/bmm/dev/articles/IMM.html","id":"introduction-to-the-model","dir":"Articles","previous_headings":"","what":"Introduction to the model","title":"The Interference Measurement Model (IMM)","text":"Interference Measurement Model (IMM) measurement model continous reproduction tasks domain visual working memory. model introduced Oberauer et al. (2017) . aim IMM capture response behavior continuous reproduction tasks including occurrence swap errors items encoded visual working memory. IMM assumes retrieval, --remembered items features (e.g., colors, orientations, shapes) associated context appeared (e.g. spatial location). associations can continuous strength represent bindings contents context --remembered information (see Figure 1 Oberauer et al. (2017)). retrieval different sources activation contribute activation --retrieved contents. Background noise (b) uniformly activates possible responses, example 360 colors participants can chose color wheel experiment. Cue-independent activation () equally activates features encoded visual working memory retrieval. cue-dependent activation (c) activates features associated current retrieval cue (e.g., spatial location cued retrieved). Additionally, IMM assumes cue-dependent activation follows generalization gradient (s) activates similar contexts. activation potential feature \\(x\\) retrieved sum weighted activation three activation sources, given retrieval cue \\(L\\) location \\(\\theta\\): \\[ (x|L_\\theta) = b \\times A_b(x) + \\times A_a(x) + c \\times A_c(c|L_\\theta) \\] background activation (\\(A_b\\)) independent encoded features thus modeled uniform distribution around circular feature space. implemented von-Mises (vM) distribution centered 0 precision \\(\\kappa = 0\\): \\[ A_b(x) = vM(x,0,0) \\] cue-independent activation (\\(A_a\\)) modeled sum von Mises distributions centered feature values \\(x_i\\) \\(n\\) encoded items \\(\\) precision memory : \\[ A_a(x) = \\sum^n_{= 1} vM(x,x_i,\\kappa) \\] cue-dependent activation (\\(A_c\\)) modeled sum von Mises distributions centered feature values \\(x_i\\) \\(n\\) encoded items \\(\\) precision memory . distributions weighted spatial distance \\(D\\) context \\(L\\) feature associated cue context \\(L_\\theta\\). distance weighted generalization gradient \\(s\\) captures specificity bindings cue dimension: \\[ A_c(x|L_\\theta) = \\sum^n_{= 1} e^{-s*D(L,L\\theta)} \\times vM(x,x_i,\\kappa) \\] probability choosing response \\(\\hat{x}\\) results normalizing activation possible responses \\(N\\). original publication IMM done using Luce’s choice rule: \\[ P(\\hat{x}|L_\\theta) = \\frac{(\\hat{x}|L_\\theta)}{\\sum^N_{j=1}(j|L_\\theta)} \\] bmm package, decided implement alternative normalization using softmax normalization: \\[ P(\\hat{x}|L_\\theta) = \\frac{e^{(\\hat{x}|L_\\theta)}}{\\sum^N_{j=1}e^{(j|L_\\theta)}} \\] comparison different normalization function context activation based models working memory can found appendix Oberauer Lewandowsky (2019). Additionally, recent factorial comparison different models visual working memory Oberauer (2023) indicated softmax normalization generally captures observed data better Luce’s choice rule context continuous reproduction tasks. sum, IMM assumes responses continuous reproduction tasks results cue-based retrieval cue-independent activation features corrupted background noise.","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/IMM.html","id":"parametrization-in-the-bmm-package","dir":"Articles","previous_headings":"","what":"Parametrization in the bmm package","title":"The Interference Measurement Model (IMM)","text":"identification, one weighting parameters fixed. original publication strenght cue-dependent activation \\(c\\) fixed one. default setup brms however currently allows fix strength background noise \\(b\\) zero. Therefore, implementations IMM bmm package, strength cue-dependent cue-independent activation, \\(c\\) \\(\\), can estimated predicted independent variables. Apart , precision memory representations \\(\\kappa\\) generalization gradient \\(s\\) parameterized way original publication. Additionally, use softmax normalization translating activation probabilities, estimates strenght cue-dependent -independent activation, \\(c\\) \\(\\) interpreted relatively strength baseline activation \\(b\\) fixed zero. Thus, possible strength cue-dependent cue-independent activation, \\(c\\) \\(\\), become negative. reflect absolute negative activation rather activation relatively smaller baseline activation.","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/IMM.html","id":"fitting-the-model-with-bmm","dir":"Articles","previous_headings":"","what":"Fitting the model with bmm","title":"The Interference Measurement Model (IMM)","text":"start loading bmm package:","code":"library(bmm)"},{"path":"https://venpopov.github.io/bmm/dev/articles/IMM.html","id":"generating-simulated-data","dir":"Articles","previous_headings":"3 Fitting the model with bmm","what":"Generating simulated data","title":"The Interference Measurement Model (IMM)","text":"already data set want fit, can skip section. Alternatively, can use data provided package (add reference data) generate data using random generation function provided bmm package.","code":"# set seed for reproducibility set.seed(123)  # specfiy generating parameters Cs <- c(4,4,2,2) As <- c(0.5,1,0.5,0.5) Ss <- c(10,10,5,5) kappas <- c(15,10,15,10) nTrials = 1000 setsize = 5  simData <- data.frame() for (i in 1:length(Cs)) {   # generate different non-target locations for each condition   item_location <- c(0, runif(setsize - 1, -pi,pi))      # generate different distances for each condition   item_distance <- c(0, runif(setsize - 1, min = 0.1, max = pi))      # simulate data for each condition   genData <- rIMM(n = nTrials,                   mu = item_location,                   dist = item_distance,                   c = Cs[i], a = As[i],                   b = 0, s = Ss[i], kappa = kappas[i])      condData <- data.frame(     respErr = genData,     trialID = 1:nTrials,     cond = i,     color_item1 = 0,     dist_item1 = 0   )      init_colnames <- colnames(condData)      for (j in 1:(setsize - 1)) {     condData <- cbind(condData,item_location[j + 1])     condData <- cbind(condData,item_distance[j + 1])   }      colnames(condData) <- c(init_colnames,                           paste0(rep(c(\"color_item\",\"dist_item\"),times = setsize - 1),                                   rep(2:(setsize),each = 2)))      simData <- rbind(simData,condData) }  # convert condition variable to a factor  simData$cond <- as.factor(simData$cond)"},{"path":"https://venpopov.github.io/bmm/dev/articles/IMM.html","id":"estimating-the-model-with-bmm","dir":"Articles","previous_headings":"3 Fitting the model with bmm","what":"Estimating the model with bmm","title":"The Interference Measurement Model (IMM)","text":"estimate IMM first need specify formula. formula, directly estimate parameters four conditions: , can specify model want estimate: Finally, can fit model passing relevant arguments fit_model function: Running model takes 2 5 minutes (depending speed computer). load already saved fit object, machine wait model finishes sampling. brms cmdstanr typically print information sampling progress. Using fit object can quick look summary fitted model: first thing might notice parts formula passed fit_model function, bmm added lot additional specifications implement IMM. nothing check. interested customizing exploring different assumptions imposed IMM, start taking formula adapting accordingly. Next, can look estimated parameters. first thing check sampling converged, indicated Rhat values close one. want inspection sampling, can check functionality implemented brmsto . parameter estimates c already native scale, s kappa estimated using log link function, transform back native scale. results indicate parameters, except s well recovered. already noted Oberauer et al. (2017), good recovery generalization gradient s requires lot data. Thus might consider opting simplified version IMM without s parameter, IMMabc. can illustrate recovery data generating parameters plotting full posterior distributions alongside data generating parameters. need extract posterior draws using tidybayes package include data generating parameters plots posteriors.","code":"model_formula <- brms::bf(respErr ~ 1,                           c ~ 0 + cond,                           a ~ 0 + cond,                           s ~ 0 + cond,                           kappa ~ 0 + cond) model <- IMMfull(non_target = paste0(\"color_item\",2:setsize),                  setsize = setsize,                  spaPos = paste0(\"dist_item\",2:setsize)) fit <- fit_model( formula = model_formula, data = simData, model = model, parallel = TRUE, chains = 4, iter = 2000, backend = \"cmdstanr\" ) fit <- readRDS(system.file(\"imm_vignette_fit.rds\", package='bmm')) summary(fit) #>  Family: mixture(von_mises, von_mises, von_mises, von_mises, von_mises, von_mises)  #>   Links: mu1 = identity; kappa1 = log; mu2 = identity; kappa2 = log; mu3 = identity; kappa3 = log; mu4 = identity; kappa4 = log; mu5 = identity; kappa5 = log; mu6 = identity; kappa6 = log; theta1 = identity; theta2 = identity; theta3 = identity; theta4 = identity; theta5 = identity; theta6 = identity  #> Formula: respErr ~ 1  #>          c ~ 0 + cond #>          a ~ 0 + cond #>          s ~ 0 + cond #>          kappa ~ 0 + cond #>          mu1 ~ 1 #>          kappa6 ~ 1 #>          mu6 ~ 1 #>          theta1 ~ c + a #>          kappa1 ~ kappa #>          expS ~ exp(s) #>          kappa2 ~ kappa #>          theta2 ~ LureIdx1 * (exp(-expS * dist_item2) * c + a) + (1 - LureIdx1) * (-100) #>          mu2 ~ color_item2 #>          kappa3 ~ kappa #>          theta3 ~ LureIdx2 * (exp(-expS * dist_item3) * c + a) + (1 - LureIdx2) * (-100) #>          mu3 ~ color_item3 #>          kappa4 ~ kappa #>          theta4 ~ LureIdx3 * (exp(-expS * dist_item4) * c + a) + (1 - LureIdx3) * (-100) #>          mu4 ~ color_item4 #>          kappa5 ~ kappa #>          theta5 ~ LureIdx4 * (exp(-expS * dist_item5) * c + a) + (1 - LureIdx4) * (-100) #>          mu5 ~ color_item5 #>    Data: .x2 (Number of observations: 4000)  #>   Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; #>          total post-warmup draws = 4000 #>  #> Population-Level Effects:  #>                  Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> mu1_Intercept        0.00      0.00     0.00     0.00   NA       NA       NA #> mu6_Intercept        0.00      0.00     0.00     0.00   NA       NA       NA #> kappa6_Intercept  -100.00      0.00  -100.00  -100.00   NA       NA       NA #> c_cond1              4.01      0.16     3.71     4.34 1.00     4433     3135 #> c_cond2              4.23      0.26     3.78     4.80 1.00     3275     2418 #> c_cond3              2.17      0.10     1.99     2.39 1.00     3959     2885 #> c_cond4              1.90      0.12     1.68     2.16 1.00     4613     2873 #> a_cond1              0.48      0.52    -0.50     1.57 1.00     4147     3088 #> a_cond2              0.08      0.59    -1.00     1.30 1.00     3623     3212 #> a_cond3              0.54      0.63    -0.50     2.00 1.00     2360     2231 #> a_cond4              0.56      0.24     0.11     1.05 1.00     4694     2991 #> s_cond1              2.61      0.37     2.02     3.43 1.00     4119     2519 #> s_cond2              1.70      0.30     1.24     2.43 1.00     2806     1992 #> s_cond3              1.37      0.13     1.12     1.64 1.00     4962     3184 #> s_cond4              1.85      0.41     1.27     2.86 1.00     3393     2512 #> kappa_cond1          2.65      0.05     2.55     2.75 1.00     6247     2861 #> kappa_cond2          2.40      0.06     2.29     2.50 1.00     4482     3029 #> kappa_cond3          2.69      0.07     2.56     2.82 1.00     4157     3303 #> kappa_cond4          2.25      0.12     1.98     2.46 1.00     4618     2991 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1). fixedFX <- brms::fixef(fit)  # print posterior means for the s parameter fixedFX[startsWith(rownames(fixedFX),\"c_\"),] #>         Estimate  Est.Error     Q2.5    Q97.5 #> c_cond1 4.009065 0.16228718 3.712424 4.341776 #> c_cond2 4.230107 0.26159354 3.777040 4.802361 #> c_cond3 2.174946 0.09946977 1.987287 2.387866 #> c_cond4 1.897037 0.12056248 1.679840 2.159184  # print posterior means for the s parameter fixedFX[startsWith(rownames(fixedFX),\"a_\"),] #>           Estimate Est.Error       Q2.5    Q97.5 #> a_cond1 0.47987530 0.5208763 -0.5038172 1.569234 #> a_cond2 0.07818879 0.5888166 -1.0037167 1.304360 #> a_cond3 0.54412603 0.6330249 -0.5013562 1.995754 #> a_cond4 0.56442213 0.2387276  0.1109007 1.048604  # print posterior means for the s parameter exp(fixedFX[grepl(\"s_\",rownames(fixedFX)),]) #>          Estimate Est.Error     Q2.5     Q97.5 #> s_cond1 13.595806  1.449047 7.529412 30.886185 #> s_cond2  5.450170  1.351615 3.463338 11.318123 #> s_cond3  3.933775  1.140493 3.051862  5.168997 #> s_cond4  6.364689  1.501557 3.573037 17.415977  # print posterior means for the s parameter exp(fixedFX[grepl(\"kappa_\",rownames(fixedFX)),]) #>              Estimate Est.Error      Q2.5    Q97.5 #> kappa_cond1 14.142684  1.053534 12.762392 15.65602 #> kappa_cond2 10.978578  1.057474  9.857696 12.21859 #> kappa_cond3 14.684509  1.070786 12.896423 16.78497 #> kappa_cond4  9.470469  1.127680  7.275862 11.76137 library(tidybayes) library(dplyr) library(tidyr) library(ggplot2)  # extract the posterior draws draws <- tidybayes::tidy_draws(fit) draws <- select(draws, starts_with(\"b_\")) %>% select(-(1:3)) %>%    mutate_at(vars(starts_with(\"b_s\")),exp) %>%    mutate_at(vars(starts_with(\"b_kappa\")),exp)  # plot posterior with original parameters overlayed as diamonds as.data.frame(draws) %>%    gather(par, value) %>%    ggplot(aes(value, par)) +   tidybayes::stat_halfeyeh(normalize = \"groups\") +   geom_point(data = data.frame(par = colnames(draws),                                value = c(Cs,As,Ss,kappas)),              aes(value,par), color = \"red\",              shape = \"diamond\", size = 2.5) +   scale_x_continuous(lim=c(0,20))"},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/articles/mixture_models.html","id":"introduction-to-the-models","dir":"Articles","previous_headings":"","what":"Introduction to the models","title":"Mixture models for visual working memory","text":"two-parameter mixture model (Zhang Luck 2008) three-parameter mixture model (Bays, Catalao, Husain 2009) measurement models continuous reproduction tasks visual working memory domain (details task, see vignette('vwm-crt')). measurement models continuous reproduction tasks, goal model distribution angular response errors. two-parameter mixture model (?mixture2p) distinguishes two memory states lead responses mixture two different distributions angular errors. two states : representation cued object certain precision feature visual working memory (solid blue distribution Figure 1.1) representation visual working memory thus guessing random response (dashed red distribution). Figure 1.1: Mixtures response distributions Responses based noisy memory representation correct feature come circular normal distribution (.e., von Mises) centered correct feature value, guessing responses come uniform distribution along entire circle: \\[\\begin{align} p(\\theta) &= p_{mem} \\cdot \\text{vM}(\\theta; \\mu, \\kappa) + (1-p_{mem}) \\cdot \\text{Uniform}(\\theta; -\\pi, \\pi) \\\\ \\\\ p_{guess} &= 1-p_{mem} \\\\ \\\\ vM(\\theta; \\mu, \\kappa) &= \\frac{e^{\\kappa \\cos(\\theta - \\mu)}}{2\\pi I_0(\\kappa)} \\end{align}\\] \\(\\theta\\) response angle, \\(p_{mem}\\) probability responses come memory target feature, \\(\\mu\\) mean von Mises distribution representing target feature, \\(\\kappa\\) concentration parameter von Mises distribution, representing precision target memory representation. three-parameter mixture model (?mixture3p) adds third state: confusing cued object another object shown encoding thus reporting feature object (long dashed green distribution Figure 1.1). Responses state sometimes called non-target responses swap errors. non-target responses also come von Mises distribution centered feature non-target object. probability non-target responses represented parameter \\(p_{nt}\\), complete model : \\[\\begin{align} p(\\theta) &= p_{mem} \\cdot \\text{vM}(\\theta; \\mu_t, \\kappa) + p_{nt} \\cdot \\frac{\\sum_{=1}^{n} \\text{vM}(\\theta; \\mu_{}, \\kappa)}{n} + (1-p_{mem}-p_{nt}) \\cdot \\text{Uniform}(\\theta; -\\pi, \\pi) \\\\ \\\\ p_{guess} &= 1-p_{mem}-p_{nt} \\end{align}\\] \\(\\mu_{t}\\) location target feature, \\(\\mu_{}\\) location -th non-target feature, \\(n\\) number non-target features. applications model, responses coded angular error relative target feature. true non-target memory representations, assumed centered target feature, precision non-target memory representation assumed precision target memory representation. version model implemented bmm package: \\[\\begin{align} p(\\theta) &= p_{mem} \\cdot \\text{vM}(\\theta; 0, \\kappa) + p_{nt} \\cdot \\frac{\\sum_{=1}^{n}  \\text{vM}(\\theta; \\mu_{}-\\mu_t, \\kappa)}{n} + (1-p_{mem}-p_{nt}) \\cdot \\text{Uniform}(\\theta; -\\pi, \\pi) \\end{align}\\]","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/mixture_models.html","id":"the-data","dir":"Articles","previous_headings":"","what":"The data","title":"Mixture models for visual working memory","text":"Begin loading bmm package: example, analyze data Bays, Catalao, Husain (2009). data included mixtur R package can loaded following command: data contains following columns: : id unique identifier participant setsize number items presented memory array response participant’s recollection target orientation radians target feature value target radians non_target_1 non_target5 feature values non-targets radians trials vary set_size (1, 2, 3 6), also vary encoding duration. fit mixture models bmm, first make sure data correct format. response variable radians represent angular error relative target, non-target variables radians centered relative target. can find requirements help topic ?mixture2p ?mixture3p. dataset, response non-target variables already radians, centered relative target. can check plotting response distribution. memory items selected random trial, non-centered responses show uniform distribution:  can center response non-target variables subtracting target value . can mutate function dplyr package. also need make sure response range \\((-\\pi, \\pi)\\), non-target variables range \\((-\\pi, \\pi)\\). can wrap function bmm package. can see new plot, response distribution now centered 0.  plot can also see performace gets substantially worse increasing set size. Now, can fit two mixture models two understand driving pattern.","code":"library(bmm) # install the mixtur package if you haven't done so # install.packages(\"mixtur\") dat <- mixtur::bays2009_full library(ggplot2) ggplot(dat, aes(response)) +   geom_histogram(binwidth = 0.5, fill = \"lightblue\", color = \"black\") +   labs(title = \"Response distribution\", x = \"Response error (radians)\", y = \"Frequency\") library(dplyr) dat_preprocessed <- dat %>%   mutate(error = wrap(response - target),          non_target_1 = wrap(non_target_1 - target),          non_target_2 = wrap(non_target_2 - target),          non_target_3 = wrap(non_target_3 - target),          non_target_4 = wrap(non_target_4 - target),          non_target_5 = wrap(non_target_5 - target),          set_size = paste0('Set size ', set_size))  ggplot(dat_preprocessed, aes(error)) +   geom_histogram(bins=60, fill = \"lightblue\", color = \"black\") +   labs(title = \"Response distribution\", x = \"Response error (radians)\", y = \"Frequency\") +   facet_wrap(~set_size)"},{"path":"https://venpopov.github.io/bmm/dev/articles/mixture_models.html","id":"fitting-the-2-parameter-mixture-model-with-bmm","dir":"Articles","previous_headings":"","what":"Fitting the 2-parameter mixture model with bmm","title":"Mixture models for visual working memory","text":"fit two-parameter mixture model, need specify model formula model. model formula use brms package’s bf function. linear model formulas brms, left side equation refers -predicted variable parameter right side specifies variables used predict . example, want fit model probability memory responses precision memory responses vary set size. also want effect set size vary across participants. model formula three components: response variable error predicted constant term, internally fixed mean 0 precision parameter kappa predicted set size, effect set size varies across participants mixture weight1 memory responses thetat predicted set size, effect set size varies across participants. specify model simply : Finally, fit model fit_model function. fit model function uses brms package fit model, can pass argument pass brm function.","code":"ff <- brms::bf(error ~ 1,                 thetat ~ 0 + set_size + (0 + set_size | id),                kappa ~ 0 + set_size + (0 + set_size | id)) model <- mixture2p() fit <- fit_model(formula = ff,                  data = dat_preprocessed,                  model = model,                  parallel=T,                  iter=2000,                  refresh=100,                  backend='cmdstanr')"},{"path":"https://venpopov.github.io/bmm/dev/articles/mixture_models.html","id":"results-of-the-2-parameter-mixture-model","dir":"Articles","previous_headings":"","what":"Results of the 2-parameter mixture model","title":"Mixture models for visual working memory","text":"can now inspect model fit: summary shows estimated fixed effects precision mixture weight, well estimated random effects precision mixture weight. Rhat values close 1, good sign chains converged. effective sample sizes also high, means chains mixed well. now want understand estimated parameters. kappa coded within brms log-link function, need exponentiate estimates get precision parameter. can use k2sd function convert precision parameter standard deviation units. thetat mixture weight memory responses. described footnote 1, can use softmax function get probability memory responses. estimates kappa setsize : Standard deviation: Probability responses comes memory: even better visualize entire posterior distribution parameters.  black dot represents median posterior distribution, thick line represents 50% credible interval, thin line represents 95% credible interval.","code":"summary(fit) #>  Family: mixture(von_mises, von_mises)  #>   Links: mu1 = tan_half; kappa1 = log; mu2 = tan_half; kappa2 = log; theta1 = identity; theta2 = identity  #> Formula: error ~ 1  #>          thetat ~ 0 + set_size + (0 + set_size | id) #>          kappa ~ 0 + set_size + (0 + set_size | id) #>          kappa2 ~ 1 #>          mu1 ~ 1 #>          mu2 ~ 1 #>          kappa1 ~ kappa #>          theta1 ~ thetat #>    Data: .x2 (Number of observations: 7271)  #>   Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; #>          total post-warmup draws = 4000 #>  #> Group-Level Effects:  #> ~id (Number of levels: 12)  #>                                        Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sd(thetat_set_size1)                       0.65      0.45     0.03     1.72 1.00     1062     1097 #> sd(thetat_set_size2)                       0.84      0.24     0.47     1.37 1.00     2565     2873 #> sd(thetat_set_size4)                       0.83      0.22     0.50     1.34 1.00     1912     2245 #> sd(thetat_set_size6)                       0.60      0.16     0.36     0.98 1.00     2200     2819 #> sd(kappa_set_size1)                        0.34      0.09     0.21     0.54 1.00     1181     2071 #> sd(kappa_set_size2)                        0.22      0.07     0.11     0.37 1.00     1923     2780 #> sd(kappa_set_size4)                        0.35      0.11     0.18     0.63 1.00     2056     3001 #> sd(kappa_set_size6)                        0.37      0.13     0.17     0.66 1.00     2275     2594 #> cor(thetat_set_size1,thetat_set_size2)     0.38      0.36    -0.48     0.91 1.00      776     1145 #> cor(thetat_set_size1,thetat_set_size4)     0.26      0.39    -0.56     0.87 1.01      673     1177 #> cor(thetat_set_size2,thetat_set_size4)     0.58      0.25    -0.04     0.94 1.00     1601     2284 #> cor(thetat_set_size1,thetat_set_size6)     0.24      0.37    -0.55     0.86 1.01      719     1078 #> cor(thetat_set_size2,thetat_set_size6)     0.65      0.23     0.09     0.96 1.00     1866     2329 #> cor(thetat_set_size4,thetat_set_size6)     0.68      0.21     0.16     0.95 1.00     2680     2988 #> cor(kappa_set_size1,kappa_set_size2)       0.69      0.22     0.16     0.96 1.00     2183     3037 #> cor(kappa_set_size1,kappa_set_size4)       0.38      0.29    -0.23     0.84 1.00     2407     2663 #> cor(kappa_set_size2,kappa_set_size4)       0.29      0.34    -0.41     0.85 1.00     1495     2421 #> cor(kappa_set_size1,kappa_set_size6)       0.44      0.29    -0.20     0.89 1.00     2725     2690 #> cor(kappa_set_size2,kappa_set_size6)       0.49      0.29    -0.18     0.92 1.00     2204     3195 #> cor(kappa_set_size4,kappa_set_size6)       0.49      0.30    -0.18     0.93 1.00     2539     3036 #>  #> Population-Level Effects:  #>                  Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> mu1_Intercept        0.00      0.00     0.00     0.00   NA       NA       NA #> mu2_Intercept        0.00      0.00     0.00     0.00   NA       NA       NA #> kappa2_Intercept  -100.00      0.00  -100.00  -100.00   NA       NA       NA #> thetat_set_size1     4.48      0.37     3.83     5.27 1.00     2705     2346 #> thetat_set_size2     2.55      0.28     2.01     3.12 1.00     1792     2418 #> thetat_set_size4     1.04      0.25     0.53     1.54 1.00     1615     1855 #> thetat_set_size6     0.26      0.19    -0.11     0.62 1.00     1708     2478 #> kappa_set_size1      2.89      0.10     2.68     3.10 1.00     1066     1740 #> kappa_set_size2      2.39      0.07     2.24     2.54 1.00     1450     2062 #> kappa_set_size4      2.05      0.12     1.81     2.30 1.00     1955     2210 #> kappa_set_size6      1.94      0.14     1.66     2.22 1.00     2138     2552 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1). # extract the fixed effects from the model and determine the rows that contain # the relevant parameter estimates fixedEff <- brms::fixef(fit) thetat <- fixedEff[grepl(\"thetat\",rownames(fixedEff)),] kappa <- fixedEff[grepl(\"kappa_\",rownames(fixedEff)),]  # transform parameters because brms uses special link functions kappa <- exp(kappa) sd <- k2sd(kappa[,1])  pmem <- exp(thetat)/(exp(thetat)+1) pg <- exp(0)/(exp(thetat)+1) kappa #>                  Estimate Est.Error      Q2.5     Q97.5 #> kappa_set_size1 17.993196  1.109357 14.645780 22.238905 #> kappa_set_size2 10.920192  1.077711  9.398398 12.698324 #> kappa_set_size4  7.792398  1.132074  6.103363 10.013994 #> kappa_set_size6  6.939708  1.149710  5.256719  9.197328 names(sd) <- paste0(\"Set size \", c(1,2,4,6)) round(sd,3) #> Set size 1 Set size 2 Set size 4 Set size 6  #>      0.239      0.310      0.371      0.395 rownames(pmem) <- paste0(\"Set size \", c(1,2,4,6)) round(pmem,3) #>            Estimate Est.Error  Q2.5 Q97.5 #> Set size 1    0.989     0.590 0.979 0.995 #> Set size 2    0.928     0.570 0.882 0.958 #> Set size 4    0.738     0.563 0.628 0.823 #> Set size 6    0.565     0.547 0.471 0.651 library(tidybayes) library(tidyr)  # extract the posterior draws draws <- tidybayes::tidy_draws(fit) draws_theta <- select(draws, b_thetat_set_size1:b_thetat_set_size6) draws_kappa <- select(draws, b_kappa_set_size1:b_kappa_set_size6)  # transform parameters because brms uses special link functions draws_theta <- exp(draws_theta)/(exp(draws_theta)+1) draws_kappa <- exp(draws_kappa)  # plot posterior as.data.frame(draws_theta) %>%    gather(par, value) %>%   mutate(par = gsub(\"b_thetat_set_size\", \"\", par)) %>%   ggplot(aes(par, value)) +   tidybayes::stat_halfeyeh(normalize=\"groups\", orientation=\"vertical\") +   labs(y = \"Probability of memory response\", x = \"Set size\", parse = TRUE)  as.data.frame(draws_kappa) %>%    gather(par, value) %>%   mutate(value = k2sd(value)) %>%    mutate(par = gsub(\"b_kappa_set_size\", \"Set size \", par)) %>%   ggplot(aes(par,value)) +   tidybayes::stat_halfeyeh(normalize=\"groups\", orientation=\"vertical\") +   labs(y = \"Memory imprecision (SD)\", x = \"Set size\", parse = TRUE)"},{"path":"https://venpopov.github.io/bmm/dev/articles/mixture_models.html","id":"fitting-the-3-parameter-mixture-model-with-bmm","dir":"Articles","previous_headings":"","what":"Fitting the 3-parameter mixture model with bmm","title":"Mixture models for visual working memory","text":"Fitting 3-parameter mixture model similar. extra parameter thetant represents mixture weight non-target responses2. also need specify names non-target variables setsize3 variable mixture3p function. run model just like : rest analysis 2-parameter model. can inspect model fit, extract parameter estimates, visualize posterior distributions.","code":"ff <- brms::bf(error ~ 1,                 thetat ~ 0 + set_size + (0 + set_size | id),                thetant ~ 0 + set_size + (0 + set_size | id),                kappa ~ 0 + set_size + (0 + set_size | id))  model <- mixture3p(non_targets = paste0('non_target_',1:5), setsize='set_size') fit3p <- fit_model(formula = ff,                    data = dat_preprocessed,                    model = model,                    parallel=T,                    iter=2000,                    refresh=100,                    backend='cmdstanr')"},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/articles/sdm-simple.html","id":"introduction-to-the-model","dir":"Articles","previous_headings":"","what":"Introduction to the model","title":"The Signal Discrimination Model (SDM)","text":"Signal Discrimination Model measurement model continuous reproduction tasks visual working memory domain. model originally introduced Oberauer (2023). measurement models continuous reproduction tasks, ’s goal model distribution angular response errors. model assumes test probe appears, possible responses circle (\\(\\theta\\)) activated strength depends distance feature stored memory (\\(\\mu\\)) response options. Formally, given following activation function: \\[\\begin{align} S(\\theta) &= c \\cdot \\frac{\\exp(\\kappa \\cdot \\cos(y-\\mu))}{2\\pi I_0(\\kappa)} \\tag{1.1} \\end{align}\\] \\(c\\) memory strength parameter, \\(\\kappa\\) precision parameter, \\(I_0\\) modified Bessel function first kind order 0. Thus, activation function follows von Mises distribution, weigthed memory strength parameter. activation response options corrupted noise, assumed follow Gumbel distribution. response option highest activation value: \\[\\begin{align} Pr(\\theta) = argmax(S(\\theta) + \\epsilon) \\\\ \\epsilon \\sim Gumbel(0,1) \\tag{1.2} \\end{align}\\] equivalent following softmax function (also known exponentiated Luce’s choice rule): \\[\\begin{align} Pr(\\theta) = \\frac{\\exp(S(\\theta)}{\\sum_{=1}^{n} \\exp(S(\\theta_i))} \\tag{1.3} \\end{align}\\] n number response options, often 360 typical visual working memory experiments. summary, model assumes response errors come following distribution, \\(\\mu = 0\\): \\[\\begin{align} \\Large{f(\\theta\\ |\\ \\mu,c,\\kappa) = \\frac{e^ {c \\ \\frac{e^{k\\ cos(\\theta-\\mu)}}{2\\pi I_o(k)}}}{Z}} \\tag{1.4} \\end{align}\\] Z normalizing constant ensure probability mass sums 1.","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/sdm-simple.html","id":"parametrization-in-the-bmm-package","dir":"Articles","previous_headings":"","what":"Parametrization in the bmm package","title":"The Signal Discrimination Model (SDM)","text":"bmm package use different parametrization Equation (1.4). parametrization chosen numerical stability efficiency. Three features (1.4) make difficult work practice. First, modified bessel function \\(I_0\\) increases rapidly, often leading numerical overflow. Second, bessel function expensive compute, estimating model MCMC methods can slow. Third, normalizing constant denominator requires summing 360 terms, also slow. address issues, use following parametrization SDM distribution: \\[\\begin{align}     \\Large{f(\\theta\\ |\\ \\mu,c,\\kappa) = \\frac{         e^{c \\ \\sqrt{\\frac{k}{2\\pi}} e^{k \\ (cos(\\theta-\\mu)-1)}}         }{Z}} \\tag{2.1} \\end{align}\\] parametrization derived known approximation modified bessel function large \\(k\\) (Abramowitz, Stegun, Romer (1988)): \\[\\begin{align} I_0(\\kappa) \\sim ~ \\frac{e^{\\kappa}}{\\sqrt{2\\pi \\kappa}}, \\ \\ \\ \\ \\kappa \\rightarrow \\infty \\tag{2.2} \\end{align}\\] needed, \\(c\\) parameter original formulation Oberauer (2023) can computed : \\[\\begin{align}  c_{oberauer} = c_{bmm} \\ e^{-\\kappa} I_0(\\kappa)\\sqrt{2 \\pi \\kappa}  \\tag{2.3} \\end{align}\\] parametrization change predicted shape distribution, produces slightly different values \\(c\\) small values \\(kappa\\). parametrization default bmm package. second optimization concerns calculation normalizing constant \\(Z\\). original model assumed responses can one 360 discrete values, resulting probability mass function. bmm treat response variable continuous, makes \\(f(\\theta)\\) probability density function. means can calculate normalizing constant \\(Z\\) integrating \\(f(\\theta)\\) entire circle: \\[\\begin{align} Z = \\int_{-\\pi}^{\\pi} f(\\theta) d\\theta \\tag{2.4} \\end{align}\\] integral expressed closed form, can approximated using numerical integration methods. results discrete continuous formulations nearly identical, large number response options (typical applications), number response options small, example 4-AFC tasks.","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/sdm-simple.html","id":"fitting-the-model-with-bmm","dir":"Articles","previous_headings":"","what":"Fitting the model with bmm","title":"The Signal Discrimination Model (SDM)","text":"Begin loading bmm package:","code":"library(bmm)"},{"path":"https://venpopov.github.io/bmm/dev/articles/sdm-simple.html","id":"generating-simulated-data","dir":"Articles","previous_headings":"3 Fitting the model with bmm","what":"Generating simulated data","title":"The Signal Discrimination Model (SDM)","text":"already data want fit, can skip section. current illustration, generate simulated data equation (2.1) known parameters. bmm provides density functions typical R style, prefix d density (dsdm), p cumulative distribution function (psdm), q quantile function (qsdm), (rsdm) generating random deviates. ’s simulate data SDM distribution three conditions: gives us following distribution response errors, lines overlaying predicted density generated dsdm:","code":"# set seed for reproducibility set.seed(123)  # define parameters: cs <- c(2, 9, 2) kappas <- c(3, 1, 8)  # simulate data from the model y <- c(rsdm(n = 1000, mu=0, c = cs[1], kappa = kappas[1], parametrization = \"sqrtexp\"),        rsdm(n = 1000, mu=0, c = cs[2], kappa = kappas[2], parametrization = \"sqrtexp\"),        rsdm(n = 1000, mu=0, c = cs[3], kappa = kappas[3], parametrization = \"sqrtexp\")) dat <- data.frame(y = y,                   cond = factor(rep(c('A','B','C'), each=1000))) # generate predicted SDM density: dd <- data.frame(y = rep(seq(-pi, pi, length.out=1000),3),                  cond = factor(rep(c('A','B','C'), each=1000)),                  c = rep(cs, each=1000),                  kappa = rep(kappas, each=1000)) dd$d <- dsdm(dd$y, mu=0, c=dd$c, kappa=dd$kappa, parametrization = \"sqrtexp\")  # prepare labels for plots par_labels <- data.frame(cond = c('A','B','C'),                          c = c(2, 9, 2),                          kappa = c(3, 1, 8)) par_labels$label <- paste0('c = ', par_labels$c, '\\nkappa = ', par_labels$kappa)                   # plot the data and the predicted density library(ggplot2) ggplot(dat, aes(x=y, fill=cond)) +   geom_histogram(aes(y=..density..), binwidth = 0.1, position = \"identity\", alpha=0.5) +   theme_classic() +   facet_wrap(~cond) +   geom_line(data=dd, fun=dsdm, aes(y, d)) +   scale_x_continuous(limits = c(-pi, pi)) +   labs(title = \"Simulated data from the SDM distribution\",        x = \"Response error (radians)\",        y = \"Density\") +   geom_text(data=par_labels, aes(x=-pi, y=0.5, label=label), hjust=0, vjust=0, size=3)"},{"path":"https://venpopov.github.io/bmm/dev/articles/sdm-simple.html","id":"estimating-the-model-with-bmm","dir":"Articles","previous_headings":"3 Fitting the model with bmm","what":"Estimating the model with bmm","title":"The Signal Discrimination Model (SDM)","text":"estimate parameters SDM distribution, can use fit_model() function. First, let’s specify model formula. want c kappa vary conditions. default, first line formula specifies response variable y ~ 1 - fixes location parameter \\(\\mu\\) 0. next two lines formula specify parameters vary conditions. case, want vary cond variable, use c ~ 0 + cond kappa ~ 0 + cond: specify model, case just sdmSimple() Finally, can fit model. strongly recommend using cmdstanr backend fitting SDM model, much faster stable default rstan backend particular model. ’s fit model cmdstanr: model takes 30 seconds fit compiled. just preload results model fit, practice wait model finish fitting. can now inspect results model fit: see Rhat values less 1.01, good sign chains converged. principle inspection, let us see estimated parameters. model uses log-link function c kappa parameters, exponentiate coefficients get estimated parameters: close true values used simulate data: can see even though estimated parameters close, exactly true parameters. get better picture, can plot estimated posterior distributions parameters:  true parameters lie within 50% credible intervals, good sign model able recover true parameters data. final step, can plot data , adding another line overlay density predicted estimated parameters:  histograms represent data, black lines represent predicted density true parameters, red lines represent predicted density estimated parameters. can see estimated parameters able capture main features data.","code":"ff <- brms::bf(y ~ 1,                c ~ 0 + cond,                kappa ~ 0 + cond) model <- sdmSimple() fit <- fit_model(formula = ff,                  data = dat,                  model = model,                  parallel = T,                  chains = 4,                  iter=2000,                  backend='cmdstanr') fit <- readRDS(system.file(\"sdm_vignette_fit.rds\", package='bmm')) summary(fit) #>  Family: sdm_simple  #>   Links: mu = identity; c = log; kappa = log  #> Formula: y ~ 1  #>          c ~ 0 + cond #>          kappa ~ 0 + cond #>    Data: .x2 (Number of observations: 3000)  #>   Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; #>          total post-warmup draws = 4000 #>  #> Population-Level Effects:  #>             Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> Intercept       0.00      0.00     0.00     0.00   NA       NA       NA #> c_condA         0.70      0.12     0.48     0.94 1.00     1916     2179 #> c_condB         2.37      0.18     2.06     2.77 1.00     1787     1230 #> c_condC         0.64      0.06     0.52     0.76 1.00     1977     2277 #> kappa_condA     0.99      0.19     0.60     1.34 1.00     1919     2260 #> kappa_condB    -0.13      0.18    -0.51     0.18 1.00     1780     1102 #> kappa_condC     2.15      0.11     1.93     2.37 1.00     1919     2140 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1). exp(brms::fixef(fit)[2:7,1]) #>     c_condA     c_condB     c_condC kappa_condA kappa_condB kappa_condC  #>    2.015877   10.713433    1.896317    2.679769    0.880320    8.553107 par_labels[,1:3] #>   cond c kappa #> 1    A 2     3 #> 2    B 9     1 #> 3    C 2     8 library(tidybayes) library(dplyr) library(tidyr)  # extract the posterior draws draws <- tidybayes::tidy_draws(fit) draws <- select(draws, b_c_condA:b_kappa_condC)  # plot posterior with original parameters overlayed as diamonds as.data.frame(draws) %>%    gather(par, value) %>%    mutate(value = exp(value)) %>%    ggplot(aes(value, par)) +   tidybayes::stat_halfeyeh(normalize = \"groups\") +   geom_point(data = data.frame(par = c('b_c_condA','b_c_condB','b_c_condC',                                        'b_kappa_condA','b_kappa_condB','b_kappa_condC'),                                 value = c(cs, kappas)),              aes(value,par), color = \"red\",              shape = \"diamond\", size = 2.5) +   scale_x_continuous(lim=c(0,20)) # generate predicted SDM density: ddest <- data.frame(y = rep(seq(-pi, pi, length.out=1000),3),                  cond = factor(rep(c('A','B','C'), each=1000)),                  c = rep(exp(brms::fixef(fit)[2:4,1]), each=1000),                  kappa = rep(exp(brms::fixef(fit)[5:7,1]), each=1000))  # prepare labels for plots par_labels <- data.frame(cond = c('A','B','C'),                          c_est = exp(brms::fixef(fit)[2:4,1]),                          kappa_est = exp(brms::fixef(fit)[5:7,1]),                          c = c(2, 9, 2),                          kappa = c(3, 1, 8)) par_labels$label <- paste0('c = ', par_labels$c, ' (estimate = ', round(par_labels$c_est,2), ')\\n',                            'kappa = ', par_labels$kappa, ' (estimate = ', round(par_labels$kappa_est,2), ')')  ddest$d <- dsdm(ddest$y, mu=0, c=ddest$c, kappa=ddest$kappa, parametrization = \"sqrtexp\")  # plot the data and the predicted density ggplot(dat, aes(x=y, fill=cond)) +   geom_histogram(aes(y=..density..), binwidth = 0.1, position = \"identity\", alpha=0.5) +   theme_classic() +   facet_wrap(~cond) +   geom_line(data=dd, fun=dsdm, aes(y, d), color='black') +   geom_line(data=ddest, fun=dsdm, aes(y, d), color='red') +   scale_x_continuous(limits = c(-pi, pi)) +   labs(title = \"Simulated data from the SDM distribution\",        x = \"Response error (radians)\",        y = \"Density\") +   geom_text(data=par_labels, aes(x=-pi, y=0.9, label=label), hjust=0, vjust=0, size=3) +   scale_y_continuous(limits = c(0,1))"},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/articles/vwm-crt.html","id":"task-description","dir":"Articles","previous_headings":"","what":"Task description","title":"Continuous reproduction tasks (CRT)","text":"research visual working memory participants often asked remember reproduce continuous features visual objects color orientation. continuous reproduction task (sometimes also called delayed estimation task), participants encode set visual objects visual working memory asked reproduce specific feature one cued object continuous scale test (see Figure 1.1 illustration). often features used tasks colors sampled color wheel (Wilken Ma 2004) continuous orientations bar triangle (Bays et al. 2011). set --remembered objects typically consists one eight objects spatially distributed screen. Thus, participants must associate --remembered features (e.g. color orientation) spatial locations presented . precision representation object’s feature visual working memory measured angular deviation true feature presented encoding. Figure 1.1: typical continuous reproduction task","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/vwm-crt.html","id":"the-role-of-measurement-models","dir":"Articles","previous_headings":"","what":"The role of measurement models","title":"Continuous reproduction tasks (CRT)","text":"continuous reproduction tasks, simplest measure performance average angle deviation response true feature value. many studies, average recall error main dependent variable evaluating effect experimental manipulations. Yet, average recall error confounds different properties memory representations sufficiently represent theoretical processes assumed current models visual working memory. Therefore, different measurement models proposed formalize distinct aspects visual working memory models translate observed behavior. measurement model statistical model describes relationship latent cognitive processes observed behavior. continuous reproduction tasks, measurement models provide refined representation memory processes decompose average recall error several theoretically meaningful parameters. core models assumption responses continuous reproduction tasks can stem different distributions depending continuous activation different memory representation cognitive state person recall.","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/vwm-crt.html","id":"crt-models-in-the-bmm-package","dir":"Articles","previous_headings":"","what":"CRT Models in the bmm package","title":"Continuous reproduction tasks (CRT)","text":"bmm package implements several measurement models analyzing continuous reproduction data:","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/vwm-crt.html","id":"the-two-parameter-mixture-model-zhang_luck_2008","dir":"Articles","previous_headings":"3 CRT Models in the bmm package","what":"The two-parameter mixture model (Zhang and Luck 2008)","title":"Continuous reproduction tasks (CRT)","text":"see ?mixture2p vignette(\"mixture_models\")","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/vwm-crt.html","id":"the-three-parameter-mixture-model-bays_catalao_husain_2009","dir":"Articles","previous_headings":"3 CRT Models in the bmm package","what":"The three-parameter mixture model (Bays, Catalao, and Husain 2009)","title":"Continuous reproduction tasks (CRT)","text":"see ?mixture3p vignette(\"mixture_models\")","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/vwm-crt.html","id":"the-interference-measurement-model-oberauer_lin_2017","dir":"Articles","previous_headings":"3 CRT Models in the bmm package","what":"The Interference Measurement Model (Oberauer and Lin 2017)","title":"Continuous reproduction tasks (CRT)","text":"see ?IMM vignette(\"imm\")","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/vwm-crt.html","id":"the-signal-discrimination-model-sdm-by-oberauer_2023","dir":"Articles","previous_headings":"3 CRT Models in the bmm package","what":"The Signal Discrimination Model (SDM) by (Oberauer 2023)","title":"Continuous reproduction tasks (CRT)","text":"see ?sdmSimple vignette(\"sdm-simple\")","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vencislav Popov. Author, maintainer, copyright holder. Gidon Frischkorn. Author, copyright holder.","code":""},{"path":"https://venpopov.github.io/bmm/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Frischkorn GT, Popov V (2023). “tutorial estimating mixture models visual working memory tasks brms: Introducing Bayesian Measurement Modeling (bmm) package R.” PsyArXiv. doi:10.31234/osf.io/umt57.","code":"@Article{,   title = {A tutorial for estimating mixture models for visual working memory tasks in brms: Introducing the Bayesian Measurement Modeling (bmm) package for R},   author = {Gidon T. Frischkorn and Vencislav Popov},   journal = {PsyArXiv},   year = {2023},   doi = {10.31234/osf.io/umt57}, }"},{"path":"https://venpopov.github.io/bmm/dev/index.html","id":"bmm-","dir":"","previous_headings":"","what":"Easy and Accesible Bayesian Measurement Models using brms","title":"Easy and Accesible Bayesian Measurement Models using brms","text":"goal bmm (Bayesian Measurement Models) make easier estimate common measurement models behavioral research using Bayesian hierarhical estimation via ‘brms’ package’. Currently implemented models :","code":""},{"path":"https://venpopov.github.io/bmm/dev/index.html","id":"visual-working-memory","dir":"","previous_headings":"","what":"Visual working memory","title":"Easy and Accesible Bayesian Measurement Models using brms","text":"Interference measurement model Oberauer Lin (2017). Two-parameter mixture model Zhang Luck (2008). Three-parameter mixture model Bays et al (2009). Signal Discrimination Model (SDM) Oberauer (2023) can always view latest list supported models running:","code":"bmm::supported_models() #> The following models are supported: #>  #> -  IMMabc(non_targets, setsize)  #> -  IMMbsc(non_targets, setsize, spaPos)  #> -  IMMfull(non_targets, setsize, spaPos)  #> -  mixture2p()  #> -  mixture3p(non_targets, setsize)  #> -  sdmSimple()  #>  #> Type  ?modelname  to get information about a specific model, e.g.  ?IMMfull"},{"path":"https://venpopov.github.io/bmm/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Easy and Accesible Bayesian Measurement Models using brms","text":"can install development version bmm GitHub : want install package together vignettes, can use: package significantly updated Feb 03, 2024. following old version Tutorial preprint, need install 0.0.1 version bmm package :","code":"# install.packages(\"devtools\") devtools::install_github(\"venpopov/bmm\") devtools::install_github(\"venpopov/bmm\", build_vignettes = TRUE) # install.packages(\"devtools\") devtools::install_github(\"venpopov/bmm@v0.0.1\")"},{"path":"https://venpopov.github.io/bmm/dev/index.html","id":"example-1","dir":"","previous_headings":"","what":"Example 1","title":"Easy and Accesible Bayesian Measurement Models using brms","text":"three-parameter mixture model Bays et al (2009) assumes responses can come three different sources - noisy representation target, confusion noisy representation non-target items, guessing based uniform distribution. estimate parameters dataset, can use fit_model() function. First, let’s generate dataset known parameters. can use function gen_3p_data() dataset 2000 observations response error, 60% (pmem=0.6) come target distribution, 30% (pnt=0.3) non-target swaps, 10% guessing. precision von Mises distribution 10, presented setsize 4 (one target three lures/non-targets), values coded relative target value (.e., response error y variable displacement relative target lures). Just visualization purposes, ’s histogram error distribution, demonstrating typical pattern - normal distribution centered 0, long tails: Another key property data error responses random, due confusion target one lures. can visualize centering response error relative possible non-target locations. helper function calc_error_relative_to_nontargets():  Ok, now let’s fit three-parameter model. need two things: - Specify model formula - Call fit_model() example parameters don’t vary conditions, predictors. y name response error variable, whereas kappa, thetat thetant parameters model - precision, mixing proportion correct responses mixing proportion non-target swaps. specify model give information required arguments. case 3-parameter model, need specify names non-target variables setsize. can mixture3p() function: can always get full help information model required arguments, well examples running ?mixture3p Finally just run model. arguments function explained help(fit_model) can also pass additional arguments pass brm.","code":"library(bmm) library(tidyverse) dat <- gen_3p_data(N=2000, pmem=0.6, pnt=0.3, kappa=10, setsize=4, relative_resp=T) head(dat) #>             y    nt1_loc     nt2_loc    nt3_loc #> 1  0.51775824  1.0020511  0.76339413 -1.2897954 #> 2  0.03960327 -0.6206519  1.09208784 -0.8679937 #> 3 -0.48213423  1.1447270  2.81885045 -1.4363374 #> 4 -0.34510101  2.7482095 -0.06612305  2.0340003 #> 5  0.09348744 -1.3952246  2.17738363  0.7796131 #> 6  0.39001975 -0.8049496  2.07371921 -1.1887811 hist(dat$y, breaks = 60, xlab = \"Response error relative to target\") dat %>%    calc_error_relative_to_nontargets('y', paste0('nt',1:3,'_loc')) %>%    ggplot(aes(y_nt)) +   geom_histogram() #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ff <- brms::bf(y ~ 1,          kappa ~ 1,          thetat ~ 1,          thetant ~ 1) model <- mixture3p(non_targets = paste0('nt',1:3,'_loc'), setsize=4) fit <- fit_model(formula = ff,                  data = dat,                  model = model,                  parallel=T,                  iter=500,                  backend='cmdstanr')"},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/pull_request_template.html","id":"tests","dir":"","previous_headings":"","what":"Tests","title":"NA","text":"[] Confirm tests passed [] Confirm devtools::check() produces errors","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/IMM.html","id":null,"dir":"Reference","previous_headings":"","what":"Interference measurement model by Oberauer and Lin (2017). — IMM","title":"Interference measurement model by Oberauer and Lin (2017). — IMM","text":"Interference measurement model Oberauer Lin (2017).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interference measurement model by Oberauer and Lin (2017). — IMM","text":"","code":"IMMfull(non_targets, setsize, spaPos, ...)  IMMbsc(non_targets, setsize, spaPos, ...)  IMMabc(non_targets, setsize, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/IMM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interference measurement model by Oberauer and Lin (2017). — IMM","text":"non_targets character vector names non-target variables. non_target variables radians centered relative target. setsize Name column containing set size variable (setsize varies) numeric value setsize, setsize fixed. spaPos vector names columns containing spatial distances non-target items target item. necessary IMMbsc IMMfull models ... used internally testing, ignore ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interference measurement model by Oberauer and Lin (2017). — IMM","text":"object class bmmmodel","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interference measurement model by Oberauer and Lin (2017). — IMM","text":"Domain: Visual working memory Task: Continuous reproduction Name: Interference measurement model Oberauer Lin (2017). Citation: Oberauer, K., & Lin, H.Y. (2017). interference model visual working memory. Psychological Review, 124(1), 21-59","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMM.html","id":"version-immfull","dir":"Reference","previous_headings":"","what":"Version: IMMfull","title":"Interference measurement model by Oberauer and Lin (2017). — IMM","text":"Requirements: response vairable radians represent angular error relative target non-target variables radians centered relative target Parameters: kappa: Concentration parameter von Mises distribution (log scale) : General activation memory items b: Background activation (internally fixed 0) c: Context activation s: Spatial similarity gradient","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMM.html","id":"version-immbsc","dir":"Reference","previous_headings":"","what":"Version: IMMbsc","title":"Interference measurement model by Oberauer and Lin (2017). — IMM","text":"Requirements: response vairable radians represent angular error relative target non-target variables radians centered relative target Parameters: kappa: Concentration parameter von Mises distribution (log scale) b: Background activation (internally fixed 0) c: Context activation s: Spatial similarity gradient","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMM.html","id":"version-immabc","dir":"Reference","previous_headings":"","what":"Version: IMMabc","title":"Interference measurement model by Oberauer and Lin (2017). — IMM","text":"Requirements: response vairable radians represent angular error relative target non-target variables radians centered relative target Parameters: kappa: Concentration parameter von Mises distribution (log scale) : General activation memory items b: Background activation (internally fixed 0) c: Context activation","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMMdist.html","id":null,"dir":"Reference","previous_headings":"","what":"The Interference Measurement Model (IMM) — IMMdist","title":"The Interference Measurement Model (IMM) — IMMdist","text":"Density, distribution, random generation functions interference measurement model location mu, strength cue- dependent activation c, strength cue-independent activation , generalization gradient s, precision memory representations kappa.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMMdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Interference Measurement Model (IMM) — IMMdist","text":"","code":"dIMM(   x,   mu = c(0, 2, -1.5),   dist = c(0, 0.5, 2),   c = 1,   a = 0.2,   b = 0,   s = 2,   kappa = 5,   log = FALSE )  pIMM(   q,   mu = c(0, 2, -1.5),   dist = c(0, 0.5, 2),   c = 1,   a = 0.2,   b = 0,   s = 2,   kappa = 5 )  qIMM(   p,   mu = c(0, 2, -1.5),   dist = c(0, 0.5, 2),   c = 1,   a = 0.2,   b = 0,   s = 2,   kappa = 5 )  rIMM(   n,   mu = c(0, 2, -1.5),   dist = c(0, 0.5, 2),   c = 1,   a = 0.2,   b = 0,   s = 2,   kappa = 5 )"},{"path":"https://venpopov.github.io/bmm/dev/reference/IMMdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Interference Measurement Model (IMM) — IMMdist","text":"x Vector observed responses mu Vector locations dist Vector distances item locations cued location c Vector strengths cue-dependent activation Vector strengths cue-independent activation b Vector baseline activation s Vector generalization gradients kappa Vector precision values log Logical; TRUE, values returned log scale. q Vector quantiles p Vector probability n Number observations generate data ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMMdist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Interference Measurement Model (IMM) — IMMdist","text":"dIMM gives density interference measurement model, pIMM gives cumulative distribution function interference measurement model, qIMM gives quantile function interference measurement model, rIMM gives random generation function interference measurement model.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMMdist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Interference Measurement Model (IMM) — IMMdist","text":"Oberauer, K., Stoneking, C., Wabersich, D., & Lin, H.-Y. (2017). Hierarchical Bayesian measurement models continuous reproduction visual features working memory. Journal Vision, 17(5), 11.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMMdist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Interference Measurement Model (IMM) — IMMdist","text":"","code":"# example code"},{"path":"https://venpopov.github.io/bmm/dev/reference/OberauerLin_2017.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Experiment 1 reported by Oberauer & Lin (2017) — OberauerLin_2017","title":"Data from Experiment 1 reported by Oberauer & Lin (2017) — OberauerLin_2017","text":"Raw data 19 subjects completed continuous reproduction task set size 1 8 reported Oberauer & Lin (2017).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/OberauerLin_2017.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from Experiment 1 reported by Oberauer & Lin (2017) — OberauerLin_2017","text":"","code":"OberauerLin_2017"},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/OberauerLin_2017.html","id":"oberauerlin-","dir":"Reference","previous_headings":"","what":"OberauerLin_2017","title":"Data from Experiment 1 reported by Oberauer & Lin (2017) — OberauerLin_2017","text":"data frame 4,000 rows 9 columns: ID Integer uniquely identifying different subjects Session Session number Trial Trial number within session SetSize setsize data row Response response degrees given color wheel deviation response error deviation Response target color (.e., Item1_Col) degrees. dev_rad response error converted degrees radians. Item1_Col,Item2_Col,Item3_Col,Item4_Col,Item5_Col,Item6_Col,Item7_Col,Item8_Col absolute colors items degrees color wheel. Although always eight values given even set sizes smaller 8, colors item 1 respective set size shown. Item1_Pos,Item2_Pos,Item3_Pos,Item4_Pos,Item5_Pos,Item6_Pos,Item7_Pos,Item8_Pos position items clockwise order around circle. 12 possible positions, thus position 30 degrees apart . Although positions always given items, item 1 respective set size shown. Item1_Col_rad,Item2_Col_rad,Item3_Col_rad,Item4_Col_rad,Item5_Col_rad,Item6_Col,Item7_Col_rad,Item8_Col_rad relative position colors target item (.e. Item1_Col) items radians. Although always eight values given even set sizes smaller 8, colors item 1 respective set size shown. Item1_Pos_rad,Item2_Pos_rad,Item3_Pos_rad,Item4_Pos_rad,Item5_Pos_rad,Item6_Pos,Item7_Pos_rad,Item8_Pos_rad relative position items position target item (.e. Item1_Pos) radians. Although always eight values given even set sizes smaller 8, colors item 1 respective set size shown.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/OberauerLin_2017.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data from Experiment 1 reported by Oberauer & Lin (2017) — OberauerLin_2017","text":"https://osf.io/m4shu","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDM.html","id":null,"dir":"Reference","previous_headings":"","what":"Signal Discrimination Model (SDM) by Oberauer (2023) — SDM","title":"Signal Discrimination Model (SDM) by Oberauer (2023) — SDM","text":"Signal Discrimination Model (SDM) Oberauer (2023)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signal Discrimination Model (SDM) by Oberauer (2023) — SDM","text":"","code":"sdmSimple(...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/SDM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signal Discrimination Model (SDM) by Oberauer (2023) — SDM","text":"... used internally testing, ignore ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Signal Discrimination Model (SDM) by Oberauer (2023) — SDM","text":"object class bmmmodel","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Signal Discrimination Model (SDM) by Oberauer (2023) — SDM","text":"see vignette(\"sdm-simple\") detailed description model use . Domain: Visual working memory Task: Continuous reproduction Name: Signal Discrimination Model (SDM) Oberauer (2023) Citation: Oberauer, K. (2023). Measurement models visual working memory - factorial model comparison. Psychological Review, 130(3), 841-852 Version: Simple (non-targets) Requirements: response variable radians represent angular error relative target Parameters: c: Memory strength parameter SDM distribution kappa: Precision parameter SDM distribution (log scale)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Signal Discrimination Model (SDM) by Oberauer (2023) — SDM","text":"","code":"if (FALSE) { # simulate data from the model library(bmm) library(brms) dat <- data.frame(y = rsdm(n = 1000, c = 4, kappa = 3))  # specify formula ff <- bf(y ~ 1,                c ~ 1,                kappa ~ 1)  # specify prior prior <- prior(normal(1,2), class='Intercept', dpar='c')+    prior(normal(1,2), class='Intercept', dpar='kappa')  # specify the model fit <- fit_model(formula = ff,                  data = dat,                  model = sdmSimple(),                  prior = prior,                  parallel=T,                  iter=2000,                  backend='cmdstanr')  # extract coefficients and plot fit coef <- exp(brms::fixef(fit)[2:3,1]) hist(dat$y, breaks=60, freq=F) x <- seq(-pi,pi,0.01) lines(x, dsdm(x, mu=0, c=coef['c_Intercept'],               kappa=coef['kappa_Intercept']), col='red') }"},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":null,"dir":"Reference","previous_headings":"","what":"The Signal Discrimination Model (SDM) Distribution — SDMdist","title":"The Signal Discrimination Model (SDM) Distribution — SDMdist","text":"Density, distribution function, random generation Signal Discrimination Model (SDM) Distribution location mu, memory strength c, precision kappa. Currently single activation source supported.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Signal Discrimination Model (SDM) Distribution — SDMdist","text":"","code":"dsdm(x, mu = 0, c = 3, kappa = 3.5, log = FALSE, parametrization = \"sqrtexp\")  psdm(   q,   mu = 0,   c = 3,   kappa = 3.5,   lower.tail = TRUE,   log.p = FALSE,   lower.bound = -pi,   parametrization = \"sqrtexp\" )  qsdm(p, mu = 0, c = 3, kappa = 3.5, parametrization = \"sqrtexp\")  rsdm(n, mu = 0, c = 3, kappa = 3.5, parametrization = \"sqrtexp\")"},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Signal Discrimination Model (SDM) Distribution — SDMdist","text":"x Vector quantiles mu Vector location values radians c Vector memory strength values kappa Vector precision values log Logical; TRUE, values returned log scale. parametrization Character; either \"bessel\" \"sqrtexp\" (default). See vignette(\"sdm-simple\") details parameterization. q Vector quantiles lower.tail Logical; TRUE (default), return P(X <= x). Else, return P(X > x) log.p Logical; TRUE, probabilities returned log scale. lower.bound Numeric; Lower bound integration cumulative distribution p Vector probabilities n Number observations sample","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Signal Discrimination Model (SDM) Distribution — SDMdist","text":"dsdm gives density, psdm gives distribution function, qsdm gives quantile function, rsdm generates random deviates, .dsdm_integrate helper function calculating density SDM distribution.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Signal Discrimination Model (SDM) Distribution — SDMdist","text":"Parametrization See vignette(\"sdm-simple\") details parameterization. Oberauer (2023) introduced SDM bessel parametrization. sqrtexp parametrization default bmm package numerical stability efficiency. two parametrizations related functions c_bessel2sqrtexp() c_sqrtexp2bessel(). cumulative distribution function Since responses circle, cumulative distribution function requires choose lower bound integration. default \\(-\\pi\\), brms::pvon_mises() function can choose value argument lower_bound psdm. Another useful choice mean response distribution minus \\(\\pi\\), e.g. lower_bound = mu-pi. default circular::pvonmises(), ensures 50% cumulative probability mass mean response distribution.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Signal Discrimination Model (SDM) Distribution — SDMdist","text":"Oberauer, K. (2023). Measurement models visual working memory - factorial model comparison. Psychological Review, 130(3), 841–852","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Signal Discrimination Model (SDM) Distribution — SDMdist","text":"","code":"# plot the density of the SDM distribution x <- seq(-pi,pi,length.out=10000) plot(x,dsdm(x,0,2,3),type=\"l\", xlim=c(-pi,pi),ylim=c(0,1),      xlab=\"Angle error (radians)\",      ylab=\"density\",      main=\"SDM density\") lines(x,dsdm(x,0,9,1),col=\"red\") lines(x,dsdm(x,0,2,8),col=\"green\") legend(\"topright\",c(\"c=2, kappa=3.0, mu=0\",                     \"c=9, kappa=1.0, mu=0\",                     \"c=2, kappa=8, mu=1\"),        col=c(\"black\",\"red\",\"green\"),lty=1, cex=0.8)   # plot the cumulative distribution function of the SDM distribution p <- psdm(x, mu = 0, c = 3.1, kappa = 5) plot(x,p,type=\"l\")   # generate random deviates from the SDM distribution and overlay the density r <- rsdm(10000, mu = 0, c = 3.1, kappa = 5) d <- dsdm(x, mu = 0, c = 3.1, kappa = 5) hist(r, breaks=60, freq=FALSE) lines(x,d,type=\"l\", col=\"red\")"},{"path":"https://venpopov.github.io/bmm/dev/reference/ZhangLuck_2008.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Experiment 2 reported by Zhang & Luck (2008) — ZhangLuck_2008","title":"Data from Experiment 2 reported by Zhang & Luck (2008) — ZhangLuck_2008","text":"Raw data 8 subjects response error continuous reproduction task set size 1, 2, 3, 6 reported Zhang & Luck (2008).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/ZhangLuck_2008.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from Experiment 2 reported by Zhang & Luck (2008) — ZhangLuck_2008","text":"","code":"ZhangLuck_2008"},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/ZhangLuck_2008.html","id":"zhangluck-","dir":"Reference","previous_headings":"","what":"ZhangLuck_2008","title":"Data from Experiment 2 reported by Zhang & Luck (2008) — ZhangLuck_2008","text":"data frame 4,000 rows 9 columns: subID Integer uniquely identifying different subjects trial Trial identifyier setsize setsize data row RespErr response error, difference reponse given target color. Pos_Lure1, Pos_Lure2, Pos_Lure3, Pos_Lure4, Pos_Lure5 Position lure items relative target color.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/ZhangLuck_2008.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data from Experiment 2 reported by Zhang & Luck (2008) — ZhangLuck_2008","text":"https://www.nature.com/articles/nature06860","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm-package.html","id":null,"dir":"Reference","previous_headings":"","what":"bmm: Easy and Accesible Bayesian Measurement Models using 'brms' — bmm-package","title":"bmm: Easy and Accesible Bayesian Measurement Models using 'brms' — bmm-package","text":"Wrapper functions custom distributions make easier estimate common measurement models using 'brms' package. Currently implemented two-parameter mixture model Zhang Luck (2008),three- parameter mixture model Bays et al (2009), Interference Measurement Model (Oberauer et al., 2017).","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bmm: Easy and Accesible Bayesian Measurement Models using 'brms' — bmm-package","text":"Maintainer: Vencislav Popov vencislav.popov@gmail.com [copyright holder] Authors: Gidon Frischkorn gidon.frischkorn@psychologie.uzh.ch [copyright holder]","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/c_parametrizations.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between parametrizations of the c parameter of the SDM distribution — c_parametrizations","title":"Convert between parametrizations of the c parameter of the SDM distribution — c_parametrizations","text":"Convert parametrizations c parameter SDM distribution","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/c_parametrizations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between parametrizations of the c parameter of the SDM distribution — c_parametrizations","text":"","code":"c_sqrtexp2bessel(c, kappa)  c_bessel2sqrtexp(c, kappa)"},{"path":"https://venpopov.github.io/bmm/dev/reference/c_parametrizations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between parametrizations of the c parameter of the SDM distribution — c_parametrizations","text":"c Vector memory strength values kappa Vector precision values","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/c_parametrizations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between parametrizations of the c parameter of the SDM distribution — c_parametrizations","text":"c_bessel2sqrtexp converts memory strength parameter (c) bessel parametrization sqrtexp parametrization, c_sqrtexp2bessel converts sqrtexp parametrization bessel parametrization.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/c_parametrizations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert between parametrizations of the c parameter of the SDM distribution — c_parametrizations","text":"See vignette(\"sdm-simple\") details parameterization. sqrtexp parametrization default bmm package.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/calc_error_relative_to_nontargets.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate response error relative to non-target values — calc_error_relative_to_nontargets","title":"Calculate response error relative to non-target values — calc_error_relative_to_nontargets","text":"Given vector responses, values non-targets, function computes error relative non-targets.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/calc_error_relative_to_nontargets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate response error relative to non-target values — calc_error_relative_to_nontargets","text":"","code":"calc_error_relative_to_nontargets(data, response, non_targets)"},{"path":"https://venpopov.github.io/bmm/dev/reference/calc_error_relative_to_nontargets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate response error relative to non-target values — calc_error_relative_to_nontargets","text":"data data.frame object row single observation response Character. name column data contains response non_targets Character vector. names columns data contain values non-targets","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/calc_error_relative_to_nontargets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate response error relative to non-target values — calc_error_relative_to_nontargets","text":"data.frame n*m rows, n number rows data m number non-target variables. preserves columns data, except non-target locations, adds column y_nt, contains transformed response error relative non-targets","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic S3 method for checking data based on model type — check_data","title":"Generic S3 method for checking data based on model type — check_data","text":"Called fit_model() automatically perform checks data depending model type. call appropriate check_data methods based list classes defined .model_* functions. models several classes listed, call functions order listed. Thus, operations common group models defined appropriate check_data.* function, \\* corresponds shared class. example, .model_IMMabc model, corresponds following order check_data.* functions: check_data() -> check_data.vwm(), check_data.nontargets() output final function returned fit_model().","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic S3 method for checking data based on model type — check_data","text":"","code":"check_data(model, data, formula)"},{"path":"https://venpopov.github.io/bmm/dev/reference/check_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic S3 method for checking data based on model type — check_data","text":"model model list object returned check_model() data user supplied data.frame containing data checked formula user supplied formula","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic S3 method for checking data based on model type — check_data","text":"data.frame number rows input data, additional columns added necessary, necessary transformations applied, attributes added data.frame later use. need reuse variables created check_data.* functions subsequent stages (e.g. configure_model()), can store access using attr() function.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"checks if the formula is valid for the specified model — check_formula","title":"checks if the formula is valid for the specified model — check_formula","text":"checks formula valid specified model","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checks if the formula is valid for the specified model — check_formula","text":"","code":"check_formula(model, formula)"},{"path":"https://venpopov.github.io/bmm/dev/reference/check_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checks if the formula is valid for the specified model — check_formula","text":"model model list object returned check_model() formula user supplied formula","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checks if the formula is valid for the specified model — check_formula","text":"formula object","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if the model is supported, and returns the model function — check_model","title":"Checks if the model is supported, and returns the model function — check_model","text":"Checks model supported, returns model function","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if the model is supported, and returns the model function — check_model","text":"","code":"check_model(model)"},{"path":"https://venpopov.github.io/bmm/dev/reference/check_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if the model is supported, and returns the model function — check_model","text":"model string name model supplied user","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if the model is supported, and returns the model function — check_model","text":"list generated model function type .model_*","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic S3 method for configuring the model to be fit by brms — configure_model","title":"Generic S3 method for configuring the model to be fit by brms — configure_model","text":"Called fit_model() automatically construct model formula, family objects default priors model specified user. call appropriate configure_model.* functions based list classes defined .model_* functions. Currently, method last class listed .model_* functions. keep model configuration simple possible. future may add shared methods classes models share configuration.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic S3 method for configuring the model to be fit by brms — configure_model","text":"","code":"configure_model(model, data, formula)"},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic S3 method for configuring the model to be fit by brms — configure_model","text":"model model list object returned check_model() data user supplied data.frame containing data checked formula user supplied formula","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic S3 method for configuring the model to be fit by brms — configure_model","text":"named list containing minimum following elements: formula: object class brmsformula. constructed model formula data: user supplied data.frame, preprocessed check_data family: brms family object prior: brms prior object stanvars: (optional) object class stanvars (custom families). See brms::custom_family() details.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic S3 method for configuring the model to be fit by brms — configure_model","text":"bare bones configure_model.* method look like :","code":"configure_model.newmodel <- function(model, data, formula) {     # preprocessing - e.g. extract arguments from data check, construct new variables    <preprocessing code>     # construct the formula    formula <- formula + <new terms>     # construct the family    family <- <code for new family>     # construct the default prior    prior <- <code for new prior>     # return the list    out <- nlist(formula, data, family, prior)    return(out) }"},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic S3 method for configuring the model to be fit by brms — configure_model","text":"","code":"if (FALSE) { configure_model.3p <- function(model, data, formula) {    # retrieve arguments from the data check    max_setsize <- attr(data, \"max_setsize\")    non_targets <- attr(data, \"non_targets\")    lure_idx_vars <- attr(data, \"lure_idx_vars\")    setsize_var <- attr(data, \"setsize_var\")     # names for parameters    kappa_nts <- paste0('kappa', 2:max_setsize)    kappa_unif <- paste0('kappa',max_setsize + 1)    theta_nts <- paste0('theta',2:max_setsize)    mu_nts <- paste0('mu', 2:max_setsize)    mu_unif <- paste0('mu', max_setsize + 1)     # construct formula    formula <- formula +      brms::lf(mu1 ~ 1) +      glue_lf(kappa_unif,' ~ 1') +      glue_lf(mu_unif, ' ~ 1') +      brms::nlf(theta1 ~ thetat) +      brms::nlf(kappa1 ~ kappa)    for (i in 1:(max_setsize-1)) {      formula <- formula +        glue_nlf(kappa_nts[i], ' ~ kappa') +        glue_nlf(theta_nts[i], ' ~ ', lure_idx_vars[i], '*(thetant + log(inv_ss)) + ',                 '(1-', lure_idx_vars[i], ')*(-100)') +        glue_nlf(mu_nts[i], ' ~ ', non_targets[i])    }     # define mixture family    vm_list = lapply(1:(max_setsize+1), function(x) brms::von_mises(link=\"identity\"))    vm_list$order = \"none\"    family <- brms::do_call(brms::mixture, vm_list)     # define prior    prior <-      brms::prior_(\"constant(0)\", class = \"Intercept\", dpar = \"mu1\") +      brms::prior_(\"constant(0)\", class = \"Intercept\", dpar = mu_unif) +      brms::prior_(\"constant(-100)\", class = \"Intercept\", dpar = kappa_unif) +      brms::prior_(\"normal(2, 1)\", class = \"b\", nlpar = \"kappa\") +      brms::prior_(\"logistic(0, 1)\", class = \"b\", nlpar = \"thetat\") +      brms::prior_(\"logistic(0, 1)\", class = \"b\", nlpar = \"thetant\")     # if there is setsize 1 in the data, set constant prior over thetant for setsize1    if ((1 %in% data$ss_numeric) && !is.numeric(data[[setsize_var]])) {      prior <- prior +        brms::prior_(\"constant(-100)\", class=\"b\", coef = paste0(setsize_var, 1), nlpar=\"thetant\")    }     out <- nlist(formula, data, family, prior)    return(out) } }"},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure local options during model fitting — configure_options","title":"Configure local options during model fitting — configure_options","text":"Currently serves set local options parallel processing update number chains number chains greater number cores.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure local options during model fitting — configure_options","text":"","code":"configure_options(opts, env = parent.frame())"},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure local options during model fitting — configure_options","text":"opts list options env environment set options - set parent.frame() changes apply environment function called . case, environment fit_model() function. Changes propagated user environment.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure local options during model fitting — configure_options","text":"list options pass brm()","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Measurement Models using BRMS — fit_model","title":"Fit Measurement Models using BRMS — fit_model","text":"Fit Bayesian multilevel measurement model. Currently implemented two-parameter mixture model Zhang Luck (2008), three-parameter mixture model Bays et al (2009), three different versions Interference Measurement Model (Oberauer et al., 2017). wrapper function brms::brm, used estimate model.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Measurement Models using BRMS — fit_model","text":"","code":"fit_model(   formula,   data,   model,   parallel = FALSE,   chains = 4,   prior = NULL,   ... )"},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Measurement Models using BRMS — fit_model","text":"formula object class brmsformula. symbolic description model fitted. data object class data.frame, containing data variables used model. names variables must match variable names passed bmmmodel object required argurments. model description model fitted. call bmmmodel mixture3p() function. Every model function number required arguments need specified within function call. Call supported_models() see list supported models required arguments parallel Logical; TRUE, number cores machine detected brms fit max(chains, cores) number chains (specified chain argument) parallel using parallel package chains Numeric. Number Markov chains (defaults 4) prior One brmsprior objects created brms::set_prior() related functions combined using c method + operator. See also brms::get_prior() help. necessary default model fitting, can provide prior constraints model parameters ... arguments passed brms::brm() Stan. See description brms::brm() details","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Measurement Models using BRMS — fit_model","text":"object class brmsfit contains posterior draws along many useful information model. Use methods(class = \"brmsfit\") overview available methods.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit Measurement Models using BRMS — fit_model","text":"following models supported: IMMabc(non_targets, setsize) IMMbsc(non_targets, setsize, spaPos) IMMfull(non_targets, setsize, spaPos) mixture2p() mixture3p(non_targets, setsize) sdmSimple() Type ?modelname get information specific model, e.g. ?IMMfull Type help(package=bmm) full list available help topics.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit Measurement Models using BRMS — fit_model","text":"Frischkorn, G. T., & Popov, V. (2023). tutorial estimating mixture models visual working memory tasks brms: Introducing Bayesian Measurement Modeling  (bmm) package R. https://doi.org/10.31234/osf.io/umt57","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Measurement Models using BRMS — fit_model","text":"","code":"if (FALSE) { # generate artificial data from the Bays et al (2009) 3-parameter mixture model dat <- gen_3p_data(N=2000, pmem=0.6, pnt=0.3, kappa=10, setsize=4, relative_resp=T)  # define formula ff <- brms::bf(y ~ 1,               kappa ~ 1,               thetat ~ 1,               thetant ~ 1)  # fit the model fit <- fit_model(formula = ff,                  data = dat,                  model = mixture3p(non_targets = paste0('nt',1:3,'_loc'), setsize=4),                  parallel=T,                  iter=500,                  backend='cmdstanr') }"},{"path":"https://venpopov.github.io/bmm/dev/reference/gen_3p_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate artificial data from the Bays et al (2009) 3-parameter\nmixture model — gen_3p_data","title":"Generate artificial data from the Bays et al (2009) 3-parameter\nmixture model — gen_3p_data","text":"Given set parameters, desired setsize, generates responses continuous reproduction task, corresponding proportions coming memory, non-target location errors, guessing.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/gen_3p_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate artificial data from the Bays et al (2009) 3-parameter\nmixture model — gen_3p_data","text":"","code":"gen_3p_data(   N = 2000,   pmem = 0.6,   pnt = 0.3,   kappa = 10,   setsize = 2,   relative_resp = T )"},{"path":"https://venpopov.github.io/bmm/dev/reference/gen_3p_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate artificial data from the Bays et al (2009) 3-parameter\nmixture model — gen_3p_data","text":"N Numeric. Number samples pmem Numeric. Probability response coming memory pnt Numeric. Probability response coming non-target item kappa Numeric. Precision von mises distribution setsize Numeric. Number presented items relative_resp Logical. TRUE, returns response error relative target non-target item locations coded relative target. FALSE, returns actual response location items absolute","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/gen_3p_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate artificial data from the Bays et al (2009) 3-parameter\nmixture model — gen_3p_data","text":"data.frame object. y response (relative_resp==F) response error (relative_resp==T), t_loc value target (relative_resp==F), nt1_loc nti_loc, values non-targets, =setsize-1.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/gen_3p_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate artificial data from the Bays et al (2009) 3-parameter\nmixture model — gen_3p_data","text":"","code":"# example code nsub = 30 df_3p_parms <- data.frame(   theta_pmem = rnorm(nsub, mean = 2, sd = 1),   theta_pnt = rnorm(nsub, mean = 1, sd = 0.5),   kappa = pmax(0,rnorm(nsub, mean = 5, sd = 1)),   pmem = numeric(nsub),   pnt = numeric(nsub),   pguess = numeric(nsub) )  # transform continous mixture weights into probabilities using the softmax df_3p_parms[,c(\"pmem\",\"pnt\",\"pguess\")] <- apply(df_3p_parms[,c(\"theta_pmem\",\"theta_pnt\")],                                                 1,softmax)"},{"path":"https://venpopov.github.io/bmm/dev/reference/gen_imm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate artificial data from the Interference measurement model — gen_imm_data","title":"Generate artificial data from the Interference measurement model — gen_imm_data","text":"Given set parameters, desired setsize, function generates data following assumptions interference measurement models","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/gen_imm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate artificial data from the Interference measurement model — gen_imm_data","text":"","code":"gen_imm_data(parms, ntrials = 200, setsize = 6)"},{"path":"https://venpopov.github.io/bmm/dev/reference/gen_imm_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate artificial data from the Interference measurement model — gen_imm_data","text":"parms Matrix/DataFrame. Matrix Data frame IMM parameters, must contain least one row values : c = context activation, = general activation, s = spatial similarity gradient, n = background noise, kappa = precision memory representations ntrials Numeric. number responses simulate subject setsize Numeric. Number items memory set","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/gen_imm_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate artificial data from the Interference measurement model — gen_imm_data","text":"data.frame object. resp response, respErr relative response target, Item1 ItemN absolute location N items -pi pi number items N specified setsize variable, D1 DN spatial distance N items N items specified setsize variable","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/get_model_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Default priors for Measurement Models specified in BRMS — get_model_prior","title":"Get Default priors for Measurement Models specified in BRMS — get_model_prior","text":"Obtain default priors Bayesian multilevel measurement model, well information parameters priors can specified. Given model, data formula model, function return default priors used estimate model. Additionally, return model parameters prior specified (flat priors). can help get idea priors need specified also know priors used user-specified priors passed fit_model() function.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/get_model_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Default priors for Measurement Models specified in BRMS — get_model_prior","text":"","code":"get_model_prior(formula, data, model, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/get_model_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Default priors for Measurement Models specified in BRMS — get_model_prior","text":"formula object class brmsformula. symbolic description model fitted. data object class data.frame, containing data variables used model. names variables must match variable names passed bmmmodel object required argurments. model description model fitted. call bmmmodel mixture3p() function. Every model function number required arguments need specified within function call. Call supported_models() see list supported models required arguments ... arguments passed brms::get_prior(). See description brms::get_prior() details","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/get_model_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Default priors for Measurement Models specified in BRMS — get_model_prior","text":"data.frame columns specifying prior, class, coef group priors specified. Separate rows contain information parameters (parameter classes) priors can specified.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/get_model_prior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Default priors for Measurement Models specified in BRMS — get_model_prior","text":"following models supported: IMMabc(non_targets, setsize) IMMbsc(non_targets, setsize, spaPos) IMMfull(non_targets, setsize, spaPos) mixture2p() mixture3p(non_targets, setsize) sdmSimple() Type ?modelname get information specific model, e.g. ?IMMfull Type help(package=bmm) full list available help topics.","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/get_model_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Default priors for Measurement Models specified in BRMS — get_model_prior","text":"","code":"if (FALSE) { # generate artificial data from the Bays et al (2009) 3-parameter mixture model dat <- gen_3p_data(N=2000, pmem=0.6, pnt=0.3, kappa=10, setsize=4, relative_resp=T)  # define formula ff <- brms::bf(y ~ 1,                kappa ~ 1,                thetat ~ 1,                thetant ~ 1)  # simulate data dat <- gen_3p_data(N = 200)  # fit the model get_model_prior(formula = ff,                 data = dat,                 model = mixture3p(non_targets = paste0('nt',1,'_loc'), setsize = 2) ) }"},{"path":"https://venpopov.github.io/bmm/dev/reference/k2sd.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform kappa of the von Mises distribution to the circular standard deviation — k2sd","title":"Transform kappa of the von Mises distribution to the circular standard deviation — k2sd","text":"function transforms precision parameter kappa von Mises distribution circular standard deviation. Adapted Matlab code Paul Bays (https://www.paulbays.com/code.php)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/k2sd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform kappa of the von Mises distribution to the circular standard deviation — k2sd","text":"","code":"k2sd(K)"},{"path":"https://venpopov.github.io/bmm/dev/reference/k2sd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform kappa of the von Mises distribution to the circular standard deviation — k2sd","text":"K numeric. vector kappa values.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/k2sd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform kappa of the von Mises distribution to the circular standard deviation — k2sd","text":"vector sd values.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/k2sd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform kappa of the von Mises distribution to the circular standard deviation — k2sd","text":"","code":"kappas <- runif(1000, 0.01, 100)  # calcualte SD (in radians) SDs <- k2sd(kappas)  # transform SDs from radians to degrees SDs_degress <- SDs * 180 / pi  # plot the relationship between kappa and circular SD plot(kappas,SDs)  plot(kappas,SDs_degress)"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p.html","id":null,"dir":"Reference","previous_headings":"","what":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","title":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","text":"Two-parameter mixture model Zhang Luck (2008).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","text":"","code":"mixture2p(...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","text":"... required arguments, call mixture2p()","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","text":"object class bmmmodel","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","text":"Domain: Visual working memory Task: Continuous reproduction Name: Two-parameter mixture model Zhang Luck (2008). Citation: Zhang, W., & Luck, S. J. (2008). Discrete fixed-resolution representations visual working memory. Nature, 453(7192), 233-235 Requirements: response vairable radians represent angular error relative target Parameters: kappa: Concentration parameter von Mises distribution (log scale) thetat: Mixture weight target responses","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","text":"","code":"if (FALSE) { # generate artificial data dat <- gen_3p_data(N=2000, pmem=0.6, pnt=0.3, kappa=10, setsize=4, relative_resp=T)  # define formula ff <- brms::bf(y ~ 1,               kappa ~ 1,               thetat ~ 1)  model <- mixture2p()  # fit the model fit <- fit_model(formula = ff,                  data = dat,                  model = model,                  parallel=T,                  iter=500,                  backend='cmdstanr') }"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"The two-parameter mixture model (mixture2p) — mixture2p_dist","title":"The two-parameter mixture model (mixture2p) — mixture2p_dist","text":"Density, distribution, random generation functions two-parameter mixture model location mu, precision memory representations kappa probability recalling items memory pMem.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The two-parameter mixture model (mixture2p) — mixture2p_dist","text":"","code":"dmixture2p(x, mu = 0, kappa = 5, pMem = 0.6, log = FALSE)  pmixture2p(q, mu = 0, kappa = 7, pMem = 0.8)  qmixture2p(p, mu = 0, kappa = 5, pMem = 0.6)  rmixture2p(n, mu = 0, kappa = 5, pMem = 0.6)"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The two-parameter mixture model (mixture2p) — mixture2p_dist","text":"x Vector observed responses mu Vector locations kappa Vector precision values pMem Vector probabilities memory recall log Logical; TRUE, values returned log scale. q Vector quantiles p Vector probability n Number observations generate data ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The two-parameter mixture model (mixture2p) — mixture2p_dist","text":"dmixture2p gives density two-parameter mixture model, pmixture2p gives cumulative distribution function two-parameter mixture model, qmixture2p gives quantile function two-parameter mixture model, rmixture2p gives random generation function two-parameter mixture model.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p_dist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The two-parameter mixture model (mixture2p) — mixture2p_dist","text":"Zhang, W., & Luck, S. J. (2008). Discrete fixed-resolution representations visual working memory. Nature, 453.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The two-parameter mixture model (mixture2p) — mixture2p_dist","text":"","code":"# example code"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p.html","id":null,"dir":"Reference","previous_headings":"","what":"Three-parameter mixture model by Bays et al (2009). — mixture3p","title":"Three-parameter mixture model by Bays et al (2009). — mixture3p","text":"Three-parameter mixture model Bays et al (2009).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Three-parameter mixture model by Bays et al (2009). — mixture3p","text":"","code":"mixture3p(non_targets, setsize, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Three-parameter mixture model by Bays et al (2009). — mixture3p","text":"non_targets character vector names non-target variables. non_target variables radians centered relative target. setsize Name column containing set size variable (setsize varies) numeric value setsize, setsize fixed. ... used internally testing, ignore ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Three-parameter mixture model by Bays et al (2009). — mixture3p","text":"object class bmmmodel","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Three-parameter mixture model by Bays et al (2009). — mixture3p","text":"Domain: Visual working memory Task: Continuous reproduction Name: Three-parameter mixture model Bays et al (2009). Citation: Bays, P. M., Catalao, R. F. G., & Husain, M. (2009). precision visual working memory set allocation shared resource. Journal Vision, 9(10), 1-11 Requirements: response vairable radians represent angular error relative target non-target variables radians centered relative target Parameters: kappa: Concentration parameter von Mises distribution (log scale) thetat: Mixture weight target responses thetant: Mixture weight non-target responses","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Three-parameter mixture model by Bays et al (2009). — mixture3p","text":"","code":"if (FALSE) { # generate artificial data from the Bays et al (2009) 3-parameter mixture model dat <- gen_3p_data(N=2000, pmem=0.6, pnt=0.3, kappa=10, setsize=4, relative_resp=T)  # define formula ff <- brms::bf(y ~ 1,               kappa ~ 1,               thetat ~ 1,               thetant ~ 1)  # specify the 3-parameter model model <- mixture3p(non_targets = paste0('nt',1:3,'_loc'), setsize=4)  # fit the model fit <- fit_model(formula = ff,                  data = dat,                  model = model,                  parallel=T,                  iter=500,                  backend='cmdstanr') }"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"The three-parameter mixture model (mixture3p) — mixture3p_dist","title":"The three-parameter mixture model (mixture3p) — mixture3p_dist","text":"Density, distribution, random generation functions three-parameter mixture model location mu, precision memory representations kappa, probability recalling items memory pMem, probability recalling non-targets pNT.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The three-parameter mixture model (mixture3p) — mixture3p_dist","text":"","code":"dmixture3p(   x,   mu = c(0, 2, -1.5),   kappa = 5,   pMem = 0.6,   pNT = 0.2,   log = FALSE )  pmixture3p(q, mu = c(0, 2, -1.5), kappa = 5, pMem = 0.6, pNT = 0.2)  qmixture3p(p, mu = c(0, 2, -1.5), kappa = 5, pMem = 0.6, pNT = 0.2)  rmixture3p(n, mu = c(0, 2, -1.5), kappa = 5, pMem = 0.6, pNT = 0.2)"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The three-parameter mixture model (mixture3p) — mixture3p_dist","text":"x Vector observed responses mu Vector locations. First value represents location target item additional values indicate location non-target items. kappa Vector precision values pMem Vector probabilities memory recall pNT Vector probabilities swap errors log Logical; TRUE, values returned log scale. q Vector quantiles p Vector probability n Number observations generate data ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The three-parameter mixture model (mixture3p) — mixture3p_dist","text":"dmixture3p gives density three-parameter mixture model, pmixture3p gives cumulative distribution function two-parameter mixture model, qmixture3p gives quantile function two-parameter mixture model, rmixture3p gives random generation function two-parameter mixture model.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p_dist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The three-parameter mixture model (mixture3p) — mixture3p_dist","text":"Bays, P. M., Catalao, R. F. G., & Husain, M. (2009). precision visual working memory set allocation shared resource. Journal Vision, 9(10), 7.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The three-parameter mixture model (mixture3p) — mixture3p_dist","text":"","code":"# example code"},{"path":"https://venpopov.github.io/bmm/dev/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::[\\%>\\%][magrittr::pipe] details.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://venpopov.github.io/bmm/dev/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/postprocess_brm.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic S3 method for postprocessing the fitted brm model — postprocess_brm","title":"Generic S3 method for postprocessing the fitted brm model — postprocess_brm","text":"Called fit_model() automatically perform type postprocessing depending model type. call appropriate postprocess_brm.* methods based list classes defined .model_* functions. models several classes listed, call functions order listed. Thus, operations common group models defined appropriate postprocess_brm.* function, \\* corresponds shared class. example, sdmSimple model, postprocessing involves setting link function c parameter \"log\", coded manually stan code, specified \"identity\" brms custom family. model requires postprocessing, can skip method, default method used (returns brmsfit object passed ).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/postprocess_brm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic S3 method for postprocessing the fitted brm model — postprocess_brm","text":"","code":"postprocess_brm(model, fit)"},{"path":"https://venpopov.github.io/bmm/dev/reference/postprocess_brm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic S3 method for postprocessing the fitted brm model — postprocess_brm","text":"model model list object returned check_model() fit fitted brm model returned call_brm()","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/postprocess_brm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic S3 method for postprocessing the fitted brm model — postprocess_brm","text":"object class brmsfit, necessary postprocessing applied","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/print_pretty_models_md.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a markdown list of the measurement models available in bmm — print_pretty_models_md","title":"Generate a markdown list of the measurement models available in bmm — print_pretty_models_md","text":"Used internally automatically populate information README file","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/print_pretty_models_md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a markdown list of the measurement models available in bmm — print_pretty_models_md","text":"","code":"print_pretty_models_md()"},{"path":"https://venpopov.github.io/bmm/dev/reference/print_pretty_models_md.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a markdown list of the measurement models available in bmm — print_pretty_models_md","text":"Markdown code printing list measurement models available bmm","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/softmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Softmax and logsoftmax functions and their inverse functions — softmax","title":"Softmax and logsoftmax functions and their inverse functions — softmax","text":"softmax returns value softmax function softmaxinv returns value inverse-softmax function","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/softmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Softmax and logsoftmax functions and their inverse functions — softmax","text":"","code":"softmax(eta, lambda = 1)  softmaxinv(p, lambda = 1)"},{"path":"https://venpopov.github.io/bmm/dev/reference/softmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Softmax and logsoftmax functions and their inverse functions — softmax","text":"eta numeric vector input lambda Tuning parameter (single positive value) p probability vector (.e., numeric vector non-negative values sum one)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/softmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Softmax and logsoftmax functions and their inverse functions — softmax","text":"Value softmax function inverse","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/softmax.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Softmax and logsoftmax functions and their inverse functions — softmax","text":"softmax function bijective function maps real vector length m-1 probability vector length m non-zero probabilities.  present functions define softmax function inverse, tuning parameter. current functions define softmax : $$\\Large P(\\eta_i) = \\frac{e^{\\lambda \\eta_i}}{1+ \\sum_{j=1}^m e^{\\lambda \\eta_j}}$$ Code adapted utilities package","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/softmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Softmax and logsoftmax functions and their inverse functions — softmax","text":"","code":"softmax(5:7) #> [1] 0.0899759918 0.2445801036 0.6648376511 0.0006062535 softmaxinv(softmax(5:7)) #> [1] 5 6 7"},{"path":"https://venpopov.github.io/bmm/dev/reference/supported_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Measurement models available in bmm — supported_models","title":"Measurement models available in bmm — supported_models","text":"Measurement models available bmm","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/supported_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measurement models available in bmm — supported_models","text":"","code":"supported_models(print_call = TRUE)"},{"path":"https://venpopov.github.io/bmm/dev/reference/supported_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measurement models available in bmm — supported_models","text":"print_call Logical; TRUE (default), function print information model function called required arguments. FALSE, function return character vector names available models","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/supported_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measurement models available in bmm — supported_models","text":"character vector measurement models available bmm","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/supported_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measurement models available in bmm — supported_models","text":"","code":"supported_models() #> The following models are supported: #>  #> -  IMMabc(non_targets, setsize)  #> -  IMMbsc(non_targets, setsize, spaPos)  #> -  IMMfull(non_targets, setsize, spaPos)  #> -  mixture2p()  #> -  mixture3p(non_targets, setsize)  #> -  sdmSimple()  #>  #> Type  ?modelname  to get information about a specific model, e.g.  ?IMMfull"},{"path":"https://venpopov.github.io/bmm/dev/reference/use_model_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a file with a template for adding a new model (for developers) — use_model_template","title":"Create a file with a template for adding a new model (for developers) — use_model_template","text":"Create file template adding new model (developers)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/use_model_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a file with a template for adding a new model (for developers) — use_model_template","text":"","code":"use_model_template(   model_name,   custom_family = FALSE,   stanvar_blocks = c(\"data\", \"tdata\", \"parameters\", \"tparameters\", \"model\", \"likelihood\",     \"genquant\", \"functions\"),   open_files = TRUE,   testing = FALSE )"},{"path":"https://venpopov.github.io/bmm/dev/reference/use_model_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a file with a template for adding a new model (for developers) — use_model_template","text":"model_name string name model. file named bmm_model_model_name.R necessary functions created appropriate names structure. file saved R/ directory custom_family Logical; plan define brms::custom_family()? TRUE function add section custom family, placeholders stan_vars corresponding empty .stan files inst/stan_chunks/, can fill example, see sdmSimple model /R/bmm_model_sdmSimple.R. FALSE (default) function add custom family section stan files. stanvar_blocks character vector names blocks added custom family section. See brms::stanvar() details. default lists possible blocks, unlikely need . can specify vector need. function add section block list open_files Logical; TRUE (default), function open template files created RStudio testing Logical; TRUE, function return file content save file. FALSE (default), function save file","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/use_model_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a file with a template for adding a new model (for developers) — use_model_template","text":"testing TRUE, function return file content string. testing FALSE, function return NULL","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/use_model_template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a file with a template for adding a new model (for developers) — use_model_template","text":"get warning check() non-ASCII characters, often due citation field. can find problem running   usually rewriting numbers (issue, page numbers) manually fixes ","code":"remotes::install_github(\"eddelbuettel/dang\") dang::checkPackageAsciiCode(dir = \".\")"},{"path":"https://venpopov.github.io/bmm/dev/reference/use_model_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a file with a template for adding a new model (for developers) — use_model_template","text":"","code":"if (FALSE) {  library(usethis)   # create a new model file without a brms::custom_family, and open the file  use_model_template(\"newmodel\")   # create a new model file with a brms::custom_family, three .stan files in  # inst/stan_chunks/ and open the files  use_model_template('abc',custom_family = TRUE,                     stanvar_blocks = c('functions','likelihood','tdata')) }"},{"path":"https://venpopov.github.io/bmm/dev/reference/wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap angles that extend beyond (-pi;pi) — wrap","title":"Wrap angles that extend beyond (-pi;pi) — wrap","text":"circular space, angles can range (-pi;pi -180;180). subtracting angles, can result values outside range. example, calculating difference value 10 degrees minus 340 degrees, results difference 330 degrees. However, true difference two values -30 degrees. function wraps values, occur circle","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap angles that extend beyond (-pi;pi) — wrap","text":"","code":"wrap(x, radians = TRUE)"},{"path":"https://venpopov.github.io/bmm/dev/reference/wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap angles that extend beyond (-pi;pi) — wrap","text":"x numeric vector, matrix data.frame angles wrapped. radians (default) degrees. radians Logical. x radians (default=TRUE) degrees (FALSE)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/wrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap angles that extend beyond (-pi;pi) — wrap","text":"object type x","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/wrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrap angles that extend beyond (-pi;pi) — wrap","text":"","code":"x <- runif(1000, -pi, pi) y <- runif(1000, -pi, pi) diff <- x-y hist(diff)  wrapped_diff <- wrap(x-y) hist(wrapped_diff)"},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bmm-development-version","dir":"Changelog","previous_headings":"","what":"bmm (development version)","title":"bmm (development version)","text":"Initial CRAN submission.","code":""}]
