[{"path":"https://venpopov.github.io/bmm/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to bmm","title":"Contributing to bmm","text":"bmm package designed community driven thus appreciate input! attempt make contributing bmm easy transparent possible. contributor guidelines designed clarify different types contributions acknowledge package publication. following contributions acknowledge NEWS release package: Reporting bug Submitting bug fix Discussing proposing improvements current state code, particular: improving stability model estimation speeding model estimation generalizing functions across multiple already implemented bmmodels extensive contributions acknowledge listed contributor package documentation. entail: adding new model bmm adding new function ease use multiple models implemented bmm adding functions implement communication bmm R packages, emmeans, tidybayes, bayesplot, etc.","code":""},{"path":"https://venpopov.github.io/bmm/dev/CONTRIBUTING.html","id":"package-development-on-github","dir":"","previous_headings":"","what":"Package Development on Github","title":"Contributing to bmm","text":"use Github host code, track issues feature requests, well accept pull requests. Detailed info development process can found bmm Developer Notes changes additions code submitted via pull requests. consider pull requests propositions changes codebase. Thus, reserve right merge changes, feel conflict general principles implemented bmm package. avoid rejection pull requests, please consider contacting us committing changes bmm, especially involve changing large number files. interested contributing bmm, please follow following steps. Fork repo create branch develop. ’ve added code tested, add tests. Update documentation changes implemented. Ensure unit tests passed. Ensure R CMD Checks passed. Issue pull request!","code":""},{"path":"https://venpopov.github.io/bmm/dev/CONTRIBUTING.html","id":"use-a-consistent-coding-style","dir":"","previous_headings":"","what":"Use a Consistent Coding Style","title":"Contributing to bmm","text":"Please follow general coding style used throughout bmm. entails: labeling variables functions using snake_case avoid upper case labels variable function names bmm Developer Notes provide introduction file organization package. Please follow guidelines put functions associated different steps fitting bmmodels. questions unsure add code, feel free ask us. dedicated Discussion page informal chats questions.","code":""},{"path":"https://venpopov.github.io/bmm/dev/CONTRIBUTING.html","id":"any-contributions-you-make-will-be-under-the-gpl-2-software-license","dir":"","previous_headings":"","what":"Any contributions you make will be under the GPL-2 Software License","title":"Contributing to bmm","text":"short, submit code changes, submissions understood GPL-2 covers project. Feel free contact us ’s concern.","code":""},{"path":"https://venpopov.github.io/bmm/dev/CONTRIBUTING.html","id":"report-bugs-using-githubs-issues","dir":"","previous_headings":"","what":"Report bugs using Github’s issues","title":"Contributing to bmm","text":"use GitHub issues track public bugs. Report bug opening new issue; ’s easy!","code":""},{"path":"https://venpopov.github.io/bmm/dev/CONTRIBUTING.html","id":"write-bug-reports-with-detail-background-and-sample-code","dir":"","previous_headings":"","what":"Write bug reports with detail, background, and sample code","title":"Contributing to bmm","text":"reporting bug, please use provided template. Great Bug Reports tend : quick summary /background specific! Give sample code can. expected happen actually happens Notes (including think might happening, stuff tried didn’t work) appreciate thorough bug reports lot.","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_bmmformula.html","id":"the-bmmformula-syntax","dir":"Articles","previous_headings":"","what":"The bmmformula syntax","title":"Introduction to the bmmformula syntax","text":"bmmformula syntax generally follows principles formula syntax brms models. bmmformula follows general structure: However, instead predicting response - typically done brms - bmm bmmformula predicts parameter bmmodel1. peffects part specifies effects assumed across observations. typical vocabulary effects called ‘population-level’ ‘overall’ effects. geffects part specifies effects assumed vary across grouping variables specified group. Typically, effects called ‘group-level’ ‘varying’ effects. typically provide bmmformula parameter bmmodel, recommend set formula separate object passing bmm() function. two ways set formulas, work equally easy well: single call function bmmformula short form bmf, separating formulas different parameters commas. add bmmformula parameter using + operator. Ηere two examples method result bmmformula object: noted , bmm generally assumes pass bmmformula parameter model. pass bmmformula one parameters, bmm throw warning estimate fixed intercept parameters bmmformula provided. unsure parameters model, call help via ?bmmodel, replacing ‘bmmodel’ name model (e.g. ?sdm). bmmformula syntax builds upon brmsformula syntax, can use functionality might use brms specifying bmmformula. One difference , explicitly specify formula non-linear formula, bmm recognizes formula non-linear soon one left-hand side arguments formula also used right-hand side argument whole formula. argumetn nl exist bmmformula. Similarly, adding grouping statements around group-level effects estimate separately different sub-groups design can added. example, complicated bmmformula look like : formula implements exponential reduction thetat start_theta ss_num = 0 towards lower asymptote end_theta reached slope R. addition, group level effects grouped age_group variation Intercept estimated separately different levels age_group variable. formula just serves example bmmformula syntax allows use complex formula syntax implemented brms passes information brms without losing functionality.","code":"parameter ~ peffects + ( geffects | group) my_formula <- bmmformula(   thetat ~ 1 + set_size,   thetant ~ 1 + set_size,   kappa ~ 1 )  my_formula <- bmf(thetat ~ 1 + set_size) +   bmf(thetant ~ 1 + set_size) +   bmf(kappa ~ 1)    my_formula #> thetat ~ 1 + set_size #> thetant ~ 1 + set_size #> kappa ~ 1 complex_formula <- bmf(   # a non-linear function on thetat   thetat ~ end_theta + (start_theta - end_theta) * exp(-R*ss_num),   # other model parameters   thetant ~ 1 + (1 | gr(ID, by = age_group)),   kappa ~ 1 + (1 | gr(ID, by = age_group)),   # parameters of the non-linear function   start_theta ~ 1 + (1 | gr(ID, by = age_group)),   end_theta ~ 1 + (1 | gr(ID, by = age_group)),   R ~ 1 + (1 | gr(ID, by = age_group)) )  complex_formula #> thetat ~ end_theta + (start_theta - end_theta) * exp(-R * ss_num) #> thetant ~ 1 + (1 | gr(ID, by = age_group)) #> kappa ~ 1 + (1 | gr(ID, by = age_group)) #> start_theta ~ 1 + (1 | gr(ID, by = age_group)) #> end_theta ~ 1 + (1 | gr(ID, by = age_group)) #> R ~ 1 + (1 | gr(ID, by = age_group))"},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_bmmformula.html","id":"seperating-response-variables-from-model-parameters","dir":"Articles","previous_headings":"","what":"Seperating response variables from model parameters","title":"Introduction to the bmmformula syntax","text":"response provided bmmformula, bmm response variables, also variables relevant bmmodel, linked model setting bmmodel object. example, fitting mixture3p model, provide names variables reflect response error (e.g., y), location non-target features (e.g. nt_col1, …, nt_col4), set-size (e.g., ss) data: Internally, bmm link response variables bmmformula given parameters bmmodel.","code":"my_model <- mixture3p(resp_error = \"y\",                        nt_features = paste0(\"nt_col\",1:4),                        set_size = \"ss\")"},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_bmmformula.html","id":"fixing-parameters-to-constant-values","dir":"Articles","previous_headings":"","what":"Fixing parameters to constant values","title":"Introduction to the bmmformula syntax","text":"cases can reasonable fix parameters specific value. can either done via bmmformula via constant prior specified parameter fixed. outline fixing parameters via bmmformula. fix parameter via bmmformula set parameter value fixed using = instead ~. example, following formula fix kappa value 1. fixing parameter constant value, need keep mind value fix , value parameter scale. Oftentimes, bmm uses link functions convert parameters bounded native scale (e.g. positive values precision parameters, kappa) unbounded parameter scale. case kappa, bmm uses log link function. Thus, fixing parameter 1, effectively fix parameter \\(e^1\\) native scale.","code":"fixed_formula <- bmf(kappa = 1)"},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_bmmformula.html","id":"estimating-prediciting-parameters-internally-fixed-by-bmm","dir":"Articles","previous_headings":"","what":"Estimating & prediciting parameters internally fixed by bmm","title":"Introduction to the bmmformula syntax","text":"bmm fixes parameters internally, usually integral part measurement model, need fixed properly identify model. example models continuous reproduction visual working memory tasks, distribution target responses usually assumed centered around target. Consequently, mean distribution mu internally fixed 0. parameters listed model object. , can see model parameters accessing my_model$fixed_parameters. Fixed parameters can freely estimated also listed parameters model, can access using my_model$parameters. Parameters listed fixed_parameters part parameters need fixed identification purposes thus estimated freely. example mixture models visual working memory, location mu2 precision kappa2 guessing distributions needs fixed model identification. parameters listed fixed_parameters parameters therefore estimated. , internally fixed location target responses mu1 can estimated freely needed. want freely estimate internally fixed parameters, can freely estimate parameter providing bmmformula . case mentioned visual working memory models, example interested seeing subjects biased (e.g., distractors). want estimate overall bias data including variations subjects indicated ID, additionally specify bmmformula mu addition formulas core mode parameters:","code":"my_model <- sdm(resp_error = \"error\") my_model$fixed_parameters #> $mu #> [1] 0 my_model <- mixture2p(resp_error = \"error\") names(my_model$fixed_parameters) #> [1] \"mu1\"    \"mu2\"    \"kappa2\"  names(my_model$parameters) #> [1] \"mu1\"    \"kappa\"  \"thetat\" my_model <- mixture2p(resp_error = \"error\") my_formula <- bmf(   mu1 ~ 1 + (1 | ID),   thetat ~ 0 + set_size + (0 + set_size | ID),   kappa ~ 0 + set_size + (0 + set_size | ID) )"},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_bmmformula.html","id":"accessing-the-brmsformula-generated-by-bmm","dir":"Articles","previous_headings":"","what":"Accessing the brmsformula generated by bmm","title":"Introduction to the bmmformula syntax","text":"Let’s assume fit mixture2p model data set my_data described mixture models article. , specify bmmformula model object: now interested see bmmformula passed bmm converted brmsformula, can access brmsformula via bmmfit object returned bmm() function: Similarly, can access distributional family used implement specified model, bmmfit$family return family object generated bmm passed brms fitting. Finally, can also access data used bmm fit model via bmmfit$data. many cases data equal data provided user. sometimes bmm internally computes additional index variables specifying models adequately. data stored bmmfit object contains additional variables. way, interested customize models fit brms without bmm, able obtain important information essential specifying models implemented bmm. Fit objects bmm use custom summary function format output. However, can call brms summary instead bmm summary setting backend option summary function brms. way summary function brmsfit objects used instead function bmmfit objects. brmsfit summary also contains brmsformula created bmm. Compare default summary method bmmfit objects:","code":"user_formula <- bmf(   thetat ~ 0 + set_size + (0 + set_size | id),   kappa ~ 0 + set_size + (0 + set_size | id) )  my_model <- mixture2p(resp_error = \"error\")  bmmfit <- bmm(   formula = user_formula,   data = my_data,   model = my_model,   file = \"assets/bmmfit_mixture2p_vignette\" ) bmmfit$formula #> error ~ 1  #> mu1 ~ 1 #> kappa ~ 0 + set_size + (0 + set_size || id) #> thetat ~ 0 + set_size + (0 + set_size || id) #> kappa2 ~ 1 #> mu2 ~ 1 #> kappa1 ~ kappa #> theta1 ~ thetat bmmfit$family #>  #> Mixture #>  #> Family: von_mises  #> Link function: tan_half  #>  #> Family: von_mises  #> Link function: tan_half head(bmmfit$data) #>        error set_size id #> 1 -0.0130000        1  1 #> 2 -0.0660000        1  1 #> 3  0.1891853        1  1 #> 4 -0.4500000        1  1 #> 5 -0.0210000        1  1 #> 6 -0.0740000        1  1 summary(bmmfit, backend = \"brms\") #> Warning: There were 1 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #>  Family: mixture(von_mises, von_mises)  #>   Links: mu1 = tan_half; kappa1 = log; mu2 = tan_half; kappa2 = log; theta1 = identity; theta2 = identity  #> Formula: error ~ 1  #>          mu1 ~ 1 #>          kappa ~ 0 + set_size + (0 + set_size || id) #>          thetat ~ 0 + set_size + (0 + set_size || id) #>          kappa2 ~ 1 #>          mu2 ~ 1 #>          kappa1 ~ kappa #>          theta1 ~ thetat #>    Data: dat_preprocessed (Number of observations: 7271)  #>   Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; #>          total post-warmup draws = 4000 #>  #> Multilevel Hyperparameters: #> ~id (Number of levels: 12)  #>                      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sd(kappa_set_size1)      0.36      0.10     0.22     0.60 1.00     1267     2370 #> sd(kappa_set_size2)      0.21      0.08     0.08     0.39 1.00     1302     1020 #> sd(kappa_set_size4)      0.34      0.11     0.18     0.60 1.00     1924     2711 #> sd(kappa_set_size6)      0.43      0.15     0.21     0.79 1.00     1779     2444 #> sd(thetat_set_size1)     0.57      0.45     0.03     1.73 1.00     1265     1452 #> sd(thetat_set_size2)     0.93      0.29     0.51     1.64 1.00     1747     2568 #> sd(thetat_set_size4)     0.95      0.27     0.55     1.63 1.00     1412     2109 #> sd(thetat_set_size6)     0.67      0.20     0.39     1.15 1.00     1643     2310 #>  #> Regression Coefficients: #>                  Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> mu1_Intercept        0.00      0.00     0.00     0.00   NA       NA       NA #> mu2_Intercept        0.00      0.00     0.00     0.00   NA       NA       NA #> kappa2_Intercept  -100.00      0.00  -100.00  -100.00   NA       NA       NA #> kappa_set_size1      2.89      0.12     2.66     3.12 1.00     1406     1716 #> kappa_set_size2      2.40      0.08     2.24     2.56 1.00     2632     2527 #> kappa_set_size4      2.08      0.12     1.84     2.32 1.00     2426     2690 #> kappa_set_size6      1.94      0.15     1.65     2.25 1.00     2517     2627 #> thetat_set_size1     4.53      0.40     3.89     5.43 1.00     2316     1088 #> thetat_set_size2     2.56      0.31     1.94     3.17 1.00     1658     1999 #> thetat_set_size4     1.08      0.29     0.50     1.67 1.00     1312     1735 #> thetat_set_size6     0.32      0.21    -0.08     0.75 1.00     1502     2120 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1). summary(bmmfit) Warning: There were 1 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup Model: mixture2p(resp_error = \"error\")    Links: mu1 = tan_half; kappa = log; thetat = identity  Formula: mu1 = 0          kappa ~ 0 + set_size + (0 + set_size || id)          thetat ~ 0 + set_size + (0 + set_size || id)     Data: dat_preprocessed (Number of observations: 7271)   Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;          total post-warmup draws = 4000  Multilevel Hyperparameters: ~id (Number of levels: 12)                       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS sd(kappa_set_size1)      0.36      0.10     0.22     0.60 1.00     1267     2370 sd(kappa_set_size2)      0.21      0.08     0.08     0.39 1.00     1302     1020 sd(kappa_set_size4)      0.34      0.11     0.18     0.60 1.00     1924     2711 sd(kappa_set_size6)      0.43      0.15     0.21     0.79 1.00     1779     2444 sd(thetat_set_size1)     0.57      0.45     0.03     1.73 1.00     1265     1452 sd(thetat_set_size2)     0.93      0.29     0.51     1.64 1.00     1747     2568 sd(thetat_set_size4)     0.95      0.27     0.55     1.63 1.00     1412     2109 sd(thetat_set_size6)     0.67      0.20     0.39     1.15 1.00     1643     2310  Regression Coefficients:                  Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS kappa_set_size1      2.89      0.12     2.66     3.12 1.00     1406     1716 kappa_set_size2      2.40      0.08     2.24     2.56 1.00     2632     2527 kappa_set_size4      2.08      0.12     1.84     2.32 1.00     2426     2690 kappa_set_size6      1.94      0.15     1.65     2.25 1.00     2517     2627 thetat_set_size1     4.53      0.40     3.89     5.43 1.00     2316     1088 thetat_set_size2     2.56      0.31     1.94     3.17 1.00     1658     1999 thetat_set_size4     1.08      0.29     0.50     1.67 1.00     1312     1735 thetat_set_size6     0.32      0.21    -0.08     0.75 1.00     1502     2120  Constant Parameters:                   Value mu1_Intercept      0.00  Draws were sampled using sample(hmc). For each parameter, Bulk_ESS and Tail_ESS are effective sample size measures, and Rhat is the potential scale reduction factor on split chains (at convergence, Rhat = 1)."},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_extract_info.html","id":"default-priors-for-models-in-the-bmm-package","dir":"Articles","previous_headings":"","what":"Default priors for models in the bmm package","title":"Extracting default priors, the generated Stan code and Stan data","text":"model bmm comes default priors parameters. Unlike brms package, default priors bmm informative, based current expert knowledge domain model. default priors help model identifiability improve estimation. However, priors informed, even important understand priors used estimate model, report results model fit. can use function default_prior() brms package extract default priors model. arguments default_prior bmm() function bmm. example, want extract default priors SDM model (see online article information), set_size categorical predictor c kappa, can use following code: case used formula type ~ 0 + factor, means intercept suppressed, separate parameter estimated level set_size factor variable. SDM model, kappa c positive, defined model log scale, exponentiated afterwards. Thus, parameters sampled log scale, priors defined log scale well. default prior c student-t distribution 5 degrees freedom, mean 2, standard deviation 0.75. corresponds following prior distribution log scale, 80% prior mass 0.9 3.10:  corresponds following log-T prior native scale c, median ~7.4, 80% prior mass 2.44 22.35:  default prior kappa similar, lower mean, student-t distribution 5 degrees freedom, mean 1.75, standard deviation 0.75, corresponds median 3.5 native scale. retained intercept formula, default prior placed intercept, effects factor level relative intercept default prior normal(0, 1): can also see cases, last line “constant(0)” Intercept mu parameter, fixed 0 default model, estimated. might wonder doesn’t say mu dpar column prior - brms assumes mu default parameter models, hides output. wanted estimate mu, instead leaving fixed, prior change well: mu parameter uses tan_half link function, means student_t(1, 0, 1) prior results uniform prior native scale mu -pi pi. also notice regression coefficients mu, default prior improper flat prior - parameter bmm models flat prior default, strongly recommend set prior , want calculate Bayes Factors use Bayesian inference methods. examples make important point - priors always specified scale parameters sampled. can always check documentation given model see links parameters (e.g. ?sdm). overwrite default priors set , can use set_prior function brms. information, see ?brms::set_prior.","code":"library(bmm)  default_prior(bmf(c ~ 0 + set_size, kappa ~ 0 + set_size),                data = oberauer_lin_2017,               model = sdm(resp_error = 'dev_rad')) #>                     prior     class      coef group resp  dpar nlpar   lb   ub       source #>     student_t(5, 2, 0.75)         b set_size1                c       <NA> <NA> (vectorized) #>     student_t(5, 2, 0.75)         b set_size2                c       <NA> <NA> (vectorized) #>     student_t(5, 2, 0.75)         b set_size3                c       <NA> <NA> (vectorized) #>     student_t(5, 2, 0.75)         b set_size4                c       <NA> <NA> (vectorized) #>     student_t(5, 2, 0.75)         b set_size5                c       <NA> <NA> (vectorized) #>     student_t(5, 2, 0.75)         b set_size6                c       <NA> <NA> (vectorized) #>     student_t(5, 2, 0.75)         b set_size7                c       <NA> <NA> (vectorized) #>     student_t(5, 2, 0.75)         b set_size8                c       <NA> <NA> (vectorized) #>  student_t(5, 1.75, 0.75)         b set_size1            kappa       <NA> <NA> (vectorized) #>  student_t(5, 1.75, 0.75)         b set_size2            kappa       <NA> <NA> (vectorized) #>  student_t(5, 1.75, 0.75)         b set_size3            kappa       <NA> <NA> (vectorized) #>  student_t(5, 1.75, 0.75)         b set_size4            kappa       <NA> <NA> (vectorized) #>  student_t(5, 1.75, 0.75)         b set_size5            kappa       <NA> <NA> (vectorized) #>  student_t(5, 1.75, 0.75)         b set_size6            kappa       <NA> <NA> (vectorized) #>  student_t(5, 1.75, 0.75)         b set_size7            kappa       <NA> <NA> (vectorized) #>  student_t(5, 1.75, 0.75)         b set_size8            kappa       <NA> <NA> (vectorized) #>     student_t(5, 2, 0.75)         b                          c       <NA> <NA>         user #>  student_t(5, 1.75, 0.75)         b                      kappa       <NA> <NA>         user #>               constant(0) Intercept                                  <NA> <NA>         user log_c <- seq(-2,6, 0.01) y <- brms::dstudent_t(log_c, df = 5, mu = 2, sigma = 0.75) plot(log_c, y, type = 'l', xlab = 'log(c)', ylab = 'Density',       main = 'Prior distribution for log(c)') c <- seq(0, 50, 0.01) y <- brms::dstudent_t(log(c), df = 5, mu = 2, sigma = 0.75) / c plot(c, y, type = 'l', xlab = 'c', ylab = 'Density',       main = 'Prior distribution for c') default_prior(bmf(c ~ 1 + set_size, kappa ~ 1 + set_size),                data = oberauer_lin_2017,               model = sdm(resp_error = 'dev_rad')) #>                     prior     class      coef group resp  dpar nlpar   lb   ub       source #>              normal(0, 1)         b set_size2                c       <NA> <NA> (vectorized) #>              normal(0, 1)         b set_size3                c       <NA> <NA> (vectorized) #>              normal(0, 1)         b set_size4                c       <NA> <NA> (vectorized) #>              normal(0, 1)         b set_size5                c       <NA> <NA> (vectorized) #>              normal(0, 1)         b set_size6                c       <NA> <NA> (vectorized) #>              normal(0, 1)         b set_size7                c       <NA> <NA> (vectorized) #>              normal(0, 1)         b set_size8                c       <NA> <NA> (vectorized) #>              normal(0, 1)         b set_size2            kappa       <NA> <NA> (vectorized) #>              normal(0, 1)         b set_size3            kappa       <NA> <NA> (vectorized) #>              normal(0, 1)         b set_size4            kappa       <NA> <NA> (vectorized) #>              normal(0, 1)         b set_size5            kappa       <NA> <NA> (vectorized) #>              normal(0, 1)         b set_size6            kappa       <NA> <NA> (vectorized) #>              normal(0, 1)         b set_size7            kappa       <NA> <NA> (vectorized) #>              normal(0, 1)         b set_size8            kappa       <NA> <NA> (vectorized) #>              normal(0, 1)         b                          c       <NA> <NA>         user #>     student_t(5, 2, 0.75) Intercept                          c       <NA> <NA>         user #>              normal(0, 1)         b                      kappa       <NA> <NA>         user #>  student_t(5, 1.75, 0.75) Intercept                      kappa       <NA> <NA>         user #>               constant(0) Intercept                                  <NA> <NA>         user default_prior(bmf(mu ~ 1 + set_size, c ~ 1, kappa ~ 1),               data = oberauer_lin_2017,               model = sdm(resp_error = 'dev_rad')) #>                     prior     class      coef group resp  dpar nlpar   lb   ub       source #>                    (flat)         b                                                 default #>                    (flat)         b set_size2                                  (vectorized) #>                    (flat)         b set_size3                                  (vectorized) #>                    (flat)         b set_size4                                  (vectorized) #>                    (flat)         b set_size5                                  (vectorized) #>                    (flat)         b set_size6                                  (vectorized) #>                    (flat)         b set_size7                                  (vectorized) #>                    (flat)         b set_size8                                  (vectorized) #>        student_t(1, 0, 1) Intercept                                  <NA> <NA>         user #>     student_t(5, 2, 0.75) Intercept                          c       <NA> <NA>         user #>  student_t(5, 1.75, 0.75) Intercept                      kappa       <NA> <NA>         user"},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_extract_info.html","id":"extracting-the-stan-code","dir":"Articles","previous_headings":"","what":"Extracting the Stan code","title":"Extracting default priors, the generated Stan code and Stan data","text":"Stan code used fitting model generated together bmm brms. bmm takes care code specific model, brms generates code regression syntax, priors everything else. want get Stan code used fitting model, can inspect modify , can use stancode() function brms: Alternatively, already fitted model object, can just call stancode() object, give result:","code":"stancode(bmf(c ~ 0 + set_size, kappa ~ 0 + set_size),           data = oberauer_lin_2017,          model = sdm(resp_error = 'dev_rad')) // generated with brms 2.22.0 and bmm 1.1.1.9000 functions {   /* compute the tan_half link    * Args:    *   x: a scalar in (-pi, pi)    * Returns:    *   a scalar in (-Inf, Inf)    */    real tan_half(real x) {      return tan(x / 2);    }   /* compute the tan_half link (vectorized)    * Args:    *   x: a vector in (-pi, pi)    * Returns:    *   a vector in (-Inf, Inf)    */    vector tan_half(vector x) {      return tan(x / 2);    }   /* compute the inverse of the tan_half link    * Args:    *   y: a scalar in (-Inf, Inf)    * Returns:    *   a scalar in (-pi, pi)    */    real inv_tan_half(real y) {      return 2 * atan(y);    }   /* compute the inverse of the tan_half link (vectorized)    * Args:    *   y: a vector in (-Inf, Inf)    * Returns:    *   a vector in (-pi, pi)    */    vector inv_tan_half(vector y) {      return 2 * atan(y);    }      // utility function trick for converting real to integer type   int bin_search(real x, int min_val, int max_val) {       int mid_p;       int L = min_val;       int R = max_val;       while(L < R) {         mid_p = (R-L) %/% 2;         if (L + mid_p < x) {           L += mid_p + 1;         } else if (L + mid_p > x) {           R = L + mid_p - 1;         } else {           return(L + mid_p);         }       }       return(L);     }    // utility function for determining optimal number of chebyshev points for the denominator approximation   int get_m(real c, real kappa) {     real m = floor(2 * exp(0.4*c) * kappa^(fma(c,0.0145,0.7)) + 0.5)+2;     int M = bin_search(m, 2, 200);     return(M);   }    // log of the numerator of the sdm likelihood   real sdm_simple_lpdf(vector y, vector mu, vector c, vector kappa) {     int N = size(y);     vector[N] num = exp(fma(kappa,cos(y-mu)-1,c)) ;     real out = dot_product(num, sqrt(kappa));     out *= inv(sqrt2()) * inv_sqrt(pi());     return(out);   }    // log of the normalization constant, approximated by chebyshev quadrature   real sdm_simple_ldenom_chquad_adaptive(real c, real kappa, matrix CN) {     int m = get_m(c,kappa);     vector[m] cosn = CN[1:m,m];     vector[m] fn = exp(fma(kappa,cosn,c)) * sqrt(kappa) * inv(sqrt2()) * inv_sqrt(pi());     real out = -log_sum_exp(fn)+log(m);     return(out);   } } data {   int<lower=1> N;  // total number of observations   vector[N] Y;  // response variable   int<lower=1> K_c;  // number of population-level effects   matrix[N, K_c] X_c;  // population-level design matrix   int<lower=1> K_kappa;  // number of population-level effects   matrix[N, K_kappa] X_kappa;  // population-level design matrix   int prior_only;  // should the likelihood be ignored? } transformed data {     // precompute chebyshev points   matrix[200,200] COSN;   for (m in 1:200) {     for (i in 1:m) {       COSN[i,m] = cos((2*i-1)*pi()/(2*m))-1;     }   } } parameters {   vector[K_c] b_c;  // regression coefficients   vector[K_kappa] b_kappa;  // regression coefficients } transformed parameters {   real Intercept;  // temporary intercept for centered predictors   real lprior = 0;  // prior contributions to the log posterior   Intercept = 0;   lprior += student_t_lpdf(b_c | 5, 2, 0.75);   lprior += student_t_lpdf(b_kappa | 5, 1.75, 0.75); } model {   // likelihood including constants   if (!prior_only) {     // initialize linear predictor term     vector[N] mu = rep_vector(0.0, N);     // initialize linear predictor term     vector[N] c = rep_vector(0.0, N);     // initialize linear predictor term     vector[N] kappa = rep_vector(0.0, N);     mu += Intercept;     c += X_c * b_c;     kappa += X_kappa * b_kappa;     mu = inv_tan_half(mu);     kappa = exp(kappa);     target += sdm_simple_lpdf(Y | mu, c, kappa);       // adaptive calculation of the normalization constant     real z;     for (n in 1:N) {         if (n == 1 || c[n] != c[n-1] || kappa[n] != kappa[n-1]) {             z = sdm_simple_ldenom_chquad_adaptive(c[n],kappa[n],COSN);         }         target += z;     }     target += -(log2()+log(pi()))*N;   }   // priors including constants   target += lprior; } generated quantities {   // actual population-level intercept   real b_Intercept = Intercept; } fit <- bmm(bmf(c ~ 0 + set_size, kappa ~ 0 + set_size),                data = oberauer_lin_2017,               model = sdm(resp_error = 'dev_rad')) stancode(fit)"},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_extract_info.html","id":"extracting-the-stan-data","dir":"Articles","previous_headings":"","what":"Extracting the Stan data","title":"Extracting default priors, the generated Stan code and Stan data","text":"want extract data used fitting model, can use standata() function brms. function return list data passed Stan fitting model.","code":"sd <- standata(bmf(c ~ 0 + set_size, kappa ~ 0 + set_size),                 data = oberauer_lin_2017,                model = sdm(resp_error = 'dev_rad')) str(sd) #> List of 10 #>  $ N         : int 15200 #>  $ Y         : num [1:15200(1d)] 0.384 -0.4538 -0.0873 0.3665 -0.0349 ... #>  $ K         : int 1 #>  $ Kc        : num 0 #>  $ X         : num [1:15200, 1] 1 1 1 1 1 1 1 1 1 1 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:15200] \"1\" \"2\" \"3\" \"4\" ... #>   .. ..$ : chr \"Intercept\" #>   ..- attr(*, \"assign\")= int 0 #>  $ K_c       : int 8 #>  $ X_c       : num [1:15200, 1:8] 0 0 0 0 1 1 0 0 0 0 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:15200] \"1\" \"2\" \"3\" \"4\" ... #>   .. ..$ : chr [1:8] \"set_size1\" \"set_size2\" \"set_size3\" \"set_size4\" ... #>   ..- attr(*, \"assign\")= int [1:8] 1 1 1 1 1 1 1 1 #>   ..- attr(*, \"contrasts\")=List of 1 #>   .. ..$ set_size: num [1:8, 1:7] 0 1 0 0 0 0 0 0 0 0 ... #>   .. .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. .. ..$ : chr [1:8] \"1\" \"2\" \"3\" \"4\" ... #>   .. .. .. ..$ : chr [1:7] \"2\" \"3\" \"4\" \"5\" ... #>  $ K_kappa   : int 8 #>  $ X_kappa   : num [1:15200, 1:8] 0 0 0 0 1 1 0 0 0 0 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:15200] \"1\" \"2\" \"3\" \"4\" ... #>   .. ..$ : chr [1:8] \"set_size1\" \"set_size2\" \"set_size3\" \"set_size4\" ... #>   ..- attr(*, \"assign\")= int [1:8] 1 1 1 1 1 1 1 1 #>   ..- attr(*, \"contrasts\")=List of 1 #>   .. ..$ set_size: num [1:8, 1:7] 0 1 0 0 0 0 0 0 0 0 ... #>   .. .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. .. ..$ : chr [1:8] \"1\" \"2\" \"3\" \"4\" ... #>   .. .. .. ..$ : chr [1:7] \"2\" \"3\" \"4\" \"5\" ... #>  $ prior_only: int 0 #>  - attr(*, \"class\")= chr [1:2] \"standata\" \"list\""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_imm.html","id":"introduction-to-the-model","dir":"Articles","previous_headings":"","what":"Introduction to the model","title":"The Interference Measurement Model (IMM)","text":"Interference Measurement Model (IMM) measurement model continous reproduction tasks domain visual working memory. model introduced Oberauer et al. (2017) . aim IMM capture response behavior continuous reproduction tasks including occurrence swap errors items encoded visual working memory. IMM assumes retrieval, --remembered items features (e.g., colors, orientations, shapes) associated context appeared (e.g. spatial location). associations can continuous strength represent bindings contents context --remembered information (see Figure 1.1). retrieval different sources activation contribute activation --retrieved contents. Background noise (b) uniformly activates possible responses, example 360 colors participants can chose color wheel experiment. Cue-independent activation () equally activates features encoded visual working memory retrieval. cue-dependent activation (c) activates features associated current retrieval cue (e.g., spatial location cued retrieved). Additionally, IMM assumes cue-dependent activation follows generalization gradient (s) activates similar contexts. Figure 1.1: Illustration IMM Oberauer et al. (2017) activation potential feature \\(x\\) retrieved sum weighted activation three activation sources, given retrieval cue \\(L\\) location \\(\\theta\\): \\[ (x|L_\\theta) = b \\times A_b(x) + \\times A_a(x) + c \\times A_c(c|L_\\theta) \\] background activation (\\(A_b\\)) independent encoded features thus modeled uniform distribution around circular feature space. implemented von-Mises (vM) distribution centered 0 precision \\(\\kappa = 0\\): \\[ A_b(x) = vM(x,0,0) \\] cue-independent activation (\\(A_a\\)) modeled sum von Mises distributions centered feature values \\(x_i\\) \\(n\\) encoded items \\(\\) precision memory : \\[ A_a(x) = \\sum^n_{= 1} vM(x,x_i,\\kappa) \\] cue-dependent activation (\\(A_c\\)) modeled sum von Mises distributions centered feature values \\(x_i\\) \\(n\\) encoded items \\(\\) precision memory . distributions weighted spatial distance \\(D\\) context \\(L\\) feature associated cue context \\(L_\\theta\\). distance weighted generalization gradient \\(s\\) captures specificity bindings cue dimension: \\[ A_c(x|L_\\theta) = \\sum^n_{= 1} e^{-s*D(L,L\\theta)} \\times vM(x,x_i,\\kappa) \\] probability choosing response \\(\\hat{x}\\) results normalizing activation possible responses \\(N\\). original publication IMM done using Luce’s choice rule: \\[ P(\\hat{x}|L_\\theta) = \\frac{(\\hat{x}|L_\\theta)}{\\sum^N_{j=1}(j|L_\\theta)} \\] bmm package uses parameterization, except uses log Link function activation parameters ensure parameters positive. sum, IMM assumes responses continuous reproduction tasks results cue-based retrieval cue-independent activation features corrupted background noise.","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_imm.html","id":"parametrization-in-the-bmm-package","dir":"Articles","previous_headings":"","what":"Parametrization in the bmm package","title":"The Interference Measurement Model (IMM)","text":"identification, one weighting parameters fixed. original publication strength cue-dependent activation \\(c\\) fixed one. default setup brms however currently allows fix strength background noise \\(b\\) one Therefore, implementations IMM bmm package, strength cue-dependent cue-independent activation, \\(c\\) \\(\\), can estimated predicted independent variables. Apart , precision memory representations \\(\\kappa\\) generalization gradient \\(s\\) parameterized way original publication. Please also note, scaling generalization gradient s dependent scaling distance D target location locations non-targets. previous studies estimating IMM (Oberauer et al. 2017) distances scaled radians, items placed imaginary circle around center screen. However, studies might position color patches randomly inside frame certain width height thus might use euclidean distances. Also changing radius imaginary circles color patches placed , change absolute distance items. affect absolute size generalization gradient s. Thus, differences generalization gradient s different studies interpreted strongly, especially studies used different distance measures different experimental settings respect placement items. now, recommend differences generalization gradient s conditions single experiment taken robust results.","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_imm.html","id":"fitting-the-model-with-bmm","dir":"Articles","previous_headings":"","what":"Fitting the model with bmm","title":"The Interference Measurement Model (IMM)","text":"start loading bmm package:","code":"library(bmm)"},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_imm.html","id":"generating-simulated-data","dir":"Articles","previous_headings":"3 Fitting the model with bmm","what":"Generating simulated data","title":"The Interference Measurement Model (IMM)","text":"already data set want fit, can skip section. Alternatively, can use data provided package (see data(package='bmm')) generate data using random generation function provided bmm package.","code":"# set seed for reproducibility set.seed(123)  # specfiy generating parameters Cs <- c(4,4,2,2) As <- c(0.5,1,0.5,0.5) Ss <- c(10,10,5,5) kappas <- c(15,10,15,10) nTrials = 2000 set_size = 5  simData <- data.frame() for (i in 1:length(Cs)) {   # generate different non-target locations for each condition   item_location <- c(0, runif(set_size - 1, -pi,pi))      # generate different distances for each condition   item_distance <- c(0, runif(set_size - 1, min = 0.1, max = pi))      # simulate data for each condition   genData <- rimm(n = nTrials,                   mu = item_location,                   dist = item_distance,                   c = Cs[i], a = As[i],                   b = 1, s = Ss[i], kappa = kappas[i])      condData <- data.frame(     resp_error = genData,     trialID = 1:nTrials,     cond = i,     color_item1 = 0,     dist_item1 = 0   )      init_colnames <- colnames(condData)      for (j in 1:(set_size - 1)) {     condData <- cbind(condData,item_location[j + 1])     condData <- cbind(condData,item_distance[j + 1])   }      colnames(condData) <- c(init_colnames,                           paste0(rep(c(\"color_item\",\"dist_item\"),times = set_size - 1),                                   rep(2:(set_size),each = 2)))      simData <- rbind(simData,condData) }  # convert condition variable to a factor  simData$cond <- as.factor(simData$cond)"},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_imm.html","id":"estimating-the-model-with-bmm","dir":"Articles","previous_headings":"3 Fitting the model with bmm","what":"Estimating the model with bmm","title":"The Interference Measurement Model (IMM)","text":"estimate IMM first need specify formula. specify formula using bmmformula function (bmf). formula, directly estimate parameters four conditions. Unlike brmsformula provide dependent variable formula.: , can specify model want estimate. includes specifying name variable containing dependent variable resp_error simulated data set. Additionally, also need provide information non_target locations, name variable coding spatial distances nt_features target spaDist, set_size used data. set_size can either fixed integer, one set_size data, name variable coding set_size data: example specified column names non_targets explicitly via paste0('color_item',2:5). Alternatively, can use regular expression match non-target feature columns dataset. example, can specify model different ways via regular expressions: default imm() function implements full imm model. can specify reduced model setting version argument “abc” “bsc” (see ?imm). Finally, can fit model passing relevant arguments bmm() function: Running model takes 2 5 minutes (depending speed computer). specified file argument save model fit avoid reruning model future, line optional. brms cmdstanr typically print information sampling progress. Using fit object can quick look summary fitted model: first thing might notice parts formula passed bmm() function, bmm added lot additional specifications implement IMM. nothing check. interested customizing exploring different assumptions imposed IMM, start taking formula adapting accordingly. Next, can look estimated parameters. first thing check sampling converged, indicated Rhat values close one. want inspection sampling, can check functionality implemented brmsto . parameter estimates c already native scale, s kappa estimated using log link function, transform back native scale. results indicate parameters, except s well recovered. already noted Oberauer et al. (2017), good recovery generalization gradient s requires lot data. Thus might consider opting simplified version IMM without s parameter, imm_abc. can illustrate recovery data generating parameters plotting full posterior distributions alongside data generating parameters. need extract posterior draws using tidybayes package include data generating parameters plots posteriors.","code":"model_formula <- bmf(   c ~ 0 + cond,   a ~ 0 + cond,   s ~ 0 + cond,   kappa ~ 0 + cond ) model <- imm(resp_error = \"resp_error\",              nt_features = paste0(\"color_item\",2:5),              set_size = set_size,              nt_distances = paste0(\"dist_item\",2:5),              version = \"full\") model <- imm(resp_error = \"resp_error\",              nt_features = \"color_item[2-5]\",              set_size = set_size,              nt_distances = \"dist_item[2-5]\",              regex = TRUE) fit <- bmm(   formula = model_formula,   data = simData,   model = model,   cores = 4,   backend = \"cmdstanr\",   file = \"assets/bmmfit_imm_vignette\" ) summary(fit) Model: imm(resp_error = \"resp_error\",              nt_features = paste0(\"color_item\", 2:5),              nt_distances = paste0(\"dist_item\", 2:5),              set_size = set_size)    Links: mu1 = tan_half; kappa = log; a = log; c = log; s = log  Formula: mu1 = 0          kappa ~ 0 + cond          a ~ 0 + cond          c ~ 0 + cond          s ~ 0 + cond     Data: simData (Number of observations: 8000)   Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;          total post-warmup draws = 4000  Regression Coefficients:             Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS kappa_cond1     2.66      0.05     2.56     2.77 1.00     4057     2739 kappa_cond2     2.46      0.06     2.34     2.57 1.00     4242     2685 kappa_cond3     2.76      0.06     2.63     2.89 1.00     3797     2534 kappa_cond4     2.27      0.06     2.15     2.38 1.00     4886     2930 a_cond1        -0.80      0.24    -1.44    -0.44 1.00     2422     1245 a_cond2         0.08      0.19    -0.27     0.46 1.00     3358     2847 a_cond3        -0.89      0.15    -1.20    -0.59 1.00     3065     2508 a_cond4        -0.64      0.16    -0.96    -0.32 1.00     3707     3062 c_cond1         1.40      0.10     1.20     1.61 1.00     4138     2634 c_cond2         1.25      0.17     0.93     1.59 1.00     3185     2931 c_cond3         0.64      0.12     0.42     0.87 1.00     3006     2758 c_cond4         0.78      0.12     0.56     1.01 1.00     4198     3187 s_cond1         0.78      0.56     0.08     2.27 1.00     1949     1342 s_cond2         2.27      0.12     2.02     2.52 1.00     4398     2165 s_cond3         1.44      0.44     0.87     2.53 1.00     2179     1899 s_cond4         1.75      0.14     1.52     2.04 1.00     3945     2221  Constant Parameters:                   Value mu1_Intercept      0.00  Draws were sampled using sample(hmc). For each parameter, Bulk_ESS and Tail_ESS are effective sample size measures, and Rhat is the potential scale reduction factor on split chains (at convergence, Rhat = 1). fixedFX <- brms::fixef(fit)  # print posterior means for the s parameter fixedFX[startsWith(rownames(fixedFX),\"c_\"),] #>          Estimate Est.Error      Q2.5     Q97.5 #> c_cond1 1.4029191 0.1043972 1.2043833 1.6140742 #> c_cond2 1.2515988 0.1666962 0.9340766 1.5871405 #> c_cond3 0.6383213 0.1168157 0.4215037 0.8661965 #> c_cond4 0.7773603 0.1154368 0.5603164 1.0053527  # print posterior means for the s parameter fixedFX[startsWith(rownames(fixedFX),\"a_\"),] #>            Estimate Est.Error       Q2.5      Q97.5 #> a_cond1 -0.80298699 0.2368208 -1.4410525 -0.4400670 #> a_cond2  0.08206161 0.1863355 -0.2718943  0.4588391 #> a_cond3 -0.89235205 0.1513407 -1.1950945 -0.5943169 #> a_cond4 -0.63825173 0.1603443 -0.9612214 -0.3244024  # print posterior means for the s parameter exp(fixedFX[grepl(\"s_\",rownames(fixedFX)),]) #>         Estimate Est.Error     Q2.5     Q97.5 #> s_cond1 2.172801  1.758737 1.086510  9.658011 #> s_cond2 9.646052  1.132108 7.575980 12.387176 #> s_cond3 4.205237  1.552785 2.380787 12.551168 #> s_cond4 5.767301  1.144775 4.563214  7.725994  # print posterior means for the s parameter exp(fixedFX[grepl(\"kappa_\",rownames(fixedFX)),]) #>              Estimate Est.Error      Q2.5    Q97.5 #> kappa_cond1 14.346976  1.055983 12.929283 16.01333 #> kappa_cond2 11.648836  1.061680 10.360751 13.05853 #> kappa_cond3 15.762715  1.066499 13.841243 17.91177 #> kappa_cond4  9.655314  1.059530  8.619316 10.81511 library(tidybayes) library(dplyr) library(tidyr) library(ggplot2)  # extract the posterior draws draws <- tidybayes::tidy_draws(fit) draws <- select(draws, starts_with(\"b_\")) %>% select(-(1:3)) %>%    mutate_at(vars(starts_with(\"b_\")),exp)  # plot posterior with original parameters overlayed as diamonds as.data.frame(draws) %>%    gather(par, value) %>%    ggplot(aes(value, par)) +   tidybayes::stat_halfeyeh(normalize = \"groups\") +   geom_point(data = data.frame(par = colnames(draws),                                value = c(kappas, As, Cs, Ss)),              aes(value,par), color = \"red\",              shape = \"diamond\", size = 2.5) +   scale_x_continuous(lim=c(-1.5,20)) colnames(draws) #>  [1] \"b_kappa_cond1\" \"b_kappa_cond2\" \"b_kappa_cond3\" \"b_kappa_cond4\" #>  [5] \"b_a_cond1\"     \"b_a_cond2\"     \"b_a_cond3\"     \"b_a_cond4\"     #>  [9] \"b_c_cond1\"     \"b_c_cond2\"     \"b_c_cond3\"     \"b_c_cond4\"     #> [13] \"b_s_cond1\"     \"b_s_cond2\"     \"b_s_cond3\"     \"b_s_cond4\""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_m3.html","id":"introduction-to-the-model","dir":"Articles","previous_headings":"","what":"Introduction to the model","title":"The Multinomial / Memory Measurement Model (M3)","text":"multinomial / memory measurement model (m3) computational measurement model introduced working memory tasks categorical responses (Oberauer Lewandowsky 2019). task typically use verbal visual materials, example: letters, words, objects, digits. prerequisite using m3 responses can grouped separate response categories. response categories model predicts frequency selecting one item category function continuous activation strengths. Withing domain working memory, m3 commonly distinguishes two different activation dimensions: Memory strength individual elements items presented single trial, often labelled item memory Memory strength relations, relying temporary bindings, often labelled binding source memory m3 also allows include additional hypothetical processes might increase diminishing activation strengths due experimental manipulations, manipulating encoding time distraction domain memory.","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_m3.html","id":"basic-assumptions-of-the-m3","dir":"Articles","previous_headings":"1 Introduction to the model","what":"Basic assumptions of the m3","title":"The Multinomial / Memory Measurement Model (M3)","text":"m3 builds two general assumptions: Choosing response (memory tasks = memory recall) represents competitive selection set response candidates Selection candidate set function relative activation candidate representation test set response candidates can either ) follow naturally stimulus material, example digits 1 9 letters alphabet, b) given experimental procedure implementing recall selection n response alternatives (n-AFC), c) constructed individual performing task. Generally, recommend focusing first second use case, provide pretty simple straightforward implementations m3. simplify use m3, model activation response candidate seperately, group response candidates categories share sources activation. example, consider simple short term memory task (simple span task) subjects asked remember digits serial order cued random serial position retrieve respective digit. task, participants can either recall correct digit associated cued position, often labelled item--position. also recall digits remember, often labelled items list positions. Finally, also recall digit part memory set , usually labelled -presented items lures. Thus, three categories responses task: correct responses items-position (labelled \\(correct\\)), list items (labelled \\(\\)), presented items (labelled \\(npl\\)). decided relevant response categories, need specify activation sources contribute towards category. simple short term memory tasks, reasonably : \\[ \\begin{align} correct & = b + + c\\\\ & = b + \\\\ npl & = b \\end{align} \\] case, \\(b\\) baseline activation background noise, can understood activation digits, participants know remember digits general. parameter \\(\\) memory strength items, general activation, items need remembered current trial. parameter \\(c\\) memory strength relations, context activation, arises context cue retrieving cued serial position.","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_m3.html","id":"choice-rules-in-the-m3","dir":"Articles","previous_headings":"1 Introduction to the model","what":"Choice Rules in the m3","title":"The Multinomial / Memory Measurement Model (M3)","text":"activation category translated probabilities recalling one item response category normalization function choice rule. bmm implemented two choice rules, different implementations Luce’s choice axiom: Simple normalization (\"simple\") choice rule normalizes absolute activation sum activation items: \\[ p_i = \\frac{n_i \\cdot A_i}{\\sum^n_{j = 1} n_j \\cdot A_j} \\] normalization probability \\(p_i\\) recalling item category \\(\\) results number candidates category \\(n_i\\) times activation category \\(A_i\\) specified activation formulas . total activation category \\(\\) gets divided sum categories \\(n\\) activation arises product number items category \\(n_j\\) times activation category \\(A_j\\). rationale underlying choice rule provides meaningful zero point. , category zero activation probability choosing category zero. Softmax softmax choice rule normalizes exponentiated activation category sum exponentiated activations: \\[ p_i = \\frac{n_i \\cdot e^{A_i}}{\\sum^n_{j = 1} n_j \\cdot e^{A_j}} \\] choice rule can interpreted n-alternative SDT model different response candidates Gumbel (double-exponential) noise distribution. Finally, model links response frequencies \\(Y\\) response category probabilities \\(p\\) using multinomial distribution total number trials: \\[ Y \\sim multinomial(p, trials) \\]","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_m3.html","id":"parametization-of-the-m3-in-bmm","dir":"Articles","previous_headings":"","what":"Parametization of the m3 in bmm","title":"The Multinomial / Memory Measurement Model (M3)","text":"Given introduction domain working memory, currently three versions m3 model implemented bmm: m3 simple span tasks (version = \"ss\") m3 complex span tasks (version = \"cs\") fully custom m3 can adapted kind task categorical responses (version = \"custom\").","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_m3.html","id":"m3-for-simple-and-complex-span-tasks","dir":"Articles","previous_headings":"2 Parametization of the m3 in bmm","what":"m3 for simple and complex span tasks","title":"The Multinomial / Memory Measurement Model (M3)","text":"simple complex span versions m3 implement activation functions outlined Formula 1 (simple span, see also activation formulas ) Formula 3 (complex span) Oberauer Lewandowsky (2019). addition three response categories simple span task, complex span model distinguished two additional response categories: distractors close cued position (\\(dist_{context}\\)), distractors far away positions (\\(dist_{}\\)). Thus, m3 complex span tasks requires use distractors potentially recalled.1 activation equation m3 complex span tasks follows2: \\[ \\begin{align} corr & = b + + c \\\\ & = b + \\\\ dist_{c} & = b + f \\cdot + f \\cdot c \\\\ dist_{o} & = b + f \\cdot \\\\ npi & = b \\end{align} \\] simple complex span m3 specify activation formulas different categories. need provide linear non-linear predictor formulas different parameters respective m3 version. Using models can investigate different activation sources vary experimental manipulations get theoretically grounded indicators individual differences different activation sources.","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_m3.html","id":"custom-m3-for-tasks-with-categorical-responses","dir":"Articles","previous_headings":"2 Parametization of the m3 in bmm","what":"Custom m3 for tasks with categorical responses","title":"The Multinomial / Memory Measurement Model (M3)","text":"version = \"custom\" m3 allows specify custom activation functions memory tasks beyond simple complex span tasks. Although m3 conceived measurement model working memory. m3 framework can generalized towards decision paradigm involving categorical decision explained continuous activation difference categorical responses. Therefore, relabeled model “memory measurement model” “multinomial measurement model” reflect broader application beyond domain working memory. example, use custom m3 dissociate different activation sources cognitive processes contributing memory performance memory updating tasks. addition, recalling correct item, items positions, items presented current trial, participants can also recall outdated items updated trial tasks. frequency recalling items, can inform us processes contributing towards replacing initially encoded item new item. One model discussed Oberauer Lewandowsky (2019). version = \"custom\" m3 provide activation functions response categories. Apart still provide linear prediction formulas predicting different parameters experimental conditions. details, please see section Fitting m3","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_m3.html","id":"parameter-scaling-the-m3","dir":"Articles","previous_headings":"2 Parametization of the m3 in bmm","what":"Parameter Scaling the m3","title":"The Multinomial / Memory Measurement Model (M3)","text":"Generally, one m3 parameters fixed set scaling model. bmm default fix background noise parameter b. Thus values parameters interpreted relative background noise. value b fixed depends choice rule choose fitting model. simple choice rule, b fixed 0.1, softmax choice rule, b fixed 0. chose two fix background noise b scaling two reasons: Fixing background noise similar fixing noise parameters cognitive measurement models, diffusion constant s, standard deviation noise added signal noise distribution SDT. bmm require activation formulas contain least background noise b. ensures activation source, model predicts random guessing. principle, can decide fix another parameter scaling. need specify parameter fixed bmmformula additionally provide formula predict background noise b.","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_m3.html","id":"fitting-the-m3","dir":"Articles","previous_headings":"","what":"Fitting the M3","title":"The Multinomial / Memory Measurement Model (M3)","text":"fit m3 bmm, need perform three steps models fitted bmm: Load data format match requirements m3 Specify bmmformula Create bmmodel object links model variables required fitting data ss cs version m3 steps practically identical fitting bmmodel. custom version m3 requires additional bmmformula specify custom activation formulas response category. explained .","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_m3.html","id":"the-data","dir":"Articles","previous_headings":"3  Fitting the M3","what":"The data","title":"The Multinomial / Memory Measurement Model (M3)","text":"Let’s begin loading bmm package. example, using data first experiment Oberauer Lewandowsky (2019). data set part bmm package oberauer_lewandowsky_2019_e1 data contains following variables: ID: integer uniquely identifying participant experiment cond: factor distinguishing three experimental conditions varied type distractors corr, , dist, npl: frequencies responding one item respective response categories n_corr, n_other, n_dist, n_npl: number response candidates response categories experimental condition data set already contains information required fit M3 model. data set long format contains response_category response trial belongs , need aggregate data sum number responses category experimental conditions model fitted .","code":"library(bmm) data <- oberauer_lewandowsky_2019_e1 head(data) #> # A tibble: 6 × 10 #>      ID cond             corr other   npl  dist n_corr n_other n_dist n_npl #>   <int> <fct>           <dbl> <dbl> <dbl> <dbl>  <dbl>   <dbl>  <dbl> <dbl> #> 1     1 new distractors    78    11     3     8      1       4      5     5 #> 2     1 old reordered      73    23     4    NA      1       4      0    10 #> 3     1 old same           95     4     1    NA      1       4      0    10 #> 4     2 new distractors    49    23     1    27      1       4      5     5 #> 5     2 old reordered      54    44     7    NA      1       4      0    10 #> 6     2 old same           64    23     8    NA      1       4      0    10"},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_m3.html","id":"specifying-the-bmmformula-for-the-m3","dir":"Articles","previous_headings":"3  Fitting the M3","what":"Specifying the bmmformula for the m3","title":"The Multinomial / Memory Measurement Model (M3)","text":"set data, specify bmmformula. ss cs versions m3 bmmformula contain linear model formulas model parameters. look like : custom version m3 bmmformula additionally needs contain activation formulas response category. done using label response category predicting activation function want use category. activation function can linear combination different activation sources non-linear function activation sources model parameters variables data, exemplified complex models Oberauer Lewandowsky (2019): wanted implement model proposed Oberauer Lewandowsky (2019) data set, need specified four activation formulas response categories corr, , dist, npl: label parameters activation formula , except using underscores variable names parameter b reserved baseline activation background noise required part activation function response category. Apart , recommend using short labels avoid parsing errors special symbols. Based parameter labels used activation functions, can specify linear formulas parameter: , can combine formulas one adding using + operator. Alternatively can include formulas one call bmmformula:","code":"# example formula for version = ss ss_formula <- bmf(   c ~ 1 + cond + (1 + cond | ID),   a ~ 1 + cond + (1 + cond | ID) )  # example formula for version = cs cs_formula <- bmf(   c ~ 1 + cond + (1 + cond | ID),   a ~ 1 + cond + (1 + cond | ID),   f ~ 1 + (1 | ID) ) cat_label ~ activation_function act_formulas <- bmf(   corr ~ b + a + c,   other ~ b + a,   dist ~ b + d,   npl ~ b ) par_formulas <- bmf(   c ~ 1 + cond + (1 + cond | ID),   a ~ 1 + cond + (1 + cond | ID),   d ~ 1 + (1 | ID) ) full_formula <- act_formulas + par_formulas  # pass all formulas in one call full_formula <- bmf(   corr ~ b + a + c,   other ~ b + a,   dist ~ b + d,   npl ~ b,   c ~ 1 + cond + (1 + cond || ID),   a ~ 1 + cond + (1 + cond || ID),   d ~ 1 + (1 || ID) )"},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_m3.html","id":"setting-up-the-bmmodel-object-for-the-m3","dir":"Articles","previous_headings":"3  Fitting the M3","what":"Setting up the bmmodel object for the m3","title":"The Multinomial / Memory Measurement Model (M3)","text":"last thing need fitting m3 data set bmmodel object. need call m3 function provide relevant information model. entails: name response categories number response options category variable names contain number response options data choice rule, explicitly called bmm use softmax default m3 version, explicitly selected bmm use custom version default Thus, basic set m3 object looks like : custom version, additionally need provide links used model parameters.links ensure model parameters stay correct value range. particular simple choice rule essential, activation positive. Thus, recommend using log link functions parameters represent activation sources, general context activation, especially using simple choice rule. Based provided links model parameters, bmm set default_priors aim reasonable parameter range. recommend check priors set custom version m3 andconsider parameter ranges reasonable different model parameters provide default_priors . detailed information priors bmm please see vignette(\"extract_info\"). short, can provide priors intercepts main effects effects. Setting m3 object including info looks like :","code":"my_model <- m3(resp_cats = c(\"corr\",\"other\",\"dist\",\"npl\"),                num_options = c(\"n_corr\",\"n_other\",\"n_dist\",\"n_npl\"),                choice_rule = \"simple\",                version = \"custom\") my_links <- list(   c = \"log\", a = \"log\", d = \"log\" )  my_model <- m3(resp_cats = c(\"corr\",\"other\",\"dist\",\"npl\"),                num_options = c(\"n_corr\",\"n_other\",\"n_dist\",\"n_npl\"),                choice_rule = \"simple\",                version = \"custom\",                links = my_links)  # print default priors determined based on link functions default_prior(full_formula, data, my_model) #> Warning: Default priors for each parameter will be specified internally based on the provided link function. #> Please check if the used priors are reasonable for your application #>                 prior class             coef group resp dpar nlpar   lb   ub #>        normal(0, 0.5)     b condoldreordered                     a <NA> <NA> #>        normal(0, 0.5)     b      condoldsame                     a <NA> <NA> #>  student_t(3, 0, 2.5)    sd                                      a    0      #>  student_t(3, 0, 2.5)    sd                     ID               a    0      #>  student_t(3, 0, 2.5)    sd condoldreordered    ID               a    0      #>  student_t(3, 0, 2.5)    sd      condoldsame    ID               a    0      #>  student_t(3, 0, 2.5)    sd        Intercept    ID               a    0      #>                (flat)     b                                      b           #>        normal(0, 0.5)     b condoldreordered                     c <NA> <NA> #>        normal(0, 0.5)     b      condoldsame                     c <NA> <NA> #>  student_t(3, 0, 2.5)    sd                                      c    0      #>  student_t(3, 0, 2.5)    sd                     ID               c    0      #>  student_t(3, 0, 2.5)    sd condoldreordered    ID               c    0      #>  student_t(3, 0, 2.5)    sd      condoldsame    ID               c    0      #>  student_t(3, 0, 2.5)    sd        Intercept    ID               c    0      #>                (flat)     b                                      d           #>  student_t(3, 0, 2.5)    sd                                      d    0      #>  student_t(3, 0, 2.5)    sd                     ID               d    0      #>  student_t(3, 0, 2.5)    sd        Intercept    ID               d    0      #>        normal(0, 0.5)     b                                      a <NA> <NA> #>          normal(1, 1)     b        Intercept                     a <NA> <NA> #>        normal(0, 0.5)     b                                      c <NA> <NA> #>          normal(1, 1)     b        Intercept                     c <NA> <NA> #>          normal(1, 1)     b        Intercept                     d <NA> <NA> #>         constant(0.1)     b        Intercept                     b <NA> <NA> #>        source #>  (vectorized) #>  (vectorized) #>       default #>  (vectorized) #>  (vectorized) #>  (vectorized) #>  (vectorized) #>       default #>  (vectorized) #>  (vectorized) #>       default #>  (vectorized) #>  (vectorized) #>  (vectorized) #>  (vectorized) #>       default #>       default #>  (vectorized) #>  (vectorized) #>          user #>          user #>          user #>          user #>          user #>          user"},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_m3.html","id":"running-bmm-to-estimate-parameters","dir":"Articles","previous_headings":"3  Fitting the M3","what":"Running bmm to estimate parameters","title":"The Multinomial / Memory Measurement Model (M3)","text":"set data, bmmformula, bmmodel, can pass information bmm fit model: Running model takes 20 40 seconds (depending speed computer). Using bmmfit object can quick look summary fitted model: First, can look estimated regression coefficients. first thing check sampling converged, indicated Rhat values close one. want inspection sampling, can check functionality implemented brmsto . parameter estimates c, , d estimated using log link function, transform back native scale using exp function: estimates differ estimates reported Oberauer Lewandowsky (2019), used log link function, whereas original publication identity link used. done adding truncation arguments priors, ensure activations positive. principle, possible bmm, . However, estimation less numerically stable efficient. Therefore, recommend using log links activation parameters positive.","code":"m3_fit <- bmm(   formula = full_formula,   data = data,   model = my_model,   sample_prior = \"yes\",   cores = 4,   warmup = 1000, iter = 2000,   backend = 'cmdstanr',   file = \"assets/bmmfit_m3_vignette\",   refresh = 0 ) summary(m3_fit) Model: m3(resp_cats = c(\"corr\", \"other\", \"dist\", \"npl\"),             num_options = c(\"n_corr\", \"n_other\", \"n_dist\", \"n_npl\"),             choice_rule = \"simple\",             version = \"custom\",             links = my_links)    Links: c = log; a = log; d = log  Formula: b = 0.1          a ~ 1 + cond + (1 + cond || ID)          c ~ 1 + cond + (1 + cond || ID)          d ~ 1 + (1 || ID)          corr ~ b + a + c          other ~ b + a          dist ~ b + d          npl ~ b     Data: (Number of observations: 120)   Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;          total post-warmup draws = 4000  Multilevel Hyperparameters: ~ID (Number of levels: 40)                         Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS sd(a_Intercept)            0.67      0.11     0.48     0.91 1.00     1744 sd(a_condoldreordered)     0.55      0.12     0.33     0.80 1.00     1662 sd(a_condoldsame)          0.27      0.16     0.02     0.59 1.00      864 sd(c_Intercept)            1.62      0.22     1.25     2.10 1.00     1299 sd(c_condoldreordered)     0.23      0.13     0.02     0.49 1.00      795 sd(c_condoldsame)          0.55      0.12     0.34     0.80 1.00     1586 sd(d_Intercept)            0.69      0.12     0.48     0.97 1.00     1623                        Tail_ESS sd(a_Intercept)            2269 sd(a_condoldreordered)     2655 sd(a_condoldsame)          1925 sd(c_Intercept)            2410 sd(c_condoldreordered)     1452 sd(c_condoldsame)          2121 sd(d_Intercept)            2530  Regression Coefficients:                    Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS a_Intercept           -0.30      0.15    -0.60    -0.00 1.00     2112     2304 a_condoldreordered     0.68      0.15     0.37     0.97 1.00     2948     3032 a_condoldsame          0.10      0.14    -0.17     0.36 1.00     3607     3301 c_Intercept            1.60      0.28     1.05     2.14 1.01      466      989 c_condoldreordered     0.03      0.12    -0.22     0.26 1.00     2768     3094 c_condoldsame          0.54      0.14     0.27     0.81 1.00     2887     3132 d_Intercept           -0.45      0.15    -0.75    -0.15 1.00     2203     2615  Constant Parameters:                 Value b_Intercept      0.10  Draws were sampled using sample(hmc). For each parameter, Bulk_ESS and Tail_ESS are effective sample size measures, and Rhat is the potential scale reduction factor on split chains (at convergence, Rhat = 1). fixedFX <- brms::fixef(m3_fit)  # print posterior means for the c parameter exp(fixedFX[startsWith(rownames(fixedFX),\"c_\"),]) #>                    Estimate Est.Error      Q2.5    Q97.5 #> c_Intercept        4.930903  1.320092 2.8541063 8.515983 #> c_condoldreordered 1.025825  1.131547 0.8046311 1.300896 #> c_condoldsame      1.712454  1.150015 1.3079862 2.251764  # print posterior means for the a parameter exp(fixedFX[startsWith(rownames(fixedFX),\"a_\"),]) #>                     Estimate Est.Error      Q2.5     Q97.5 #> a_Intercept        0.7431726  1.161537 0.5494346 0.9965668 #> a_condoldreordered 1.9699622  1.162509 1.4450414 2.6462022 #> a_condoldsame      1.1053008  1.146248 0.8457697 1.4306108  # print posterior means for the d parameter exp(fixedFX[startsWith(rownames(fixedFX),\"d_\"),]) #>  Estimate Est.Error      Q2.5     Q97.5  #> 0.6353230 1.1666323 0.4732908 0.8628526"},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_m3.html","id":"testing-hypothesis","dir":"Articles","previous_headings":"3  Fitting the M3 > 3.4 Running bmm to estimate parameters","what":"Testing Hypothesis","title":"The Multinomial / Memory Measurement Model (M3)","text":"comparing differences different conditions, results bmm converge Oberauer Lewandowsky (2019). goal first experiment show selective influence different conditions c parameter. replicated using bmm implementation proposed m3. evaluate posterior differences conditions, can use hypothesis function brms: hypothesis compute difference specified parameters. can see c parameter condition oldsame differs new oldreorderd condition. contrast parameter condition oldreordered differs new oldsame condition. differences 95% CI include zero indicated * end line. included statement also sample priors using sample_prior = TRUE option brms running bmm, Evid.Ratio Post.Prob column given us Bayes Factor favor specified hypothesis posterior probability hypothesis true.","code":"post_diff <- c(   c_newVoldR = \"c_condoldreordered = 0\",   c_newVoldS = \"c_condoldsame = 0\",   c_oldRVolds = \"c_condoldreordered = c_condoldsame\",   a_newVoldR = \"a_condoldreordered = 0\",   a_newVoldS = \"a_condoldsame = 0\",   a_oldRVolds = \"a_condoldreordered = a_condoldsame\" )  hyp <- brms::hypothesis(m3_fit, post_diff) hyp #> Hypothesis Tests for class b: #>    Hypothesis Estimate Est.Error CI.Lower CI.Upper Evid.Ratio Post.Prob Star #> 1  c_newVoldR     0.03      0.12    -0.22     0.26       3.90      0.80      #> 2  c_newVoldS     0.54      0.14     0.27     0.81       0.01      0.01    * #> 3 c_oldRVolds    -0.51      0.14    -0.79    -0.23       0.03      0.02    * #> 4  a_newVoldR     0.68      0.15     0.37     0.97       0.00      0.00    * #> 5  a_newVoldS     0.10      0.14    -0.17     0.36       2.81      0.74      #> 6 a_oldRVolds     0.58      0.15     0.28     0.87       0.00      0.00    * #> --- #> 'CI': 90%-CI for one-sided and 95%-CI for two-sided hypotheses. #> '*': For one-sided hypotheses, the posterior probability exceeds 95%; #> for two-sided hypotheses, the value tested against lies outside the 95%-CI. #> Posterior probabilities of point hypotheses assume equal prior probabilities."},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_m3.html","id":"assessing-model-fit","dir":"Articles","previous_headings":"3  Fitting the M3 > 3.4 Running bmm to estimate parameters","what":"Assessing model fit","title":"The Multinomial / Memory Measurement Model (M3)","text":"models implemented bmm can easily assess model fit visually inspecting posterior predictive plots provided pp_check function. Unfortunately function yet implemented multinomial distributional models, m3 model. Nevertheless, pretty simple way assess model fit m3 model obtaining posterior predictions using tidybayes package. Using posterior predictive draws frequency selecting response category, can compare observed frequencies predicted frequencies. model fits data well, observed frequencies within 95% credible interval predicted frequencies.  generated plot illustrates distribution posterior predictive response distributions line observed response distributions. indicates model fits data well. particular model, unsurprising saturated respect number parameters number observations.","code":"library(tidybayes) library(dplyr) library(ggplot2)  pp_m3 <- m3_fit %>%    # obtain expected predicted draws   tidybayes::epred_draws(     newdata = .$data   ) %>% ungroup() %>%    # select only relevant variables   select(ID, cond, nTrials, .draw, .category, .epred) %>%    # calculate the mean predicted values in each condition for each response category   # and each draw   summarise(.epred = mean(.epred/nTrials),             .by = c(cond, .category, .draw))  # reshape data to match the format of the posterior predictives data$n_trials <- rowSums(data[,c(\"corr\",\"other\",\"dist\",\"npl\")], na.rm = T) data_pp <- data %>%    select(ID, n_trials, cond, corr, other, dist, npl) %>%    tidyr::pivot_longer(cols = c(corr, other, dist, npl), names_to = \".category\", values_to = \".value\") %>%    mutate(.value = .value/n_trials)  # some responses were not possible in some conditions, so we set them to zero data_pp[is.na(data_pp)] <- 0  # relabel condition factor for better readability levels(pp_m3$cond) <- c(\"new\", \"old shuffled\", \"old same\") levels(data_pp$cond) <- c(\"new\", \"old shuffled\", \"old same\")  # plot the posterior predictive draws against the observed data ggplot(data = pp_m3,        aes(y = .epred, x = cond, fill = cond)) +   facet_grid(.category ~ cond, scales = \"free\") +   gghalves::geom_half_violin(     side = \"r\", nudge = 0.1, trim = TRUE   ) +   stat_summary(data = data_pp, aes (y = .value),                fun.data = mean_se) +   labs(y = \"Response proportions\",        x = \"Condition\",        fill = \"Condition\",        title = \"Model Fit\",        subtitle = \"Posterior Predicitve vs. Observed Response Proportions\")"},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_mixture_models.html","id":"introduction-to-the-models","dir":"Articles","previous_headings":"","what":"Introduction to the models","title":"Mixture models for visual working memory","text":"two-parameter mixture model (Zhang Luck 2008) three-parameter mixture model (Bays, Catalao, Husain 2009) measurement models continuous reproduction tasks visual working memory domain (details task, see online article. measurement models continuous reproduction tasks, goal model distribution angular response errors. two-parameter mixture model (?mixture2p) distinguishes two memory states lead responses mixture two different distributions angular errors. two states : representation cued object certain precision feature visual working memory (solid blue distribution Figure 1.1) representation visual working memory thus guessing random response (dashed red distribution). Figure 1.1: Mixtures response distributions Responses based noisy memory representation correct feature come circular normal distribution (.e., von Mises) centered correct feature value, guessing responses come uniform distribution along entire circle: \\[ p(\\theta) = p_{mem} \\cdot \\text{vM}(\\theta; \\mu, \\kappa) + (1-p_{mem}) \\cdot \\text{Uniform}(\\theta; -\\pi, \\pi) \\\\ \\] \\[ p_{guess} = 1-p_{mem} \\\\ \\] \\[ vM(\\theta; \\mu, \\kappa) = \\frac{e^{\\kappa \\cos(\\theta - \\mu)}}{2\\pi I_0(\\kappa)} \\] \\(\\theta\\) response angle, \\(p_{mem}\\) probability responses come memory target feature, \\(\\mu\\) mean von Mises distribution representing target feature, \\(\\kappa\\) concentration parameter von Mises distribution, representing precision target memory representation. three-parameter mixture model (?mixture3p) adds third state: confusing cued object another object shown encoding thus reporting feature object (long dashed green distribution Figure 1.1). Responses state sometimes called non-target responses swap errors. non-target responses also come von Mises distribution centered feature non-target object. probability non-target responses represented parameter \\(p_{nt}\\), complete model : \\[ p(\\theta) = p_{mem} \\cdot \\text{vM}(\\theta; \\mu_t, \\kappa) + p_{nt} \\cdot \\frac{\\sum_{=1}^{n} \\text{vM}(\\theta; \\mu_{}, \\kappa)}{n} + (1-p_{mem}-p_{nt}) \\cdot \\text{Uniform}(\\theta; -\\pi, \\pi) \\\\ \\] \\[ p_{guess} = 1-p_{mem}-p_{nt} \\] \\(\\mu_{t}\\) location target feature, \\(\\mu_{}\\) location -th non-target feature, \\(n\\) number non-target features. applications model, responses coded angular error relative target feature. true non-target memory representations, assumed centered target feature, precision non-target memory representation assumed precision target memory representation. version model implemented bmm package: \\[ p(\\theta) = p_{mem} \\cdot \\text{vM}(\\theta; 0, \\kappa) + p_{nt} \\cdot \\frac{\\sum_{=1}^{n}  \\text{vM}(\\theta; \\mu_{}-\\mu_t, \\kappa)}{n} + (1-p_{mem}-p_{nt}) \\cdot \\text{Uniform}(\\theta; -\\pi, \\pi) \\]","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_mixture_models.html","id":"the-data","dir":"Articles","previous_headings":"","what":"The data","title":"Mixture models for visual working memory","text":"Begin loading bmm package: example, analyze data Bays, Catalao, Husain (2009). data included mixtur R package can loaded following command: data contains following columns: : id unique identifier participant set_size number items presented memory array response participant’s recollection target orientation radians target feature value target radians non_target_1 non_target5 feature values non-targets radians trials vary set_size (1, 2, 3 6), also vary encoding duration. fit mixture models bmm, first make sure data correct format. response variable radians represent angular error relative target, non-target variables radians centered relative target. can find requirements help topic ?mixture2p ?mixture3p. dataset, response non-target variables already radians, centered relative target. can check plotting response distribution. memory items selected random trial, non-centered responses show uniform distribution:  can center response non-target variables subtracting target value . can mutate function dplyr package. also need make sure response range \\((-\\pi, \\pi)\\), non-target variables range \\((-\\pi, \\pi)\\). can wrap function bmm package. can see new plot, response distribution now centered 0.  plot can also see performace gets substantially worse increasing set size. Now, can fit two mixture models two understand driving pattern.","code":"library(bmm) # install the mixtur package if you haven't done so # install.packages(\"mixtur\") dat <- mixtur::bays2009_full library(ggplot2) ggplot(dat, aes(response)) +   geom_histogram(binwidth = 0.5, fill = \"lightblue\", color = \"black\") +   labs(title = \"Response distribution\", x = \"Response error (radians)\", y = \"Frequency\") library(dplyr) dat_preprocessed <- dat %>%   mutate(error = wrap(response - target),          non_target_1 = wrap(non_target_1 - target),          non_target_2 = wrap(non_target_2 - target),          non_target_3 = wrap(non_target_3 - target),          non_target_4 = wrap(non_target_4 - target),          non_target_5 = wrap(non_target_5 - target),          set_size = as.factor(set_size))  ggplot(dat_preprocessed, aes(error)) +   geom_histogram(bins=60, fill = \"lightblue\", color = \"black\") +   labs(title = \"Response distribution\", x = \"Response error (radians)\", y = \"Frequency\") +   facet_wrap(~set_size)"},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_mixture_models.html","id":"fitting-the-2-parameter-mixture-model-with-bmm","dir":"Articles","previous_headings":"","what":"Fitting the 2-parameter mixture model with bmm","title":"Mixture models for visual working memory","text":"fit two-parameter mixture model, need specify model formula model. model formula use brms package’s bf function. linear model formulas brms, left side equation refers -predicted variable parameter right side specifies variables used predict . example, want fit model probability memory responses precision memory responses vary set size. also want effect set size vary across participants. model formula three components: response variable error predicted constant term, internally fixed mean 0 precision parameter kappa predicted set size, effect set size varies across participants mixture weight1 memory responses thetat predicted set size, effect set size varies across participants. specify model simply : Finally, fit model bmm() function. fit model function uses brms package fit model, can pass argument pass brm function.","code":"ff <- bmf(thetat ~ 0 + set_size + (0 + set_size | id),           kappa ~ 0 + set_size + (0 + set_size | id)) model <- mixture2p(resp_error = \"error\") fit <- bmm(   formula = ff,   data = dat_preprocessed,   model = model,   cores = 4,   refresh = 100,   backend = 'cmdstanr',   file = \"assets/bmmfit_mixture2p_vignette\" )"},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_mixture_models.html","id":"results-of-the-2-parameter-mixture-model","dir":"Articles","previous_headings":"","what":"Results of the 2-parameter mixture model","title":"Mixture models for visual working memory","text":"can now inspect model fit: summary shows estimated fixed effects precision mixture weight, well estimated random effects precision mixture weight. Rhat values close 1, good sign chains converged. effective sample sizes also high, means chains mixed well. now want understand estimated parameters. kappa coded within brms log-link function, need exponentiate estimates get precision parameter. can use k2sd function convert precision parameter standard deviation units. thetat mixture weight memory responses. described footnote 1, can use softmax function get probability memory responses. estimates kappa set_size : Standard deviation: Probability responses comes memory: even better visualize entire posterior distribution parameters.  black dot represents median posterior distribution, thick line represents 50% credible interval, thin line represents 95% credible interval.","code":"summary(fit) Warning: There were 1 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup Model: mixture2p(resp_error = \"error\")    Links: mu1 = tan_half; kappa = log; thetat = identity  Formula: mu1 = 0          kappa ~ 0 + set_size + (0 + set_size || id)          thetat ~ 0 + set_size + (0 + set_size || id)     Data: dat_preprocessed (Number of observations: 7271)   Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;          total post-warmup draws = 4000  Multilevel Hyperparameters: ~id (Number of levels: 12)                       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS sd(kappa_set_size1)      0.36      0.10     0.22     0.60 1.00     1267     2370 sd(kappa_set_size2)      0.21      0.08     0.08     0.39 1.00     1302     1020 sd(kappa_set_size4)      0.34      0.11     0.18     0.60 1.00     1924     2711 sd(kappa_set_size6)      0.43      0.15     0.21     0.79 1.00     1779     2444 sd(thetat_set_size1)     0.57      0.45     0.03     1.73 1.00     1265     1452 sd(thetat_set_size2)     0.93      0.29     0.51     1.64 1.00     1747     2568 sd(thetat_set_size4)     0.95      0.27     0.55     1.63 1.00     1412     2109 sd(thetat_set_size6)     0.67      0.20     0.39     1.15 1.00     1643     2310  Regression Coefficients:                  Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS kappa_set_size1      2.89      0.12     2.66     3.12 1.00     1406     1716 kappa_set_size2      2.40      0.08     2.24     2.56 1.00     2632     2527 kappa_set_size4      2.08      0.12     1.84     2.32 1.00     2426     2690 kappa_set_size6      1.94      0.15     1.65     2.25 1.00     2517     2627 thetat_set_size1     4.53      0.40     3.89     5.43 1.00     2316     1088 thetat_set_size2     2.56      0.31     1.94     3.17 1.00     1658     1999 thetat_set_size4     1.08      0.29     0.50     1.67 1.00     1312     1735 thetat_set_size6     0.32      0.21    -0.08     0.75 1.00     1502     2120  Constant Parameters:                   Value mu1_Intercept      0.00  Draws were sampled using sample(hmc). For each parameter, Bulk_ESS and Tail_ESS are effective sample size measures, and Rhat is the potential scale reduction factor on split chains (at convergence, Rhat = 1). # extract the fixed effects from the model and determine the rows that contain # the relevant parameter estimates fixedEff <- brms::fixef(fit) thetat <- fixedEff[grepl(\"thetat\",rownames(fixedEff)),] kappa <- fixedEff[grepl(\"kappa_\",rownames(fixedEff)),]  # transform parameters because brms uses special link functions kappa <- exp(kappa) sd <- k2sd(kappa[,1])  p_mem <- exp(thetat)/(exp(thetat)+1) pg <- exp(0)/(exp(thetat)+1) kappa #>                  Estimate Est.Error      Q2.5    Q97.5 #> kappa_set_size1 17.974163  1.126196 14.314425 22.69904 #> kappa_set_size2 11.069807  1.079969  9.431975 12.87640 #> kappa_set_size4  7.981807  1.126819  6.305204 10.17838 #> kappa_set_size6  6.979520  1.162236  5.189384  9.47424 names(sd) <- paste0(\"Set size \", c(1,2,4,6)) round(sd,3) #> Set size 1 Set size 2 Set size 4 Set size 6  #>      0.239      0.308      0.366      0.394 rownames(p_mem) <- paste0(\"Set size \", c(1,2,4,6)) round(p_mem,3) #>            Estimate Est.Error  Q2.5 Q97.5 #> Set size 1    0.989     0.598 0.980 0.996 #> Set size 2    0.928     0.577 0.874 0.960 #> Set size 4    0.746     0.571 0.623 0.841 #> Set size 6    0.579     0.553 0.480 0.680 library(tidybayes) library(tidyr)  # extract the posterior draws draws <- tidybayes::tidy_draws(fit) draws_theta <- select(draws, b_thetat_set_size1:b_thetat_set_size6) draws_kappa <- select(draws, b_kappa_set_size1:b_kappa_set_size6)  # transform parameters because brms uses special link functions draws_theta <- exp(draws_theta)/(exp(draws_theta) + 1) draws_kappa <- exp(draws_kappa)  # plot posterior as.data.frame(draws_theta) %>%    gather(par, value) %>%   mutate(par = gsub(\"b_thetat_set_size\", \"\", par)) %>%   ggplot(aes(par, value)) +   tidybayes::stat_halfeyeh(normalize = \"groups\", orientation = \"vertical\") +   labs(y = \"Probability of memory response\", x = \"Set size\", parse = TRUE)  as.data.frame(draws_kappa) %>%    gather(par, value) %>%   mutate(value = k2sd(value)) %>%    mutate(par = gsub(\"b_kappa_set_size\", \"\", par)) %>%   ggplot(aes(par,value)) +   tidybayes::stat_halfeyeh(normalize = \"groups\", orientation = \"vertical\") +   labs(y = \"Memory imprecision (SD)\", x = \"Set size\", parse = TRUE)"},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_mixture_models.html","id":"fitting-the-3-parameter-mixture-model-with-bmm","dir":"Articles","previous_headings":"","what":"Fitting the 3-parameter mixture model with bmm","title":"Mixture models for visual working memory","text":"Fitting 3-parameter mixture model similar. extra parameter thetant represents mixture weight non-target responses2. also need specify names non-target variables set_size3 variable mixture3p function. run model just like : rest analysis 2-parameter model. can inspect model fit, extract parameter estimates, visualize posterior distributions. example specified column names non_targets explicitely via paste0('non_target_',1:5). Alternatively, can use regular expression match non-target feature columns dataset. useful non-target feature columns named consistent way, e.g. non_target_1, non_target_2, non_target_3, etc. example, can specify model different ways via regular expressions:","code":"ff <- bmf(   thetat ~ 0 + set_size + (0 + set_size | id),   thetant ~ 0 + set_size + (0 + set_size | id),   kappa ~ 0 + set_size + (0 + set_size | id) )  model <- mixture3p(resp_error = \"error\", nt_features = paste0('non_target_',1:5), set_size = 'set_size') fit3p <- bmm(   formula = ff,   data = dat_preprocessed,   model = model,   cores = 4,   refresh = 100,   backend = 'cmdstanr' ) model <- mixture3p(resp_error = \"error\",                     nt_features = \"non_target_[1-5]\",                     set_size = 'set_size',                     regex = TRUE) model <- mixture3p(resp_error = \"error\",                     nt_features = \"non_target_\",                     set_size = 'set_size',                     regex = TRUE)"},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_sdm_simple.html","id":"introduction-to-the-model","dir":"Articles","previous_headings":"","what":"Introduction to the model","title":"The Signal Discrimination Model (SDM)","text":"Signal Discrimination Model measurement model continuous reproduction tasks visual working memory domain. model originally introduced Oberauer (2023). measurement models continuous reproduction tasks, ’s goal model distribution angular response errors. model assumes test probe appears, possible responses circle (\\(\\theta\\)) activated strength depends distance feature stored memory (\\(\\mu\\)) response options. Formally, given following activation function: \\[ S(\\theta) = c \\cdot \\frac{\\exp(\\kappa \\cdot \\cos(y-\\mu))}{2\\pi I_0(\\kappa)} \\] \\(c\\) memory strength parameter, \\(\\kappa\\) precision parameter, \\(I_0\\) modified Bessel function first kind order 0. Thus, activation function follows von Mises distribution, weigthed memory strength parameter. activation response options corrupted noise, assumed follow Gumbel distribution. response option highest activation value: \\[ Pr(\\theta) = argmax(S(\\theta) + \\epsilon) \\\\ \\epsilon \\sim Gumbel(0,1) \\] equivalent following softmax function (also known exponentiated Luce’s choice rule): \\[ Pr(\\theta) = \\frac{\\exp(S(\\theta)}{\\sum_{=1}^{n} \\exp(S(\\theta_i))} \\] n number response options, often 360 typical visual working memory experiments. summary, model assumes response errors come following distribution, \\(\\mu = 0\\): \\[ \\Large{f(\\theta\\ |\\ \\mu,c,\\kappa) = \\frac{e^ {c \\ \\frac{e^{k\\ cos(\\theta-\\mu)}}{2\\pi I_o(k)}}}{Z}} \\] Z normalizing constant ensure probability mass sums 1.","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_sdm_simple.html","id":"parametrization-in-the-bmm-package","dir":"Articles","previous_headings":"","what":"Parametrization in the bmm package","title":"The Signal Discrimination Model (SDM)","text":"bmm package use different parametrization. parametrization chosen numerical stability efficiency. Three features parametrization make difficult work practice. First, modified bessel function \\(I_0\\) increases rapidly, often leading numerical overflow. Second, bessel function expensive compute, estimating model MCMC methods can slow. Third, normalizing constant denominator requires summing 360 terms, also slow. address issues, use following parametrization SDM distribution: \\[ \\Large{f(\\theta\\ |\\ \\mu,c,\\kappa) = \\frac{ e^{c \\ \\sqrt{\\frac{k}{2\\pi}} e^{k \\ (cos(\\theta-\\mu)-1)}} }{Z}} \\] parametrization derived known approximation modified bessel function large \\(k\\) (Abramowitz, Stegun, Romer (1988)): \\[ I_0(\\kappa) \\sim ~ \\frac{e^{\\kappa}}{\\sqrt{2\\pi \\kappa}}, \\ \\ \\ \\ \\kappa \\rightarrow \\infty \\] needed, \\(c\\) parameter original formulation Oberauer (2023) can computed : \\[ c_{oberauer} = c_{bmm} \\ e^{-\\kappa} I_0(\\kappa)\\sqrt{2 \\pi \\kappa} \\] parametrization change predicted shape distribution, produces slightly different values \\(c\\) small values \\(kappa\\). parametrization default bmm package. second optimization concerns calculation normalizing constant \\(Z\\). original model assumed responses can one 360 discrete values, resulting probability mass function. bmm treat response variable continuous, makes \\(f(\\theta)\\) probability density function. means can calculate normalizing constant \\(Z\\) integrating \\(f(\\theta)\\) entire circle: \\[ Z = \\int_{-\\pi}^{\\pi} f(\\theta) d\\theta \\] integral expressed closed form, can approximated using numerical integration methods. results discrete continuous formulations nearly identical, large number response options (typical applications), number response options small, example 4-AFC tasks.","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_sdm_simple.html","id":"fitting-the-model-with-bmm","dir":"Articles","previous_headings":"","what":"Fitting the model with bmm","title":"The Signal Discrimination Model (SDM)","text":"Begin loading bmm package:","code":"library(bmm)"},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_sdm_simple.html","id":"generating-simulated-data","dir":"Articles","previous_headings":"3 Fitting the model with bmm","what":"Generating simulated data","title":"The Signal Discrimination Model (SDM)","text":"already data want fit, can skip section. current illustration, generate simulated data known parameters. bmm provides density functions typical R style, prefix d density (dsdm), p cumulative distribution function (psdm), q quantile function (qsdm), (rsdm) generating random deviates. ’s simulate data SDM distribution three conditions: gives us following distribution response errors, lines overlaying predicted density generated dsdm:","code":"# set seed for reproducibility set.seed(123)  # define parameters: cs <- c(2, 9, 2) kappas <- c(3, 1, 8)  # simulate data from the model y <- c(rsdm(n = 1000, mu=0, c = cs[1], kappa = kappas[1], parametrization = \"sqrtexp\"),        rsdm(n = 1000, mu=0, c = cs[2], kappa = kappas[2], parametrization = \"sqrtexp\"),        rsdm(n = 1000, mu=0, c = cs[3], kappa = kappas[3], parametrization = \"sqrtexp\")) dat <- data.frame(y = y, cond = factor(rep(c('A','B','C'), each=1000))) # generate predicted SDM density: dd <- data.frame(y = rep(seq(-pi, pi, length.out=1000),3),                  cond = factor(rep(c('A','B','C'), each=1000)),                  c = rep(cs, each=1000),                  kappa = rep(kappas, each=1000)) dd$d <- dsdm(dd$y, mu = 0, c = dd$c, kappa = dd$kappa, parametrization = \"sqrtexp\")  # prepare labels for plots par_labels <- data.frame(cond = c('A','B','C'),                          c = c(2, 9, 2),                          kappa = c(3, 1, 8)) par_labels$label <- paste0('c = ', par_labels$c, '\\nkappa = ', par_labels$kappa)  # plot the data and the predicted density library(ggplot2) ggplot(dat, aes(x=y, fill=cond)) +   geom_histogram(aes(y=..density..), binwidth = 0.1, position = \"identity\", alpha = 0.5) +   theme_classic() +   facet_wrap(~cond) +   geom_line(data=dd, fun=dsdm, aes(y, d)) +   scale_x_continuous(limits = c(-pi, pi)) +   labs(title = \"Simulated data from the SDM distribution\",        x = \"Response error (radians)\",        y = \"Density\") +   geom_text(data=par_labels, aes(x = -pi, y = 0.5, label = label),              hjust = 0, vjust = 0, size = 3)"},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_sdm_simple.html","id":"estimating-the-model-with-bmm","dir":"Articles","previous_headings":"3 Fitting the model with bmm","what":"Estimating the model with bmm","title":"The Signal Discrimination Model (SDM)","text":"estimate parameters SDM distribution, can use bmm() function. First, let’s specify model formula. want c kappa vary conditions. first two lines formula specify parameters vary conditions. case, want vary cond variable, use c ~ 0 + cond kappa ~ 0 + cond: specify model, case just sdmSimple(), provide name response error variable dataset: Finally, can fit model. strongly recommend using cmdstanr backend fitting SDM model, much faster stable default rstan backend particular model. ’s fit model cmdstanr: model takes 30 seconds fit compiled. can now inspect results model fit: see Rhat values less 1.01, good sign chains converged. principle inspection, let us see estimated parameters. model uses log-link function c kappa parameters, exponentiate coefficients get estimated parameters: close true values used simulate data: can see even though estimated parameters close, exactly true parameters. get better picture, can plot estimated posterior distributions parameters:  true parameters lie within 50% credible intervals, good sign model able recover true parameters data. final step, can plot data , adding another line overlay density predicted estimated parameters:  histograms represent data, black lines represent predicted density true parameters, red lines represent predicted density estimated parameters. can see estimated parameters able capture main features data.","code":"ff <- bmf(c ~ 0 + cond, kappa ~ 0 + cond) model <- sdm(resp_error = \"y\") fit <- bmm(   formula = ff,   data = dat,   model = model,   cores = 4,   init = 0.5,   backend = 'cmdstanr',   file = \"assets/bmmfit_sdm_vignette.rds\" ) summary(fit) Loading required package: rstan Loading required package: StanHeaders  rstan version 2.32.6 (Stan version 2.32.2) For execution on a local, multicore CPU with excess RAM we recommend calling options(mc.cores = parallel::detectCores()). To avoid recompilation of unchanged Stan programs, we recommend calling rstan_options(auto_write = TRUE) For within-chain threading using `reduce_sum()` or `map_rect()` Stan functions, change `threads_per_chain` option: rstan_options(threads_per_chain = 1) Model: sdm(resp_error = \"y\")    Links: mu = tan_half; c = log; kappa = log  Formula: mu = 0          c ~ 0 + cond          kappa ~ 0 + cond     Data: dat (Number of observations: 3000)   Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;          total post-warmup draws = 4000  Regression Coefficients:             Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS c_condA         0.69      0.11     0.49     0.90 1.00     2049     1910 c_condB         2.45      0.21     2.09     2.93 1.00     1870     1957 c_condC         0.57      0.07     0.44     0.71 1.00     2142     2109 kappa_condA     1.10      0.17     0.76     1.43 1.00     2150     2032 kappa_condB    -0.30      0.20    -0.73     0.05 1.00     1859     2018 kappa_condC     2.04      0.12     1.79     2.28 1.00     2188     2110  Constant Parameters:                  Value mu_Intercept      0.00  Draws were sampled using sample(hmc). For each parameter, Bulk_ESS and Tail_ESS are effective sample size measures, and Rhat is the potential scale reduction factor on split chains (at convergence, Rhat = 1). exp(brms::fixef(fit)[2:7,1]) #>     c_condA     c_condB     c_condC kappa_condA kappa_condB kappa_condC  #>   1.9954823  11.5761748   1.7743522   2.9970034   0.7443611   7.7180565 par_labels[,1:3] #>   cond c kappa #> 1    A 2     3 #> 2    B 9     1 #> 3    C 2     8 library(tidybayes) library(dplyr) library(tidyr)  # extract the posterior draws draws <- tidybayes::tidy_draws(fit) draws <- select(draws, b_c_condA:b_kappa_condC)  # plot posterior with original parameters overlayed as diamonds as.data.frame(draws) %>%    gather(par, value) %>%    mutate(value = exp(value)) %>%    ggplot(aes(value, par)) +   tidybayes::stat_halfeyeh(normalize = \"groups\") +   geom_point(data = data.frame(par = c('b_c_condA', 'b_c_condB', 'b_c_condC',                                        'b_kappa_condA', 'b_kappa_condB', 'b_kappa_condC'),                                value = c(cs, kappas)),              aes(value, par), color = \"red\",              shape = \"diamond\", size = 2.5) +   scale_x_continuous(lim = c(0, 20)) # generate predicted SDM density: ddest <- data.frame(   y = rep(seq(-pi, pi, length.out = 1000), 3),   cond = factor(rep(c(\"A\", \"B\", \"C\"), each = 1000)),   c = rep(exp(brms::fixef(fit)[2:4, 1]), each = 1000),   kappa = rep(exp(brms::fixef(fit)[5:7, 1]), each = 1000) )  # prepare labels for plots par_labels <- data.frame(   cond = c(\"A\", \"B\", \"C\"),   c_est = exp(brms::fixef(fit)[2:4, 1]),   kappa_est = exp(brms::fixef(fit)[5:7, 1]),   c = c(2, 9, 2),   kappa = c(3, 1, 8) ) par_labels$label <- paste0(   \"c = \", par_labels$c, \" (estimate = \", round(par_labels$c_est, 2), \")\\n\",   \"kappa = \", par_labels$kappa, \" (estimate = \", round(par_labels$kappa_est, 2), \")\" )  ddest$d <- dsdm(ddest$y, mu = 0, c = ddest$c, kappa = ddest$kappa, parametrization = \"sqrtexp\")  # plot the data and the predicted density ggplot(dat, aes(x = y, fill = cond)) +   geom_histogram(aes(y = ..density..), binwidth = 0.1, position = \"identity\", alpha = 0.5) +   theme_classic() +   facet_wrap(~cond) +   geom_line(data = dd, fun = dsdm, aes(y, d), color = \"black\") +   geom_line(data = ddest, fun = dsdm, aes(y, d), color = \"red\") +   scale_x_continuous(limits = c(-pi, pi)) +   labs(     title = \"Simulated data from the SDM distribution\",     x = \"Response error (radians)\",     y = \"Density\"   ) +   geom_text(data = par_labels, aes(x = -pi, y = 0.9, label = label),              hjust = 0, vjust = 0, size = 3) +   scale_y_continuous(limits = c(0, 1))"},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_vwm_crt.html","id":"task-description","dir":"Articles","previous_headings":"","what":"Task description","title":"Continuous reproduction tasks (CRT)","text":"research visual working memory participants often asked remember reproduce continuous features visual objects color orientation. continuous reproduction task (sometimes also called delayed estimation task), participants encode set visual objects visual working memory asked reproduce specific feature one cued object continuous scale test (see Figure 1.1 illustration). often features used tasks colors sampled color wheel (Wilken Ma 2004) continuous orientations bar triangle (Bays et al. 2011). set --remembered objects typically consists one eight objects spatially distributed screen. Thus, participants must associate --remembered features (e.g. color orientation) spatial locations presented . precision representation object’s feature visual working memory measured angular deviation true feature presented encoding. Figure 1.1: typical continuous reproduction task","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_vwm_crt.html","id":"the-role-of-measurement-models","dir":"Articles","previous_headings":"","what":"The role of measurement models","title":"Continuous reproduction tasks (CRT)","text":"continuous reproduction tasks, simplest measure performance average angle deviation response true feature value. many studies, average recall error main dependent variable evaluating effect experimental manipulations. Yet, average recall error confounds different properties memory representations sufficiently represent theoretical processes assumed current models visual working memory. Therefore, different measurement models proposed formalize distinct aspects visual working memory models translate observed behavior. measurement model statistical model describes relationship latent cognitive processes observed behavior. continuous reproduction tasks, measurement models provide refined representation memory processes decompose average recall error several theoretically meaningful parameters. core models assumption responses continuous reproduction tasks can stem different distributions depending continuous activation different memory representation cognitive state person recall.","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_vwm_crt.html","id":"crt-models-in-the-bmm-package","dir":"Articles","previous_headings":"","what":"CRT Models in the bmm package","title":"Continuous reproduction tasks (CRT)","text":"bmm package implements several measurement models analyzing continuous reproduction data:","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_vwm_crt.html","id":"the-two-parameter-mixture-model-zhang_luck_2008","dir":"Articles","previous_headings":"3 CRT Models in the bmm package","what":"The two-parameter mixture model (Zhang and Luck 2008)","title":"Continuous reproduction tasks (CRT)","text":"see ?mixture2p mixture models article","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_vwm_crt.html","id":"the-three-parameter-mixture-model-bays_catalao_husain_2009","dir":"Articles","previous_headings":"3 CRT Models in the bmm package","what":"The three-parameter mixture model (Bays, Catalao, and Husain 2009)","title":"Continuous reproduction tasks (CRT)","text":"see ?mixture3p mixture models article","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_vwm_crt.html","id":"the-interference-measurement-model-oberauer_lin_2017","dir":"Articles","previous_headings":"3 CRT Models in the bmm package","what":"The Interference Measurement Model (Oberauer and Lin 2017)","title":"Continuous reproduction tasks (CRT)","text":"see ?imm IMM article","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_vwm_crt.html","id":"the-signal-discrimination-model-sdm-by-oberauer_2023","dir":"Articles","previous_headings":"3 CRT Models in the bmm package","what":"The Signal Discrimination Model (SDM) by (Oberauer 2023)","title":"Continuous reproduction tasks (CRT)","text":"see ?sdm SDM article","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/bmm_vwm_crt.html","id":"preparing-data-from-half-circular-stimulus-spaces","dir":"Articles","previous_headings":"","what":"Preparing data from half-circular stimulus spaces","title":"Continuous reproduction tasks (CRT)","text":"already mentioned, task require subjects remember orientations (e.g. bars Gabor patches) without direction. stimulus material response error can range -90 90 degrees (-pi/2 pi/2). using data task, multiply response_error 2 pre-processing data, response error ranges -180 180 degrees (-pi pi). applies nt_features relative target orientation.","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vencislav Popov. Author, maintainer, copyright holder. Gidon T. Frischkorn. Author, copyright holder. Chenyu Li. Contributor. Paul-Christian Bürkner. Copyright holder.           Creator 'brms', code portions used 'bmm'.","code":""},{"path":"https://venpopov.github.io/bmm/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Frischkorn G, Popov V (2023). “tutorial estimating mixture models visual working memory tasks brms: Introducing Bayesian Measurement Modeling (bmm) package R.” PsyArXiv. doi:10.31234/osf.io/umt57.","code":"@Article{,   title = {A tutorial for estimating mixture models for visual working memory tasks in brms: Introducing the Bayesian Measurement Modeling (bmm) package for R},   author = {Gidon T. Frischkorn and Vencislav Popov},   journal = {PsyArXiv},   year = {2023},   doi = {10.31234/osf.io/umt57}, }"},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Easy and Accessible Bayesian Measurement Models Using brms","text":"goal bmm (Bayesian Measurement Models) package make easier estimate common cognitive measurement models behavioral research. achieves combining flexibility ‘brms’ package specifying linear model syntax custom functions translate cognitive measurement model distributional families can estimated using Bayesian hierarchical estimation. Cognitive measurement models provide refined representation cognitive processes underlying observed behavior, decompose observed behavior several theoretically meaningful parameters represent distinct cognitive processes.","code":""},{"path":"https://venpopov.github.io/bmm/dev/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Easy and Accessible Bayesian Measurement Models Using brms","text":"See following sections information bmm package: Available models install bmm Fitting models using bmm Exploring cogntive measurement models general structure bmm package Contributing bmm package","code":""},{"path":"https://venpopov.github.io/bmm/dev/index.html","id":"available-models","dir":"","previous_headings":"","what":"Available models","title":"Easy and Accessible Bayesian Measurement Models Using brms","text":"Currently bmm package implements mainly models used domain visual working memory research: Visual working memory Interference measurement model Oberauer Lin (2017). Two-parameter mixture model Zhang Luck (2008). Three-parameter mixture model Bays et al (2009). Signal Discrimination Model (SDM) Oberauer (2023) Working Memory (categorical) Memory Measurement Model Oberauer & Lewandowsky (2019) However, setup bmm package provides foundation implementation broad range cognitive measurement models. fact, already working implementing additional models, : Signal-Detection Models Evidence Accumulation Models Memory Models categorical response suggestions models added package, feel free create issue. Ideally describe model, point towards literature gives details model, possible link code already implemented model. Given dynamic nature bmm package currently , can always view latest list supported models running:","code":"bmm::supported_models() #> The following models are supported: #>  #> -  imm(resp_error, nt_features, nt_distances, set_size, regex, version)  #> -  m3(resp_cats, num_options, choice_rule, version)  #> -  mixture2p(resp_error)  #> -  mixture3p(resp_error, nt_features, set_size, regex)  #> -  sdm(resp_error, version)  #>  #> Type  ?modelname  to get information about a specific model, e.g.  ?imm"},{"path":"https://venpopov.github.io/bmm/dev/index.html","id":"how-to-install-bmm","dir":"","previous_headings":"","what":"How to install bmm","title":"Easy and Accessible Bayesian Measurement Models Using brms","text":"can install latest version bmm package CRAN: bmm based brms stan requires working C++ compiler. used brms , need first install dependencies. already using brms, can skip step.  Install configure C++ compiler. Detailed instructions Install rstan /cmdstanr. recommend using cmdstanr. Install brms Alternatively, can install development version package specific version package GitHub:   package significantly updated Feb 03, 2024. following older versions (earlier Version 6) Tutorial preprint, need install 0.0.1 version bmm package :","code":"install.packages(\"bmm\") if (!requireNamespace(\"remotes\")) {   install.packages(\"remotes\") } remotes::install_github(\"venpopov/bmm\") if (!requireNamespace(\"remotes\")) {   install.packages(\"remotes\") } remotes::install_github(\"venpopov/bmm@v0.0.1\")"},{"path":"https://venpopov.github.io/bmm/dev/index.html","id":"fitting-models-using-bmm","dir":"","previous_headings":"","what":"Fitting models using bmm","title":"Easy and Accessible Bayesian Measurement Models Using brms","text":"core function bmm package bmm() function. function takes: linear model formula specifying parameters model vary function experimental conditions data containing dependent variables, variables predicting model parameters, potentially additional variables providing information identify model model fit can get detailed information models implemented bmm invoking documentation model typing ?bmmodel console. example, calling information full version Interference Measurement Model look like : complete call fit model using bmm look like . example, using oberauer_lin_2017 data provided package show fit Interference Measurement Model data. want detailed description model depth explanation parameters estimated model, please look IMM article. Using call, fit object save information fitted model. bmm calls brms fit models, objects can handled way normal brmsfit object handled: can look examples fit currently implemented models reading vignettes model released version package development version.","code":"?imm library(bmm)  formula <- bmmformula(c ~ 0 + set_size,                       a ~ 0 + set_size,                       s ~ 0 + set_size,                       kappa ~ 0 + set_size)  model <- imm(resp_error = \"dev_rad\",              nt_features = paste0(\"col_nt\", 1:7),              nt_distances = paste0(\"dist_nt\",1:7),              set_size = \"set_size\")  fit <- bmm(formula = formula, data = data, model = model) # print summary summary(fit)  # plot posterior predicitive plot brms::pp_check(fit)"},{"path":"https://venpopov.github.io/bmm/dev/index.html","id":"exploring-measurement-models","dir":"","previous_headings":"","what":"Exploring measurement models","title":"Easy and Accessible Bayesian Measurement Models Using brms","text":"aid users improving intuition different models predict observed data given certain parameter set, bmm package also includes density random generation function implemented models. function provide easy way see model predicts data given certain set parameters. example can easily plot probability density function data Interference Measurement model using dimm function. similar fashion random generation function included model, generates random data based set data generating parameters. IMM, can use rimm generate data given set parameters. example use functions. ploting histogram randomly generated data IMM setsize four, overlaying probability density function model:","code":"library(bmm) library(ggplot2)  resp <- rimm(   n = 1000,   mu = c(0, -1.5, 2.5, 1),   dist = c(0, 2, 0.3, 1),   c = 1.5, a = 0.3, b = 0, s = 2, kappa = 10 )  hist(resp, freq = FALSE, breaks = 60) curve(   dimm(x,     mu = c(0, -1.5, 2.5, 1),      dist = c(0, 2, 0.3, 1),      c = 1.5, a = 0.3, b = 0, s = 2, kappa = 10   ),   from = -pi, to = pi, add = TRUE )"},{"path":"https://venpopov.github.io/bmm/dev/index.html","id":"the-general-structure-of-the-bmm-package","dir":"","previous_headings":"","what":"The general structure of the bmm package","title":"Easy and Accessible Bayesian Measurement Models Using brms","text":"main building block bmm package cognitive measurement models can often specified distributional models distributional parameters generalized linear mixed model function cognitive measurement model parameters. functions translate cognitive measurement model parameters distributional parameters implement bmm package.  function can become complicated implementation changes differences experimental designs, bmm package provides general translation functions eases use cognitive measurement models end users. way researchers face challenges writing STAN code implement models can still use models almost experimental design. hood, main bmm() function call appropriate functions specified model perform several steps: Configure Sample (e.g., set prallelization) model installed required arguments provided valid formula passed data contains necessary variables Configure called model (including specifying priors necessary) Calling brms passing specified arguments Posprocessing output passing user process illustrated Figure :","code":""},{"path":"https://venpopov.github.io/bmm/dev/index.html","id":"contributing-to-the-bmm-package","dir":"","previous_headings":"","what":"Contributing to the bmm package","title":"Easy and Accessible Bayesian Measurement Models Using brms","text":"interested contributing model bmm package, first look Developer Notes well Contributor Guidelines. give depth description package architecture, steps necessary add model package, contributions acknowledged.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMMdist.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution functions for the Interference Measurement Model (IMM) — IMMdist","title":"Distribution functions for the Interference Measurement Model (IMM) — IMMdist","text":"Density, distribution, random generation functions interference measurement model location mu, strength cue- dependent activation c, strength cue-independent activation , generalization gradient s, precision memory representations kappa.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMMdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution functions for the Interference Measurement Model (IMM) — IMMdist","text":"","code":"dimm(   x,   mu = c(0, 2, -1.5),   dist = c(0, 0.5, 2),   c = 5,   a = 2,   b = 1,   s = 2,   kappa = 5,   log = FALSE )  pimm(   q,   mu = c(0, 2, -1.5),   dist = c(0, 0.5, 2),   c = 1,   a = 0.2,   b = 0,   s = 2,   kappa = 5 )  qimm(   p,   mu = c(0, 2, -1.5),   dist = c(0, 0.5, 2),   c = 1,   a = 0.2,   b = 0,   s = 2,   kappa = 5 )  rimm(   n,   mu = c(0, 2, -1.5),   dist = c(0, 0.5, 2),   c = 1,   a = 0.2,   b = 1,   s = 2,   kappa = 5 )"},{"path":"https://venpopov.github.io/bmm/dev/reference/IMMdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution functions for the Interference Measurement Model (IMM) — IMMdist","text":"x Vector observed responses mu Vector locations dist Vector distances item locations cued location c Vector strengths cue-dependent activation Vector strengths cue-independent activation b Vector baseline activation s Vector generalization gradients kappa Vector precision values log Logical; TRUE, values returned log scale. q Vector quantiles p Vector probability n Number observations generate data ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMMdist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution functions for the Interference Measurement Model (IMM) — IMMdist","text":"dimm gives density interference measurement model, pimm gives cumulative distribution function interference measurement model, qimm gives quantile function interference measurement model, rimm gives random generation function interference measurement model.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMMdist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Distribution functions for the Interference Measurement Model (IMM) — IMMdist","text":"Oberauer, K., Stoneking, C., Wabersich, D., & Lin, H.-Y. (2017). Hierarchical Bayesian measurement models continuous reproduction visual features working memory. Journal Vision, 17(5), 11.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMMdist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution functions for the Interference Measurement Model (IMM) — IMMdist","text":"","code":"# generate random samples from the imm and overlay the density r <- rimm(10000,   mu = c(0, 2, -1.5), dist = c(0, 0.5, 2),   c = 5, a = 2, s = 2, b = 1, kappa = 4 ) x <- seq(-pi, pi, length.out = 10000) d <- dimm(x,   mu = c(0, 2, -1.5), dist = c(0, 0.5, 2),   c = 5, a = 2, s = 2, b = 1, kappa = 4 ) hist(r, breaks = 60, freq = FALSE) lines(x, d, type = \"l\", col = \"red\")"},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution functions for the Signal Discrimination Model (SDM) — SDMdist","title":"Distribution functions for the Signal Discrimination Model (SDM) — SDMdist","text":"Density, distribution function, random generation Signal Discrimination Model (SDM) Distribution location mu, memory strength c, precision kappa. Currently single activation source supported.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution functions for the Signal Discrimination Model (SDM) — SDMdist","text":"","code":"dsdm(x, mu = 0, c = 3, kappa = 3.5, log = FALSE, parametrization = \"sqrtexp\")  psdm(   q,   mu = 0,   c = 3,   kappa = 3.5,   lower.tail = TRUE,   log.p = FALSE,   lower.bound = -pi,   parametrization = \"sqrtexp\" )  qsdm(p, mu = 0, c = 3, kappa = 3.5, parametrization = \"sqrtexp\")  rsdm(n, mu = 0, c = 3, kappa = 3.5, parametrization = \"sqrtexp\")"},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution functions for the Signal Discrimination Model (SDM) — SDMdist","text":"x Vector quantiles mu Vector location values radians c Vector memory strength values kappa Vector precision values log Logical; TRUE, values returned log scale. parametrization Character; either \"bessel\" \"sqrtexp\" (default). See online article details parameterization. q Vector quantiles lower.tail Logical; TRUE (default), return P(X <= x). Else, return P(X > x) log.p Logical; TRUE, probabilities returned log scale. lower.bound Numeric; Lower bound integration cumulative distribution p Vector probabilities n Number observations sample","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution functions for the Signal Discrimination Model (SDM) — SDMdist","text":"dsdm gives density, psdm gives distribution function, qsdm gives quantile function, rsdm generates random deviates, .dsdm_integrate helper function calculating density SDM distribution.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distribution functions for the Signal Discrimination Model (SDM) — SDMdist","text":"Parametrization See online article details parameterization. Oberauer (2023) introduced SDM bessel parametrization. sqrtexp parametrization default bmm package numerical stability efficiency. two parametrizations related functions c_bessel2sqrtexp() c_sqrtexp2bessel(). cumulative distribution function Since responses circle, cumulative distribution function requires choose lower bound integration. default \\(-\\pi\\), brms::pvon_mises() function can choose value argument lower_bound psdm. Another useful choice mean response distribution minus \\(\\pi\\), e.g. lower_bound = mu-pi. default circular::pvonmises(), ensures 50% cumulative probability mass mean response distribution.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Distribution functions for the Signal Discrimination Model (SDM) — SDMdist","text":"Oberauer, K. (2023). Measurement models visual working memory - factorial model comparison. Psychological Review, 130(3), 841–852","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution functions for the Signal Discrimination Model (SDM) — SDMdist","text":"","code":"# plot the density of the SDM distribution x <- seq(-pi, pi, length.out = 10000) plot(x, dsdm(x, 0, 2, 3),   type = \"l\", xlim = c(-pi, pi), ylim = c(0, 1),   xlab = \"Angle error (radians)\",   ylab = \"density\",   main = \"SDM density\" ) lines(x, dsdm(x, 0, 9, 1), col = \"red\") lines(x, dsdm(x, 0, 2, 8), col = \"green\") legend(\"topright\", c(   \"c=2, kappa=3.0, mu=0\",   \"c=9, kappa=1.0, mu=0\",   \"c=2, kappa=8, mu=1\" ), col = c(\"black\", \"red\", \"green\"), lty = 1, cex = 0.8 )   # plot the cumulative distribution function of the SDM distribution p <- psdm(x, mu = 0, c = 3.1, kappa = 5) plot(x, p, type = \"l\")   # generate random deviates from the SDM distribution and overlay the density r <- rsdm(10000, mu = 0, c = 3.1, kappa = 5) d <- dsdm(x, mu = 0, c = 3.1, kappa = 5) hist(r, breaks = 60, freq = FALSE) lines(x, d, type = \"l\", col = \"red\")"},{"path":"https://venpopov.github.io/bmm/dev/reference/apply_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply link functions for parameters in a formula or bmmformula — apply_links","title":"Apply link functions for parameters in a formula or bmmformula — apply_links","text":"function applies specified link functions list links formula bmmformula passed . function mostly used internally configuring bmmodels.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/apply_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply link functions for parameters in a formula or bmmformula — apply_links","text":"","code":"apply_links(formula, links = nlist())"},{"path":"https://venpopov.github.io/bmm/dev/reference/apply_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply link functions for parameters in a formula or bmmformula — apply_links","text":"formula formula bmmformula links applied links list links applied formula. element list named using parameter labels links applied contain character variable specifying link applied. Currently implemented links : \"log\", \"logit\", \"probit\", \"identity\".","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/apply_links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply link functions for parameters in a formula or bmmformula — apply_links","text":"formula bmmformula links applied ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/apply_links.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply link functions for parameters in a formula or bmmformula — apply_links","text":"","code":"# specify a bmmformula form <- bmf(x ~ a + c, kappa ~ 1, a ~ 1, c ~ 1) links <- list(a = \"log\", c = \"logit\")  apply_links(form, links) #> x ~ exp(a) + inv_logit(c) #> kappa ~ 1 #> a ~ 1 #> c ~ 1"},{"path":"https://venpopov.github.io/bmm/dev/reference/bmf2bf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert bmmformula objects to brmsformula objects — bmf2bf","title":"Convert bmmformula objects to brmsformula objects — bmf2bf","text":"Called configure_model() inside bmm() convert bmmformula brmsformula based information model object. call appropriate bmf2bf.\\* methods based classes defined model_\\* function.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmf2bf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert bmmformula objects to brmsformula objects — bmf2bf","text":"","code":"bmf2bf(model, formula)"},{"path":"https://venpopov.github.io/bmm/dev/reference/bmf2bf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert bmmformula objects to brmsformula objects — bmf2bf","text":"model model object defining one supported `bmmodels“ formula bmmformula converted brmsformula","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmf2bf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert bmmformula objects to brmsformula objects — bmf2bf","text":"brmsformula defining response variables additional parameter formulas specified bmmodel","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmf2bf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert bmmformula objects to brmsformula objects — bmf2bf","text":"","code":"model <- mixture2p(resp_error = \"error\")  formula <- bmmformula(   thetat ~ 0 + set_size + (0 + set_size | id),   kappa ~ 1 + (1 | id) )  brms_formula <- bmf2bf(model, formula)"},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Easy and Accesible Bayesian Measurement Models Using 'brms' — bmm-package","title":"Easy and Accesible Bayesian Measurement Models Using 'brms' — bmm-package","text":"Fit computational measurement models using full Bayesian inference. package provides simple accessible interface translating complex domain-specific models 'brms' syntax, powerful flexible framework fitting Bayesian regression models using 'Stan'. package designed users can easily apply state---art models various research fields, researchers can use new model development framework. References: Frischkorn Popov (2023) doi:10.31234/osf.io/umt57 .","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Easy and Accesible Bayesian Measurement Models Using 'brms' — bmm-package","text":"Maintainer: Vencislav Popov vencislav.popov@gmail.com (ORCID) [copyright holder] Authors: Gidon T. Frischkorn gidon.frischkorn@psychologie.uzh.ch (ORCID) [copyright holder] contributors: Chenyu Li [contributor] Paul-Christian Bürkner paul.buerkner@gmail.com (Creator 'brms', code portions used 'bmm'.) [copyright holder]","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Bayesian Measurement Models — bmm","title":"Fit Bayesian Measurement Models — bmm","text":"Fit Bayesian measurement model using brms backend interface Stan.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Bayesian Measurement Models — bmm","text":"","code":"bmm(   formula,   data,   model,   prior = NULL,   sort_data = getOption(\"bmm.sort_data\", \"check\"),   silent = getOption(\"bmm.silent\", 1),   backend = getOption(\"brms.backend\", NULL),   file = NULL,   file_compress = TRUE,   file_refit = getOption(\"bmm.file_refit\", FALSE),   ... )  fit_model(   formula,   data,   model,   prior = NULL,   sort_data = getOption(\"bmm.sort_data\", \"check\"),   silent = getOption(\"bmm.silent\", 1),   backend = getOption(\"brms.backend\", NULL),   ... )"},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Bayesian Measurement Models — bmm","text":"formula object class bmmformula. symbolic description model fitted. data object class data.frame, containing data variables used model. names variables must match variable names passed bmmodel object required argurments. model description model fitted. call bmmodel mixture3p() function. Every model function number required arguments need specified within function call. Call supported_models() see list supported models required arguments prior One brmsprior objects created brms::set_prior() related functions combined using c method + operator. See also default_prior() help. necessary default model fitting, can provide prior constraints model parameters sort_data Logical. TRUE, data sorted predictor variables faster sampling. FALSE, data sorted, sampling slower. \"check\" (default), bmm() check data sorted, ask via console prompt sorted. can set default value option using global options(bmm.sort_data = TRUE/FALSE/\"check\")) via bmm_options(sort_data) silent Verbosity level 0 2. 1 (default), informational messages compiler sampler suppressed. 2, even messages suppressed. actual sampling progress still printed. Set refresh = 0 turn well. using backend = \"rstan\" can also set open_progress = FALSE prevent opening additional progress bars. backend Character. backend use fitting model. Can \"rstan\" \"cmdstanr\". NULL (default), \"cmdstanr\" used cmdstanr package installed, otherwise \"rstan\" used. can set default backend using global options(brms.backend = \"rstan\"/\"cmdstanr\") file Either NULL character string. string, fitted model object saved via saveRDS file named string. .rds extension added automatically. file already exists, bmm load return saved model object. Unless specify file_refit argument well, existing files overwritten, manually remove file order refit save model existing file name. file name stored bmmfit object later usage. directory file exist, created. file_compress Logical character string, specifying one compression algorithms supported saveRDS saving fitted model object. file_refit Logical character string. Modifies fit stored via file argument re-used. Can set globally current R session via \"bmm.file_refit\" option (see options). TRUE \"always\", model fitted . FALSE \"never\" (default), model saved name specified file re-used. Note unlike brms, \"on_change\" option ... arguments passed brms::brm() Stan. See description brms::brm() details","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Bayesian Measurement Models — bmm","text":"object class brmsfit contains posterior draws along many useful information model. Use methods(class = \"brmsfit\") overview available methods.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm.html","id":"supported-models","dir":"Reference","previous_headings":"","what":"Supported Models","title":"Fit Bayesian Measurement Models — bmm","text":"following models supported: imm(resp_error, nt_features, nt_distances, set_size, regex, version) m3(resp_cats, num_options, choice_rule, version) mixture2p(resp_error) mixture3p(resp_error, nt_features, set_size, regex) sdm(resp_error, version) Type  ?modelname  get information specific model, e.g.  ?imm","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm.html","id":"bmmformula-syntax","dir":"Reference","previous_headings":"","what":"bmmformula syntax","title":"Fit Bayesian Measurement Models — bmm","text":"see online article detailed description syntax differs syntax brmsformula","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm.html","id":"default-priors-stan-code-and-stan-data","dir":"Reference","previous_headings":"","what":"Default priors, Stan code and Stan data","title":"Fit Bayesian Measurement Models — bmm","text":"information default priors bmm extract Stan code data generated bmm #'   brms, see online article.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm.html","id":"miscellaneous","dir":"Reference","previous_headings":"","what":"Miscellaneous","title":"Fit Bayesian Measurement Models — bmm","text":"Type help(package=bmm) full list available help topics. fit_model() deprecated alias bmm().","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit Bayesian Measurement Models — bmm","text":"Frischkorn, G. T., & Popov, V. (2023). tutorial estimating mixture models visual working memory tasks brms: Introducing Bayesian Measurement Modeling  (bmm) package R. https://doi.org/10.31234/osf.io/umt57","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Bayesian Measurement Models — bmm","text":"","code":"if (FALSE) { # isTRUE(Sys.getenv(\"BMM_EXAMPLES\")) # generate artificial data from the Signal Discrimination Model dat <- data.frame(y = rsdm(2000))  # define formula ff <- bmmformula(c ~ 1, kappa ~ 1)  # fit the model fit <- bmm(   formula = ff,   data = dat,   model = sdm(resp_error = \"y\"),   cores = 4,   backend = \"cmdstanr\" ) }"},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm_options.html","id":null,"dir":"Reference","previous_headings":"","what":"View or change global bmm options — bmm_options","title":"View or change global bmm options — bmm_options","text":"View change global bmm options","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View or change global bmm options — bmm_options","text":"","code":"bmm_options(   sort_data,   parallel,   default_priors,   silent,   color_summary,   file_refit,   reset_options = FALSE )"},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View or change global bmm options — bmm_options","text":"sort_data logical. TRUE, data sorted predictors. FALSE, data sorted, sampling slower. \"check\" (default), bmm() check data sorted, ask via console prompt sorted. Default: \"check\" parallel logical. TRUE, chains run parallel. FALSE, chains run sequentially. can also set value model separately via argument parallel bmm(). Default: FALSE default_priors logical. TRUE (default), default bmm priors used. FALSE, basic brms priors used. Default: TRUE silent numeric. Verbosity level 0 2. 1 ( default), informational messages compiler sampler suppressed. 2, even messages suppressed. actual sampling progress still printed. Default: 1 color_summary logical. TRUE, summary model printed color. Default: TRUE file_refit logical. TRUE, bmm() refit model even file argument specified. Default: FALSE reset_options logical. TRUE, options reset default values Default: FALSE","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View or change global bmm options — bmm_options","text":"message current bmm options values, invisibly returns old options use .exit() friends.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"View or change global bmm options — bmm_options","text":"bmm_options function used view change current bmm options. arguments provided, function return current options. arguments provided, function change options return old options invisibly. provide arguments, options changed. options stored global options list used bmm() functions bmm package. options can also set manually using built-options() function, setting bmm.sort_data,  bmm.default_priors, bmm.silent options.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View or change global bmm options — bmm_options","text":"","code":"# view the current options bmm_options() #> Current bmm options: #>   sort_data = check #>   parallel = FALSE #>   default_priors = TRUE #>   silent = 1 #>   file_refit = FALSE #>   color_summary = TRUE #> For more information on these options or how to change them, see help(bmm_options).  # change the options to always sort the data and to use parallel sampling bmm_options(sort_data = TRUE, parallel = TRUE) #> Current bmm options: #>   sort_data = TRUE #>   parallel = TRUE #>   default_priors = TRUE #>   silent = 1 #>   file_refit = FALSE #>   color_summary = TRUE #> For more information on these options or how to change them, see help(bmm_options).  # restore the default options bmm_options(reset_options = TRUE) #> Current bmm options: #>   sort_data = check #>   parallel = FALSE #>   default_priors = TRUE #>   silent = 1 #>   file_refit = FALSE #>   color_summary = TRUE #> For more information on these options or how to change them, see help(bmm_options).  # you can change the options using the options() function as well options(bmm.sort_data = TRUE, bmm.parallel = TRUE) bmm_options() #> Current bmm options: #>   sort_data = TRUE #>   parallel = TRUE #>   default_priors = TRUE #>   silent = 1 #>   file_refit = FALSE #>   color_summary = TRUE #> For more information on these options or how to change them, see help(bmm_options).  # reset the options to their default values bmm_options(reset_options = TRUE) #> Current bmm options: #>   sort_data = check #>   parallel = FALSE #>   default_priors = TRUE #>   silent = 1 #>   file_refit = FALSE #>   color_summary = TRUE #> For more information on these options or how to change them, see help(bmm_options).  # bmm_options(sort_data = TRUE, parallel = TRUE) will also return the old options # so you can use it with on.exit() old_op <- bmm_options(sort_data = TRUE, parallel = TRUE) #> Current bmm options: #>   sort_data = TRUE #>   parallel = TRUE #>   default_priors = TRUE #>   silent = 1 #>   file_refit = FALSE #>   color_summary = TRUE #> For more information on these options or how to change them, see help(bmm_options). on.exit(bmm_options(old_op)) #> Error in !missing(sort_data) && sort_data != \"check\": 'length = 2' in coercion to 'logical(1)'  bmm_options(reset_options = TRUE) #> Current bmm options: #>   sort_data = check #>   parallel = FALSE #>   default_priors = TRUE #>   silent = 1 #>   file_refit = FALSE #>   color_summary = TRUE #> For more information on these options or how to change them, see help(bmm_options)."},{"path":"https://venpopov.github.io/bmm/dev/reference/bmmformula.html","id":null,"dir":"Reference","previous_headings":"","what":"Create formula for predicting parameters of a bmmodel — bmmformula","title":"Create formula for predicting parameters of a bmmodel — bmmformula","text":"function used specify formulas predicting different parameters bmmodel.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmmformula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create formula for predicting parameters of a bmmodel — bmmformula","text":"","code":"bmmformula(...)  bmf(...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/bmmformula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create formula for predicting parameters of a bmmodel — bmmformula","text":"... Formulas predicting bmmodel parameter. formula parameter specified separate argument, separated commas","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmmformula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create formula for predicting parameters of a bmmodel — bmmformula","text":"list formulas parameters predicted","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmmformula.html","id":"general-formula-structure","dir":"Reference","previous_headings":"","what":"General formula structure","title":"Create formula for predicting parameters of a bmmodel — bmmformula","text":"formula argument accepts formulas following syntax:   bmm formulas built brms formulas function nearly way, can use brms formula syntax. main differences bmm formulas, response variable specified formula. Instead, parameter model explicitly specified left-hand side formula. brms, response variable always specified left-hand side first formula, implicitly means predictors first formula predictors mu parameter model. general, measurement models mu parameter, therefore straigthforward explicitely predict parameter model. example, following brms formula drift diffusion model, first line corresponds drift rate parameter, explicitely stated.   bmm, formula written :   rt response variables specified model argument bmm() function. Aside , bmm formula syntax brms formula syntax. information brms formula syntax, see brms::brmsformula(). can also use bmf() function shorthand bmmformula(). can also set parameters constant value using par = value syntax:   case bias parameter estimated fixed 0.5","code":"parameter ~ fixed_effects + (random_effects | grouping_variable) brmsformula(rt | dec(response) ~ condition + (condition | id),                   bs ~ 1 + (1 | id),                   ndt ~ 1 + (1 | id),                   bias ~ 1 + (1 | id)) bmmformula(drift ~ condition + (condition | id),                  bs ~ 1 + (1 | id),                  ndt ~ 1 + (1 | id),                  bias ~ 1 + (1 | id)) bmf(drift ~ condition + (condition | id),           bs ~ 1 + (1 | id),           ndt ~ 1 + (1 | id),           bias = 0.5)"},{"path":"https://venpopov.github.io/bmm/dev/reference/bmmformula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create formula for predicting parameters of a bmmodel — bmmformula","text":"","code":"imm_formula <- bmmformula(   c ~ 0 + set_size + (0 + set_size | id),   a ~ 1,   kappa ~ 0 + set_size + (0 + set_size | id) )  # or use the shorter alias 'bmf' imm_formula2 <- bmf(   c ~ 0 + set_size + (0 + set_size | id),   a ~ 1,   kappa ~ 0 + set_size + (0 + set_size | id) ) identical(imm_formula, imm_formula2) #> [1] TRUE"},{"path":"https://venpopov.github.io/bmm/dev/reference/c_parametrizations.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between parametrizations of the c parameter of the SDM distribution — c_parametrizations","title":"Convert between parametrizations of the c parameter of the SDM distribution — c_parametrizations","text":"Convert parametrizations c parameter SDM distribution","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/c_parametrizations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between parametrizations of the c parameter of the SDM distribution — c_parametrizations","text":"","code":"c_sqrtexp2bessel(c, kappa)  c_bessel2sqrtexp(c, kappa)"},{"path":"https://venpopov.github.io/bmm/dev/reference/c_parametrizations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between parametrizations of the c parameter of the SDM distribution — c_parametrizations","text":"c Vector memory strength values kappa Vector precision values","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/c_parametrizations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between parametrizations of the c parameter of the SDM distribution — c_parametrizations","text":"numeric vector length c kappa.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/c_parametrizations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert between parametrizations of the c parameter of the SDM distribution — c_parametrizations","text":"c_bessel2sqrtexp converts memory strength parameter (c) bessel parametrization sqrtexp parametrization, c_sqrtexp2bessel converts sqrtexp parametrization bessel parametrization. See online article details parameterization. sqrtexp parametrization default bmm package.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/c_parametrizations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert between parametrizations of the c parameter of the SDM distribution — c_parametrizations","text":"","code":"c_bessel <- c_sqrtexp2bessel(c = 4, kappa = 3) c_sqrtexp <- c_bessel2sqrtexp(c = c_bessel, kappa = 3)"},{"path":"https://venpopov.github.io/bmm/dev/reference/calc_error_relative_to_nontargets.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate response error relative to non-target values — calc_error_relative_to_nontargets","title":"Calculate response error relative to non-target values — calc_error_relative_to_nontargets","text":"Given vector responses, values non-targets, function computes error relative non-targets.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/calc_error_relative_to_nontargets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate response error relative to non-target values — calc_error_relative_to_nontargets","text":"","code":"calc_error_relative_to_nontargets(data, response, nt_features)"},{"path":"https://venpopov.github.io/bmm/dev/reference/calc_error_relative_to_nontargets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate response error relative to non-target values — calc_error_relative_to_nontargets","text":"data data.frame object row single observation response Character. name column data contains response nt_features Character vector. names columns data contain values non-targets","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/calc_error_relative_to_nontargets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate response error relative to non-target values — calc_error_relative_to_nontargets","text":"data.frame n*m rows, n number rows data m number non-target variables. preserves columns data, except non-target locations, adds column y_nt, contains transformed response error relative non-targets","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/calc_error_relative_to_nontargets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate response error relative to non-target values — calc_error_relative_to_nontargets","text":"","code":"data <- oberauer_lin_2017 data <- calc_error_relative_to_nontargets(data, \"dev_rad\", paste0(\"col_nt\", 1:7)) hist(data$y_nt, breaks = 100)"},{"path":"https://venpopov.github.io/bmm/dev/reference/check_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic S3 method for checking data based on model type — check_data","title":"Generic S3 method for checking data based on model type — check_data","text":"Called bmm() automatically perform checks data depending model type. call appropriate check_data methods based list classes defined .model_* functions. models several classes listed, call functions order listed. Thus, operations common group models defined appropriate check_data.* function, \\* corresponds shared class. example, .model_imm_abc model, corresponds following order check_data.* functions: check_data() -> check_data.circular(), check_data.non_targets() output final function returned bmm().","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic S3 method for checking data based on model type — check_data","text":"","code":"check_data(model, data, formula)"},{"path":"https://venpopov.github.io/bmm/dev/reference/check_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic S3 method for checking data based on model type — check_data","text":"model model list object returned check_model() data user supplied data.frame containing data checked formula user supplied formula","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic S3 method for checking data based on model type — check_data","text":"data.frame number rows input data, additional columns added necessary, necessary transformations applied, attributes added data.frame later use. need reuse variables created check_data.* functions subsequent stages (e.g. configure_model()), can store access using attr() function.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic S3 method for checking data based on model type — check_data","text":"","code":"data <- oberauer_lin_2017 model <- sdmSimple(resp_error = \"dev_rad\") #> Warning: The function `sdmSimple()` is deprecated. Please use `sdm()` instead. formula <- bmf(c ~ 1, kappa ~ 1) checked_data <- check_data(model, data, formula)"},{"path":"https://venpopov.github.io/bmm/dev/reference/check_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic S3 method for checking if the formula is valid for the specified model — check_formula","title":"Generic S3 method for checking if the formula is valid for the specified model — check_formula","text":"Generic S3 method checking formula valid specified model","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic S3 method for checking if the formula is valid for the specified model — check_formula","text":"","code":"check_formula(model, data, formula)"},{"path":"https://venpopov.github.io/bmm/dev/reference/check_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic S3 method for checking if the formula is valid for the specified model — check_formula","text":"model model list object returned check_model() data user supplied data formula user supplied formula","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic S3 method for checking if the formula is valid for the specified model — check_formula","text":"formula object","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic S3 method for checking if the model is supported and model preprocessing — check_model","title":"Generic S3 method for checking if the model is supported and model preprocessing — check_model","text":"addition validating model, specific methods might add information model object based provided data formula","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic S3 method for checking if the model is supported and model preprocessing — check_model","text":"","code":"check_model(model, data = NULL, formula = NULL)"},{"path":"https://venpopov.github.io/bmm/dev/reference/check_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic S3 method for checking if the model is supported and model preprocessing — check_model","text":"model model argument supplied user data data argument supplied user formula formula argument supplied user","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic S3 method for checking if the model is supported and model preprocessing — check_model","text":"object type 'bmmodel'","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/circle_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert degrees to radians or radians to degrees. — circle_transform","title":"Convert degrees to radians or radians to degrees. — circle_transform","text":"helper functions deg2rad rad2deg add convenience transforming data degrees radians radians degrees.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/circle_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert degrees to radians or radians to degrees. — circle_transform","text":"","code":"deg2rad(deg)  rad2deg(rad)"},{"path":"https://venpopov.github.io/bmm/dev/reference/circle_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert degrees to radians or radians to degrees. — circle_transform","text":"deg numeric vector values degrees. rad numeric vector values radians.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/circle_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert degrees to radians or radians to degrees. — circle_transform","text":"numeric vector length deg rad.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/circle_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert degrees to radians or radians to degrees. — circle_transform","text":"","code":"degrees <- runif(100, min = 0, max = 360) radians <- deg2rad(degrees) degrees_again <- rad2deg(radians)"},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic S3 method for configuring the model to be fit by brms — configure_model","title":"Generic S3 method for configuring the model to be fit by brms — configure_model","text":"Called bmm() automatically construct model formula, family objects default priors model specified user. call appropriate configure_model.* functions based list classes defined .model_* functions. Currently, method last class listed .model_* functions. keep model configuration simple possible. future may add shared methods classes models share configuration.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic S3 method for configuring the model to be fit by brms — configure_model","text":"","code":"configure_model(model, data, formula)"},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic S3 method for configuring the model to be fit by brms — configure_model","text":"model model list object returned check_model() data user supplied data.frame containing data checked formula user supplied formula","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic S3 method for configuring the model to be fit by brms — configure_model","text":"named list containing minimum following elements: formula: object class brmsformula. constructed model formula data: user supplied data.frame, preprocessed check_data family: brms family object prior: brms prior object stanvars: (optional) object class stanvars (custom families). See brms::custom_family() details.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic S3 method for configuring the model to be fit by brms — configure_model","text":"bare bones configure_model.* method look like :","code":"configure_model.newmodel <- function(model, data, formula) {     # preprocessing - e.g. extract arguments from data check, construct new variables    <preprocessing code>     # construct the formula    formula <- bmf2bf(formula, model)     # construct the family    family <- <code for new family>     # construct the default prior    prior <- <code for new prior>     # return the list    nlist(formula, data, family, prior) }"},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic S3 method for configuring the model to be fit by brms — configure_model","text":"","code":"if (FALSE) { # isTRUE(Sys.getenv(\"BMM_EXAMPLES\")) configure_model.mixture3p <- function(model, data, formula) {   # retrieve arguments from the data check   max_set_size <- attr(data, \"max_set_size\")   lure_idx <- attr(data, \"lure_idx_vars\")   nt_features <- model$other_vars$nt_features   set_size_var <- model$other_vars$set_size    # construct initial brms formula   formula <- bmf2bf(model, formula) +     brms::lf(kappa2 ~ 1) +     brms::lf(mu2 ~ 1) +     brms::nlf(theta1 ~ thetat) +     brms::nlf(kappa1 ~ kappa)    # additional internal terms for the mixture model formula   kappa_nts <- paste0(\"kappa\", 3:(max_set_size + 1))   theta_nts <- paste0(\"theta\", 3:(max_set_size + 1))   mu_nts <- paste0(\"mu\", 3:(max_set_size + 1))    for (i in 1:(max_set_size - 1)) {     formula <- formula +       glue_nlf(\"{kappa_nts[i]} ~ kappa\") +       glue_nlf(         \"{theta_nts[i]} ~ {lure_idx[i]} * (thetant + log(inv_ss)) + \",         \"(1 - {lure_idx[i]}) * (-100)\"       ) +       glue_nlf(\"{mu_nts[i]} ~ {nt_features[i]}\")   }    # define mixture family   vm_list <- lapply(1:(max_set_size + 1), function(x) brms::von_mises(link = \"identity\"))   vm_list$order <- \"none\"   formula$family <- brms::do_call(brms::mixture, vm_list)    nlist(formula, data) } }"},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic S3 method for configuring the default prior for a bmmodel — configure_prior","title":"Generic S3 method for configuring the default prior for a bmmodel — configure_prior","text":"Called bmm() automatically construct priors given model, data formula, combine prior given user. first method executed configure_prior.bmmodel, build prior based information model object fixed_parameters, default_priors, etc. Thus important define values model object. function also recognize user specified parameters fixed constant put appropriate constant priors. additional priors developer wants specify, based information model object, can defined configure_prior.* method model. See configure_prior.imm_full example.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic S3 method for configuring the default prior for a bmmodel — configure_prior","text":"","code":"configure_prior(model, data, formula, user_prior, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic S3 method for configuring the default prior for a bmmodel — configure_prior","text":"model bmmodel object data data.frame containing data used model formula brmsformula object returned configure_model() user_prior brmsprior object given user argument bmm() ... Additional arguments passed method","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic S3 method for configuring the default prior for a bmmodel — configure_prior","text":"brmsprior object containing default priors model","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic S3 method for configuring the default prior for a bmmodel — configure_prior","text":"","code":"if (FALSE) { # isTRUE(Sys.getenv(\"BMM_EXAMPLES\")) configure_prior.mixture3p <- function(model, data, formula, user_prior, ...) {   # if there is set_size 1 in the data, set constant prior over thetant for set_size1   prior <- brms::empty_prior()   set_size_var <- model$other_vars$set_size   prior_cond <- any(data$ss_numeric == 1) && !is.numeric(data[[set_size_var]])    thetant_preds <- rhs_vars(formula$pforms$thetant)   if (prior_cond && set_size_var %in% thetant_preds) {     prior <- prior + brms::prior_(\"constant(-100)\",       class = \"b\",       coef = paste0(set_size_var, 1),       nlpar = \"thetant\"     )   }   # check if there is a random effect on theetant that include set_size as predictor   bterms <- brms::brmsterms(formula$pforms$thetant)   re_terms <- bterms$dpars$mu$re   if (!is.null(re_terms)) {     for (i in 1:nrow(re_terms)) {       group <- re_terms$group[[i]]       form <- re_terms$form[[i]]       thetant_preds <- rhs_vars(form)        if (prior_cond && set_size_var %in% thetant_preds) {         prior <- prior + brms::prior_(\"constant(1e-8)\",           class = \"sd\",           coef = paste0(set_size_var, 1),           group = group,           nlpar = \"thetant\"         )       }     }   }    prior } }"},{"path":"https://venpopov.github.io/bmm/dev/reference/construct_m3_act_funs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Activation Functions for different M3 versions — construct_m3_act_funs","title":"Get Activation Functions for different M3 versions — construct_m3_act_funs","text":"function generates activation functions different versions Memory Measurement Model (m3) implemented bmm package. bmmodel object passed print available model versions.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/construct_m3_act_funs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Activation Functions for different M3 versions — construct_m3_act_funs","text":"","code":"construct_m3_act_funs(model = NULL, warnings = TRUE)"},{"path":"https://venpopov.github.io/bmm/dev/reference/construct_m3_act_funs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Activation Functions for different M3 versions — construct_m3_act_funs","text":"model bmmodel object specifies M3 model activation functions generated. model passed available M3 versions printed console. warnings Logical flag indicate information generated model formulas printed function called.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/construct_m3_act_funs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Activation Functions for different M3 versions — construct_m3_act_funs","text":"bmmformula object activation functions m3 version specified model object. activation functions use names response categories specified model object.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/construct_m3_act_funs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Activation Functions for different M3 versions — construct_m3_act_funs","text":"","code":"model <- m3(  resp_cats = c(\"correct\",\"other\", \"npl\"),  num_options = c(1, 4, 5),  version = \"ss\" )  construct_m3_act_funs(model, warnings = FALSE) #> correct ~ b + a + c #> other ~ b + a #> npl ~ b"},{"path":"https://venpopov.github.io/bmm/dev/reference/default_prior.bmmformula.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Default priors for Measurement Models specified in BMM — default_prior.bmmformula","title":"Get Default priors for Measurement Models specified in BMM — default_prior.bmmformula","text":"Obtain default priors Bayesian multilevel measurement model, well information parameters priors can specified. Given model, data formula model, function return default priors used estimate model. Additionally, return model parameters prior specified (flat priors). can help get idea priors need specified also know priors used user-specified priors passed bmm() function. default priors bmm tend informative default priors brms, use domain knowledge specify priors.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/default_prior.bmmformula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Default priors for Measurement Models specified in BMM — default_prior.bmmformula","text":"","code":"# S3 method for class 'bmmformula' default_prior(object, data, model, formula = object, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/default_prior.bmmformula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Default priors for Measurement Models specified in BMM — default_prior.bmmformula","text":"object bmmformula object data object class data.frame, containing data variables used model. names variables must match variable names passed bmmodel object required argurments. model description model fitted. call bmmodel mixture3p() function. Every model function number required arguments need specified within function call. Call supported_models() see list supported models required arguments formula object class bmmformula. symbolic description model fitted. ... arguments passed brms::default_prior()","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/default_prior.bmmformula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Default priors for Measurement Models specified in BMM — default_prior.bmmformula","text":"data.frame columns specifying prior, class, coef group priors specified. Separate rows contain information parameters (parameter classes) priors can specified.","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/default_prior.bmmformula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Default priors for Measurement Models specified in BMM — default_prior.bmmformula","text":"","code":"default_prior(bmf(c ~ 1, kappa ~ 1),   data = oberauer_lin_2017,   model = sdm(resp_error = \"dev_rad\") ) #>                     prior     class coef group resp  dpar nlpar   lb   ub #>     student_t(5, 2, 0.75) Intercept                     c       <NA> <NA> #>  student_t(5, 1.75, 0.75) Intercept                 kappa       <NA> <NA> #>               constant(0) Intercept                             <NA> <NA> #>  source #>    user #>    user #>    user"},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract information from a brmsfit object — fit_info","title":"Extract information from a brmsfit object — fit_info","text":"Extract information brmsfit object","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract information from a brmsfit object — fit_info","text":"","code":"fit_info(fit, what)"},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract information from a brmsfit object — fit_info","text":"fit brmsfit object, list brmsfit objects String. return: \"time\" sampling time per chain \"time_mean\" mean sampling time","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract information from a brmsfit object — fit_info","text":"Depends class fit. brmsfit objects, information single fit returned. brmsfit_list objects, list data.frame information fit returned. \"time\": data.frame sampling time per chain \"time_mean\": named numeric vector mean sampling time","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract information from a brmsfit object — fit_info","text":"","code":"if (FALSE) { # isTRUE(Sys.getenv(\"BMM_EXAMPLES\")) fit <- bmm(   formula = bmmformula(c ~ 1, kappa ~ 1),   data = data.frame(y = rsdm(1000)),   model = sdm(resp_error = \"y\") )  fit_info(fit, \"time\") }"},{"path":"https://venpopov.github.io/bmm/dev/reference/imm.html","id":null,"dir":"Reference","previous_headings":"","what":"Interference measurement model by Oberauer and Lin (2017). — imm","title":"Interference measurement model by Oberauer and Lin (2017). — imm","text":"Three versions Interference measurement model Oberauer Lin (2017). - full, bsc, abc. IMMfull(), IMMbsc(), IMMabc() deprecated removed future. Please use imm(version = 'full'), imm(version = 'bsc'), imm(version = 'abc') instead.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/imm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interference measurement model by Oberauer and Lin (2017). — imm","text":"","code":"imm(   resp_error,   nt_features,   nt_distances,   set_size,   regex = FALSE,   version = \"full\",   ... )  IMMfull(resp_error, nt_features, nt_distances, set_size, regex = FALSE, ...)  IMMbsc(resp_error, nt_features, nt_distances, set_size, regex = FALSE, ...)  IMMabc(resp_error, nt_features, set_size, regex = FALSE, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/imm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interference measurement model by Oberauer and Lin (2017). — imm","text":"resp_error name variable provided dataset containing response error. response Error code response relative --recalled target radians. can transform response error degrees radian using deg2rad function. nt_features character vector names non-target variables. non_target variables radians centered relative target. Alternatively, regex=TRUE, regular expression can used match non-target feature columns dataset. nt_distances vector names columns containing distances non-target items target item. Alternatively, regex=TRUE, regular expression can used match non-target distances columns dataset. necessary bsc full versions. set_size Name column containing set size variable (set_size varies) numeric value set_size, set_size fixed. regex Logical. TRUE, nt_features nt_distances arguments interpreted regular expression match non-target feature columns dataset. version Character. version IMM model use. Can one full, bsc, abc. default full. ... used internally testing, ignore ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/imm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interference measurement model by Oberauer and Lin (2017). — imm","text":"object class bmmodel","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/imm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interference measurement model by Oberauer and Lin (2017). — imm","text":"Domain: Visual working memory Task: Continuous reproduction Name: Interference measurement model Oberauer Lin (2017). Citation: Oberauer, K., & Lin, H.Y. (2017). interference model visual working memory. Psychological Review, 124(1), 21-59","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/imm.html","id":"version-full","dir":"Reference","previous_headings":"","what":"Version: full","title":"Interference measurement model by Oberauer and Lin (2017). — imm","text":"Requirements: response vairable radians represent angular error relative target non-target features radians centered relative target Parameters: mu1: Location parameter von Mises distribution memory responses (radians). Fixed internally 0 default. kappa: Concentration parameter von Mises distribution : General activation memory items c: Context activation s: Spatial similarity gradient Fixed parameters: mu1 = 0 mu2 = 0 kappa2 = -100 Default parameter links: mu1 = tan_half; kappa = log; = log; c = log; s = log Default priors: mu1: main: student_t(1, 0, 1) kappa: main: normal(2, 1) effects: normal(0, 1) : main: normal(0, 1) effects: normal(0, 1) c: main: normal(0, 1) effects: normal(0, 1) s: main: normal(0, 1) effects: normal(0, 1)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/imm.html","id":"version-bsc","dir":"Reference","previous_headings":"","what":"Version: bsc","title":"Interference measurement model by Oberauer and Lin (2017). — imm","text":"Requirements: response vairable radians represent angular error relative target non-target features radians centered relative target Parameters: mu1: Location parameter von Mises distribution memory responses (radians). Fixed internally 0 default. kappa: Concentration parameter von Mises distribution c: Context activation s: Spatial similarity gradient Fixed parameters: mu1 = 0 mu2 = 0 kappa2 = -100 Default parameter links: mu1 = tan_half; kappa = log; c = log; s = log Default priors: mu1: main: student_t(1, 0, 1) kappa: main: normal(2, 1) effects: normal(0, 1) c: main: normal(0, 1) effects: normal(0, 1) s: main: normal(0, 1) effects: normal(0, 1)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/imm.html","id":"version-abc","dir":"Reference","previous_headings":"","what":"Version: abc","title":"Interference measurement model by Oberauer and Lin (2017). — imm","text":"Requirements: response vairable radians represent angular error relative target non-target features radians centered relative target Parameters: mu1: Location parameter von Mises distribution memory responses (radians). Fixed internally 0 default. kappa: Concentration parameter von Mises distribution : General activation memory items c: Context activation Fixed parameters: mu1 = 0 mu2 = 0 kappa2 = -100 Default parameter links: mu1 = tan_half; kappa = log; = log; c = log Default priors: mu1: main: student_t(1, 0, 1) kappa: main: normal(2, 1) effects: normal(0, 1) : main: normal(0, 1) effects: normal(0, 1) c: main: normal(0, 1) effects: normal(0, 1) Additionally, imm models internal parameter fixed 0 allow model identifiable. parameter estimated included model formula. parameter : b = \"Background activation (internally fixed 0)\"","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/imm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interference measurement model by Oberauer and Lin (2017). — imm","text":"","code":"if (FALSE) { # isTRUE(Sys.getenv(\"BMM_EXAMPLES\")) # load data data <- oberauer_lin_2017  # define formula ff <- bmmformula(   kappa ~ 0 + set_size,   c ~ 0 + set_size,   a ~ 0 + set_size,   s ~ 0 + set_size )  # specify the full IMM model with explicit column names for non-target features and distances # by default this fits the full version of the model model1 <- imm(   resp_error = \"dev_rad\",   nt_features = paste0(\"col_nt\", 1:7),   nt_distances = paste0(\"dist_nt\", 1:7),   set_size = \"set_size\" )  # fit the model fit <- bmm(   formula = ff,   data = data,   model = model1,   cores = 4,   backend = \"cmdstanr\" )  # alternatively specify the IMM model with a regular expression to match non-target features # this is equivalent to the previous call, but more concise model2 <- imm(   resp_error = \"dev_rad\",   nt_features = \"col_nt\",   nt_distances = \"dist_nt\",   set_size = \"set_size\",   regex = TRUE )  # fit the model fit <- bmm(   formula = ff,   data = data,   model = model2,   cores = 4,   backend = \"cmdstanr\" )  # you can also specify the `bsc` or `abc` versions of the model to fit a reduced version model3 <- imm(   resp_error = \"dev_rad\",   nt_features = \"col_nt\",   set_size = \"set_size\",   regex = TRUE,   version = \"abc\" ) fit <- bmm(   formula = ff,   data = data,   model = model3,   cores = 4,   backend = \"cmdstanr\" ) }"},{"path":"https://venpopov.github.io/bmm/dev/reference/k2sd.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform kappa of the von Mises distribution to the circular standard deviation — k2sd","title":"Transform kappa of the von Mises distribution to the circular standard deviation — k2sd","text":"function transforms precision parameter kappa von Mises distribution circular standard deviation. Adapted Matlab code Paul Bays (https://www.paulbays.com/code.php)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/k2sd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform kappa of the von Mises distribution to the circular standard deviation — k2sd","text":"","code":"k2sd(K)"},{"path":"https://venpopov.github.io/bmm/dev/reference/k2sd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform kappa of the von Mises distribution to the circular standard deviation — k2sd","text":"K numeric. vector kappa values.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/k2sd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform kappa of the von Mises distribution to the circular standard deviation — k2sd","text":"vector sd values.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/k2sd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform kappa of the von Mises distribution to the circular standard deviation — k2sd","text":"","code":"kappas <- runif(1000, 0.01, 100)  # calcualte SD (in radians) SDs <- k2sd(kappas)  # transform SDs from radians to degrees SDs_degress <- SDs * 180 / pi  # plot the relationship between kappa and circular SD plot(kappas, SDs)  plot(kappas, SDs_degress)"},{"path":"https://venpopov.github.io/bmm/dev/reference/m3.html","id":null,"dir":"Reference","previous_headings":"","what":"The Multinomial / Memory Measurement Model — m3","title":"The Multinomial / Memory Measurement Model — m3","text":"Multinomial / Memory Measurement Model (M3) measurement model originally introduced working memory tasks categorical responses. assumes candidate response category activated combination sources activation. probability choosing response category determined activation candidates. model can used n-AFC categorical decision task.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/m3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Multinomial / Memory Measurement Model — m3","text":"","code":"m3(resp_cats, num_options, choice_rule = \"softmax\", version = \"custom\", ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/m3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Multinomial / Memory Measurement Model — m3","text":"resp_cats variable names contain number responses response categories used M3. num_options Either integer vector length resp_cats number candidates respective response categories constant across conditions experiment. vector specifying variable names contain number candidates response category. order variables order names response categories passed resp_cats choice_rule choice rule used M3. options \"softmax\" \"simple\". \"softmax\" option implements softmax normalization activation probabilities choosing different response categories. \"simple\" option implements simple normalization absolute activations sum activations. details differences choice rules please see appendix Oberauer & Lewandowsky (2019) \"Simple measurement models complex working memory tasks\" published Psychological Review. version Character. version M3 model use. Can one ss, cs, custom. default custom. ... used internally testing, ignore ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/m3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Multinomial / Memory Measurement Model — m3","text":"object class bmmodel","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/m3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Multinomial / Memory Measurement Model — m3","text":"Domain: Working Memory (categorical), Categorical Decision Making Task: n-AFC retrieval Name: Multinomial / Memory Measurement Model Citation: Oberauer, K., & Lewandowsky, S. (2019). Simple measurement models complex working-memory tasks. Psychological Review, 126.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/m3.html","id":"version-ss","dir":"Reference","previous_headings":"","what":"Version: ss","title":"The Multinomial / Memory Measurement Model — m3","text":"Requirements: Provide names variables specifying number responses set response categories. Specify activation sources response categories Include least activation source \"b\" response categories Predict specified activation least fixed intercept additional predictors data Parameters: b: Background activation. Added response category. Fixed scaling, necessary models. c: Context activation. Added item cued recalled, correct item. : General activation. Added items presented current trial. Fixed parameters: b = 0 Default parameter links: c = identity; = identity Default priors: : main: normal(2,1) effects: normal(0,0.5) c: main: normal(3,1) effects: normal(0,2)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/m3.html","id":"version-cs","dir":"Reference","previous_headings":"","what":"Version: cs","title":"The Multinomial / Memory Measurement Model — m3","text":"Requirements: Provide names variables specifying number responses set response categories. Specify activation sources response categories Include least activation source \"b\" response categories Predict specified activation least fixed intercept additional predictors data Parameters: b: Background activation. Added response category. Fixed scaling, necessary models. c: Context activation. Added item cued recalled, correct item. : General activation. Added items presented current trial. f: Filtering. parameter captures extent distractors remained working memory. Fixed parameters: b = 0 Default parameter links: c = identity; = identity; f = logit Default priors: : main: normal(3,1) effects: normal(0,0.5) c: main: normal(3,1) effects: normal(0,2) f: main: logistic(0,1) effects: normal(0,1)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/m3.html","id":"version-custom","dir":"Reference","previous_headings":"","what":"Version: custom","title":"The Multinomial / Memory Measurement Model — m3","text":"Requirements: Provide names variables specifying number responses set response categories. Specify activation sources response categories Include least activation source \"b\" response categories Predict specified activation least fixed intercept additional predictors data Parameters: b: Background activation. Added response category. Fixed scaling, necessary models. Fixed parameters: b = 0 Default parameter links: = Default priors:","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/m3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Multinomial / Memory Measurement Model — m3","text":"","code":"if (FALSE) { # isTRUE(Sys.getenv(\"BMM_EXAMPLES\")) data <- oberauer_lewandowsky_2019_e1  # initiate the model object m3_model <- m3(   resp_cats = c(\"corr\", \"other\", \"dist\", \"npl\"),   num_options = c(\"n_corr\", \"n_other\", \"n_dist\", \"n_npl\"),   choice_rule = \"simple\" )  # specify the model formula including the activation formulas for each response category m3_formula <- bmf(   corr ~ b + a + c,   other ~ b + a,   dist ~ b + d,   npl ~ b,   c ~ 1 + cond + (1 + cond | ID),   a ~ 1 + cond + (1 + cond | ID),   d ~ 1 + (1 | ID) )  # specify links for the model parameters m3_model$links <- list(   c = \"log\",   a = \"log\",   d = \"log\" )  # check if the default priors are applied correctly default_prior(m3_formula, data = data, model = m3_model)  # fit the model m3_fit <- bmm(   formula = m3_formula,   data = data,   model = m3_model,   cores = 4 )  # print summary of the model summary(m3_fit) }"},{"path":"https://venpopov.github.io/bmm/dev/reference/m3dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution functions for the Memory Measurement Model (M3) — m3dist","title":"Distribution functions for the Memory Measurement Model (M3) — m3dist","text":"Density random generation functions memory measurement model. Please note functions currently vectorized.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/m3dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution functions for the Memory Measurement Model (M3) — m3dist","text":"","code":"dm3(   x,   pars,   m3_model,   act_funs = construct_m3_act_funs(m3_model, warnings = FALSE),   log = TRUE,   ... )  rm3(   n,   size,   pars,   m3_model,   act_funs = construct_m3_act_funs(m3_model, warnings = FALSE),   ... )"},{"path":"https://venpopov.github.io/bmm/dev/reference/m3dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution functions for the Memory Measurement Model (M3) — m3dist","text":"x Integer vector length K K number response categories value number observed responses per category pars named vector parameters memory measurement model m3_model bmmodel object specifying m3 model densities random samples generated act_funs bmmformula object specifying activation functions different response categories \"custom\" version M3. default attempt construct standard activation functions \"ss\" \"cs\" model version. custom m3 model need specify act_funs argument manually log Logical; TRUE (default), values returned log scale. ... can used pass additional variables used activation functions, parameters model n Integer. Number observations generate data size total number observations categories","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/m3dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution functions for the Memory Measurement Model (M3) — m3dist","text":"dm3 gives density memory measurement model, rm3 gives random generation function memory measurement model.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/m3dist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Distribution functions for the Memory Measurement Model (M3) — m3dist","text":"Oberauer, K., & Lewandowsky, S. (2019). Simple measurement models complex working-memory tasks. Psychological Review, 126(6), 880–932. https://doi.org/10.1037/rev0000159","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/m3dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution functions for the Memory Measurement Model (M3) — m3dist","text":"","code":"model <- m3(    resp_cats = c(\"corr\", \"other\", \"npl\"),    num_options = c(1, 4, 5),    choice_rule = \"simple\",    version = \"ss\"  )  dm3(x = c(20, 10, 10), pars = c(a = 1, b = 1, c = 2), m3_model = model) #> [1] -10.93765"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p.html","id":null,"dir":"Reference","previous_headings":"","what":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","title":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","text":"Two-parameter mixture model Zhang Luck (2008).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","text":"","code":"mixture2p(resp_error, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","text":"resp_error name variable provided dataset containing response error. response Error code response relative --recalled target radians. can transform response error degrees radian using deg2rad function. ... used internally testing, ignore ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","text":"object class bmmodel","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","text":"Domain: Visual working memory Task: Continuous reproduction Name: Two-parameter mixture model Zhang Luck (2008). Citation: Zhang, W., & Luck, S. J. (2008). Discrete fixed-resolution representations visual working memory. Nature, 453(7192), 233-235 Requirements: response vairable radians represent angular error relative target Parameters: mu1: Location parameter von Mises distribution memory responses (radians). Fixed internally 0 default. kappa: Concentration parameter von Mises distribution thetat: Mixture weight target responses Fixed parameters: mu1 = 0 mu2 = 0 kappa2 = -100 Default parameter links: mu1 = tan_half; kappa = log; thetat = identity Default priors: mu1: main: student_t(1, 0, 1) kappa: main: normal(2, 1) effects: normal(0, 1) thetat: main: logistic(0, 1)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","text":"","code":"if (FALSE) { # isTRUE(Sys.getenv(\"BMM_EXAMPLES\")) # generate artificial data dat <- data.frame(y = rmixture2p(n = 2000))  # define formula ff <- bmmformula(kappa ~ 1, thetat ~ 1)  model <- mixture2p(resp_error = \"y\")  # fit the model fit <- bmm(   formula = ff,   data = dat,   model = model,   cores = 4,   iter = 500,   backend = \"cmdstanr\" ) }"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution functions for the two-parameter mixture model (mixture2p) — mixture2p_dist","title":"Distribution functions for the two-parameter mixture model (mixture2p) — mixture2p_dist","text":"Density, distribution, random generation functions two-parameter mixture model location mu, precision memory representations kappa probability recalling items memory p_mem.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution functions for the two-parameter mixture model (mixture2p) — mixture2p_dist","text":"","code":"dmixture2p(x, mu = 0, kappa = 5, p_mem = 0.6, log = FALSE)  pmixture2p(q, mu = 0, kappa = 7, p_mem = 0.8)  qmixture2p(p, mu = 0, kappa = 5, p_mem = 0.6)  rmixture2p(n, mu = 0, kappa = 5, p_mem = 0.6)"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution functions for the two-parameter mixture model (mixture2p) — mixture2p_dist","text":"x Vector observed responses mu Vector locations kappa Vector precision values p_mem Vector probabilities memory recall log Logical; TRUE, values returned log scale. q Vector quantiles p Vector probability n Number observations generate data ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution functions for the two-parameter mixture model (mixture2p) — mixture2p_dist","text":"dmixture2p gives density two-parameter mixture model, pmixture2p gives cumulative distribution function two-parameter mixture model, qmixture2p gives quantile function two-parameter mixture model, rmixture2p gives random generation function two-parameter mixture model.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p_dist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Distribution functions for the two-parameter mixture model (mixture2p) — mixture2p_dist","text":"Zhang, W., & Luck, S. J. (2008). Discrete fixed-resolution representations visual working memory. Nature, 453.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution functions for the two-parameter mixture model (mixture2p) — mixture2p_dist","text":"","code":"# generate random samples from the mixture2p model and overlay the density r <- rmixture2p(10000, mu = 0, kappa = 4, p_mem = 0.8) x <- seq(-pi, pi, length.out = 10000) d <- dmixture2p(x, mu = 0, kappa = 4, p_mem = 0.8) hist(r, breaks = 60, freq = FALSE) lines(x, d, type = \"l\", col = \"red\")"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p.html","id":null,"dir":"Reference","previous_headings":"","what":"Three-parameter mixture model by Bays et al (2009). — mixture3p","title":"Three-parameter mixture model by Bays et al (2009). — mixture3p","text":"Three-parameter mixture model Bays et al (2009).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Three-parameter mixture model by Bays et al (2009). — mixture3p","text":"","code":"mixture3p(resp_error, nt_features, set_size, regex = FALSE, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Three-parameter mixture model by Bays et al (2009). — mixture3p","text":"resp_error name variable dataset containing response error. response error code response relative --recalled target radians. can transform response error degrees radians using deg2rad function. nt_features character vector names non-target feature values. non_target feature values radians centered relative target. Alternatively, regex=TRUE, regular expression can used match non-target feature columns dataset. set_size Name column containing set size variable (set_size varies) numeric value set_size, set_size fixed. regex Logical. TRUE, nt_features argument interpreted regular expression match non-target feature columns dataset. ... used internally testing, ignore ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Three-parameter mixture model by Bays et al (2009). — mixture3p","text":"object class bmmodel","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Three-parameter mixture model by Bays et al (2009). — mixture3p","text":"Domain: Visual working memory Task: Continuous reproduction Name: Three-parameter mixture model Bays et al (2009). Citation: Bays, P. M., Catalao, R. F. G., & Husain, M. (2009). precision visual working memory set allocation shared resource. Journal Vision, 9(10), 1-11 Requirements: response vairable radians represent angular error relative target non-target features radians centered relative target Parameters: mu1: Location parameter von Mises distribution memory responses (radians). Fixed internally 0 default. kappa: Concentration parameter von Mises distribution thetat: Mixture weight target responses thetant: Mixture weight non-target responses Fixed parameters: mu1 = 0 mu2 = 0 kappa2 = -100 Default parameter links: mu1 = tan_half; kappa = log; thetat = identity; thetant = identity Default priors: mu1: main: student_t(1, 0, 1) kappa: main: normal(2, 1) effects: normal(0, 1) thetat: main: logistic(0, 1) thetant: main: logistic(0, 1)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Three-parameter mixture model by Bays et al (2009). — mixture3p","text":"","code":"if (FALSE) { # isTRUE(Sys.getenv(\"BMM_EXAMPLES\")) # generate artificial data from the Bays et al (2009) 3-parameter mixture model dat <- data.frame(   y = rmixture3p(n = 2000, mu = c(0, 1, -1.5, 2)),   nt1_loc = 1,   nt2_loc = -1.5,   nt3_loc = 2 )  # define formula ff <- bmmformula(   kappa ~ 1,   thetat ~ 1,   thetant ~ 1 )  # specify the 3-parameter model with explicit column names for non-target features model1 <- mixture3p(resp_error = \"y\", nt_features = paste0(\"nt\", 1:3, \"_loc\"), set_size = 4)  # fit the model fit <- bmm(   formula = ff,   data = dat,   model = model1,   cores = 4,   iter = 500,   backend = \"cmdstanr\" )  # alternatively specify the 3-parameter model with a regular expression to match non-target features # this is equivalent to the previous call, but more concise model2 <- mixture3p(resp_error = \"y\", nt_features = \"nt.*_loc\", set_size = 4, regex = TRUE)  # fit the model fit <- bmm(   formula = ff,   data = dat,   model = model2,   cores = 4,   iter = 500,   backend = \"cmdstanr\" ) }"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution functions for the three-parameter mixture model (mixture3p) — mixture3p_dist","title":"Distribution functions for the three-parameter mixture model (mixture3p) — mixture3p_dist","text":"Density, distribution, random generation functions three-parameter mixture model location mu, precision memory representations kappa, probability recalling items memory p_mem, probability recalling non-targets p_nt.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution functions for the three-parameter mixture model (mixture3p) — mixture3p_dist","text":"","code":"dmixture3p(   x,   mu = c(0, 2, -1.5),   kappa = 5,   p_mem = 0.6,   p_nt = 0.2,   log = FALSE )  pmixture3p(q, mu = c(0, 2, -1.5), kappa = 5, p_mem = 0.6, p_nt = 0.2)  qmixture3p(p, mu = c(0, 2, -1.5), kappa = 5, p_mem = 0.6, p_nt = 0.2)  rmixture3p(n, mu = c(0, 2, -1.5), kappa = 5, p_mem = 0.6, p_nt = 0.2)"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution functions for the three-parameter mixture model (mixture3p) — mixture3p_dist","text":"x Vector observed responses mu Vector locations. First value represents location target item additional values indicate location non-target items. kappa Vector precision values p_mem Vector probabilities memory recall p_nt Vector probabilities swap errors log Logical; TRUE, values returned log scale. q Vector quantiles p Vector probability n Number observations generate data ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution functions for the three-parameter mixture model (mixture3p) — mixture3p_dist","text":"dmixture3p gives density three-parameter mixture model, pmixture3p gives cumulative distribution function two-parameter mixture model, qmixture3p gives quantile function two-parameter mixture model, rmixture3p gives random generation function two-parameter mixture model.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p_dist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Distribution functions for the three-parameter mixture model (mixture3p) — mixture3p_dist","text":"Bays, P. M., Catalao, R. F. G., & Husain, M. (2009). precision visual working memory set allocation shared resource. Journal Vision, 9(10), 7.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution functions for the three-parameter mixture model (mixture3p) — mixture3p_dist","text":"","code":"# generate random samples from the mixture3p model and overlay the density r <- rmixture3p(10000, mu = c(0, 2, -1.5), kappa = 4, p_mem = 0.6, p_nt = 0.2) x <- seq(-pi, pi, length.out = 10000) d <- dmixture3p(x, mu = c(0, 2, -1.5), kappa = 4, p_mem = 0.6, p_nt = 0.2) hist(r, breaks = 60, freq = FALSE) lines(x, d, type = \"l\", col = \"red\")"},{"path":"https://venpopov.github.io/bmm/dev/reference/oberauer_lewandowsky_2019_e1.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Experiment 1 reported by Oberauer & Lewandowsky (2019) — oberauer_lewandowsky_2019_e1","title":"Data from Experiment 1 reported by Oberauer & Lewandowsky (2019) — oberauer_lewandowsky_2019_e1","text":"Raw data 40 subjects completed verbal memory recall task three different conditions using different types distractor words.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/oberauer_lewandowsky_2019_e1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from Experiment 1 reported by Oberauer & Lewandowsky (2019) — oberauer_lewandowsky_2019_e1","text":"","code":"oberauer_lewandowsky_2019_e1"},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/oberauer_lewandowsky_2019_e1.html","id":"oberauer-lewandowsky-e-","dir":"Reference","previous_headings":"","what":"oberauer_lewandowsky_2019_e1","title":"Data from Experiment 1 reported by Oberauer & Lewandowsky (2019) — oberauer_lewandowsky_2019_e1","text":"data frame 120 rows 10 columns: ID Integer uniquely identifying subject cond Factor sperating three experimental conditions: new distractors refers new words used distractors, old reordered refers remembered words distractors, reordered relative serial position, old refers remebered words distractors, appearing order remembered words. corr frequency subject recalled correct item frequency subject recalled one remebered words dist frequency subject recalled one distractors npl frequency subject recalled -presented lure (NPL), word presented trial n_corr, n_other, n_dist, n_npl number candidataes response categories","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/oberauer_lin_2017.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Experiment 1 reported by Oberauer & Lin (2017) — oberauer_lin_2017","title":"Data from Experiment 1 reported by Oberauer & Lin (2017) — oberauer_lin_2017","text":"Raw data 19 subjects completed continuous reproduction task set size 1 8 reported Oberauer & Lin (2017).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/oberauer_lin_2017.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from Experiment 1 reported by Oberauer & Lin (2017) — oberauer_lin_2017","text":"","code":"oberauer_lin_2017"},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/oberauer_lin_2017.html","id":"oberauer-lin-","dir":"Reference","previous_headings":"","what":"oberauer_lin_2017","title":"Data from Experiment 1 reported by Oberauer & Lin (2017) — oberauer_lin_2017","text":"data frame 15,200 rows 19 columns: ID Integer uniquely identifying different subjects session Session number trial Trial number within session set_size set_size data row dev_rad response error, difference response given target color radians. col_nt1, col_nt2, col_nt3, col_nt4, col_nt5, col_nt6, col_nt7 non-target items' color value relative target. dist_nt1, dist_nt2, dist_nt3, dist_nt4, dist_nt5, dist_nt6, dist_nt7, dist_nt8 spatial distance non-target items target item radians.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/oberauer_lin_2017.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data from Experiment 1 reported by Oberauer & Lin (2017) — oberauer_lin_2017","text":"https://osf.io/m4shu","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/postprocess_brm.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic S3 method for postprocessing the fitted brm model — postprocess_brm","title":"Generic S3 method for postprocessing the fitted brm model — postprocess_brm","text":"Called bmm() automatically perform type postprocessing depending model type. call appropriate postprocess_brm.* methods based list classes defined .model_* functions. models several classes listed, call functions order listed. Thus, operations common group models defined appropriate postprocess_brm.* function, \\* corresponds shared class. example, sdm model, postprocessing involves setting link function c parameter \"log\", coded manually stan code, specified \"identity\" brms custom family. model requires postprocessing, can skip method, default method used (returns brmsfit object passed ).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/postprocess_brm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic S3 method for postprocessing the fitted brm model — postprocess_brm","text":"","code":"postprocess_brm(model, fit, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/postprocess_brm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic S3 method for postprocessing the fitted brm model — postprocess_brm","text":"model model list object returned check_model() fit fitted brm model ... Additional arguments passed method","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/postprocess_brm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic S3 method for postprocessing the fitted brm model — postprocess_brm","text":"object class brmsfit, necessary postprocessing applied","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/postprocess_brm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic S3 method for postprocessing the fitted brm model — postprocess_brm","text":"","code":"if (FALSE) { # isTRUE(Sys.getenv(\"BMM_EXAMPLES\")) fit <- readRDS(\"my_saved_fit.rds\") postprocessed_fit <- prostprocess_brm(fit) }"},{"path":"https://venpopov.github.io/bmm/dev/reference/print_pretty_models_md.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a markdown list of the measurement models available in bmm — print_pretty_models_md","title":"Generate a markdown list of the measurement models available in bmm — print_pretty_models_md","text":"Used internally automatically populate information README file","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/print_pretty_models_md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a markdown list of the measurement models available in bmm — print_pretty_models_md","text":"","code":"print_pretty_models_md()"},{"path":"https://venpopov.github.io/bmm/dev/reference/print_pretty_models_md.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a markdown list of the measurement models available in bmm — print_pretty_models_md","text":"Markdown code printing list measurement models available bmm","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/print_pretty_models_md.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a markdown list of the measurement models available in bmm — print_pretty_models_md","text":"","code":"print_pretty_models_md() #> **Visual working memory** #>  #> * Interference measurement model by Oberauer and Lin (2017).  #> * Two-parameter mixture model by Zhang and Luck (2008).  #> * Three-parameter mixture model by Bays et al (2009).  #> * Signal Discrimination Model (SDM) by Oberauer (2023)  #>  #> **Working Memory (categorical), Categorical Decision Making** #>  #> * The Multinomial / Memory Measurement Model  #>"},{"path":"https://venpopov.github.io/bmm/dev/reference/rejection_sampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Rejection Sampling — rejection_sampling","title":"Rejection Sampling — rejection_sampling","text":"Performs rejection sampling generate samples target distribution.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/rejection_sampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rejection Sampling — rejection_sampling","text":"","code":"rejection_sampling(n, f, max_f, proposal_fun, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/rejection_sampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rejection Sampling — rejection_sampling","text":"n Integer. number samples generate. f Function. target density function sample. max_f Numeric. maximum value target density function f. proposal_fun Function. function generates samples proposal distribution. ... Additional arguments passed target density function f.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/rejection_sampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rejection Sampling — rejection_sampling","text":"numeric vector length n containing samples target distribution.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/rejection_sampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rejection Sampling — rejection_sampling","text":"","code":"target_density <- function(x) brms::dvon_mises(x, mu = 0, kappa = 10) proposal <- function(n) runif(n, min = -pi, max = pi) samples <- rejection_sampling(10000, target_density, max_f = target_density(0), proposal) hist(samples, freq = FALSE) curve(target_density, col = \"red\", add = TRUE)"},{"path":"https://venpopov.github.io/bmm/dev/reference/restructure.bmmfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Restructure Old bmmfit Objects — restructure.bmmfit","title":"Restructure Old bmmfit Objects — restructure.bmmfit","text":"Restructure old bmmfit objects work latest bmm version. function called internally applying post-processing methods.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/restructure.bmmfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restructure Old bmmfit Objects — restructure.bmmfit","text":"","code":"# S3 method for class 'bmmfit' restructure(x, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/restructure.bmmfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restructure Old bmmfit Objects — restructure.bmmfit","text":"x object class bmmfit. ... Currently ignored.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/restructure.bmmfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restructure Old bmmfit Objects — restructure.bmmfit","text":"bmmfit object compatible latest version bmm brms.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/restructure.bmmfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restructure Old bmmfit Objects — restructure.bmmfit","text":"","code":"if (FALSE) { # file.exists(\"bmmfit_old.rds\") # Load an old bmmfit object old_fit <- readRDS(\"bmmfit_old.rds\") new_fit <- restructure(old_fit) }"},{"path":"https://venpopov.github.io/bmm/dev/reference/revert_postprocess_brm.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic S3 method for reverting any postprocessing of the fitted brm model — revert_postprocess_brm","title":"Generic S3 method for reverting any postprocessing of the fitted brm model — revert_postprocess_brm","text":"Called update.bmmfit() automatically revert postprocessing depending model type. call appropriate revert_postprocess_brm.* methods based list classes defined .model_* functions. models several classes listed, call functions order listed. example, sdm model, postprocessing involves setting link function c parameter \"log\", coded manually stan code, specified \"identity\" brms custom family. However, update process, link function set back \"identity\". use specific reason revert postprocessing (otherwise update method produce incorrect results).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/revert_postprocess_brm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic S3 method for reverting any postprocessing of the fitted brm model — revert_postprocess_brm","text":"","code":"revert_postprocess_brm(model, fit, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/revert_postprocess_brm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic S3 method for reverting any postprocessing of the fitted brm model — revert_postprocess_brm","text":"model model list object returned check_model() fit fitted brm model ... Additional arguments passed method","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/revert_postprocess_brm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic S3 method for reverting any postprocessing of the fitted brm model — revert_postprocess_brm","text":"object class brmsfit, necessary postprocessing applied","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/revert_postprocess_brm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic S3 method for reverting any postprocessing of the fitted brm model — revert_postprocess_brm","text":"","code":"if (FALSE) { # isTRUE(Sys.getenv(\"BMM_EXAMPLES\")) fit <- readRDS(\"my_saved_fit.rds\") postprocessed_fit <- prostprocess_brm(fit) reverted_fit <- revert_postprocess_brm(postprocessed_fit) }"},{"path":"https://venpopov.github.io/bmm/dev/reference/sdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Signal Discrimination Model (SDM) by Oberauer (2023) — sdm","title":"Signal Discrimination Model (SDM) by Oberauer (2023) — sdm","text":"Signal Discrimination Model (SDM) Oberauer (2023)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/sdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signal Discrimination Model (SDM) by Oberauer (2023) — sdm","text":"","code":"sdm(resp_error, version = \"simple\", ...)  sdmSimple(resp_error, version = \"simple\", ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/sdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signal Discrimination Model (SDM) by Oberauer (2023) — sdm","text":"resp_error name variable dataset containing response error. response error code response relative --recalled target radians. can transform response error degrees radians using deg2rad function. version Character. version model use. Currently \"simple\" supported. ... used internally testing, ignore ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/sdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Signal Discrimination Model (SDM) by Oberauer (2023) — sdm","text":"object class bmmodel","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/sdm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Signal Discrimination Model (SDM) by Oberauer (2023) — sdm","text":"see online article detailed description model use . * Domain: Visual working memory Task: Continuous reproduction Name: Signal Discrimination Model (SDM) Oberauer (2023) Citation: Oberauer, K. (2023). Measurement models visual working memory - factorial model comparison. Psychological Review, 130(3), 841-852 Version: simple Requirements: response variable radians represent angular error relative target Parameters: mu: Location parameter SDM distribution (radians; default fixed internally 0) c: Memory strength parameter SDM distribution kappa: Precision parameter SDM distribution Fixed parameters: mu = 0 Default parameter links: mu = tan_half; c = log; kappa = log Default priors: mu: main: student_t(1, 0, 1) kappa: main: student_t(5, 1.75, 0.75) effects: normal(0, 1) c: main: student_t(5, 2, 0.75) effects: normal(0, 1)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/sdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Signal Discrimination Model (SDM) by Oberauer (2023) — sdm","text":"","code":"if (FALSE) { # isTRUE(Sys.getenv(\"BMM_EXAMPLES\")) # simulate data from the model dat <- data.frame(y = rsdm(n = 1000, c = 4, kappa = 3))  # specify formula ff <- bmf(   c ~ 1,   kappa ~ 1 )  # specify the model fit <- bmm(   formula = ff,   data = dat,   model = sdm(resp_error = \"y\"),   cores = 4,   backend = \"cmdstanr\" ) }"},{"path":"https://venpopov.github.io/bmm/dev/reference/softmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Softmax function and its inverse — softmax","title":"Softmax function and its inverse — softmax","text":"softmax returns value softmax function softmaxinv returns value inverse-softmax function","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/softmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Softmax function and its inverse — softmax","text":"","code":"softmax(eta, lambda = 1)  softmaxinv(p, lambda = 1)"},{"path":"https://venpopov.github.io/bmm/dev/reference/softmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Softmax function and its inverse — softmax","text":"eta numeric vector input lambda Tuning parameter (single positive value) p probability vector (.e., numeric vector non-negative values sum one)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/softmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Softmax function and its inverse — softmax","text":"Value softmax function inverse","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/softmax.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Softmax function and its inverse — softmax","text":"softmax function bijective function maps real vector length m-1 probability vector length m non-zero probabilities.  present functions define softmax function inverse, tuning parameter. current functions define softmax : $$\\Large P(\\eta_i) = \\frac{e^{\\lambda \\eta_i}}{1+ \\sum_{j=1}^m e^{\\lambda \\eta_j}}$$ Code adapted utilities package","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/softmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Softmax function and its inverse — softmax","text":"","code":"softmax(5:7) #> [1] 0.0899759918 0.2445801036 0.6648376511 0.0006062535 softmaxinv(softmax(5:7)) #> [1] 5 6 7"},{"path":"https://venpopov.github.io/bmm/dev/reference/stancode.bmmformula.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Stan code for bmm models — stancode.bmmformula","title":"Generate Stan code for bmm models — stancode.bmmformula","text":"Given model, data formula model, function return combined stan code generated bmm brms","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/stancode.bmmformula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Stan code for bmm models — stancode.bmmformula","text":"","code":"# S3 method for class 'bmmformula' stancode(object, data, model, prior = NULL, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/stancode.bmmformula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Stan code for bmm models — stancode.bmmformula","text":"object bmmformula object data object class data.frame, containing data variables used model. names variables must match variable names passed bmmodel object required argurments. model description model fitted. call bmmodel mixture3p() function. Every model function number required arguments need specified within function call. Call supported_models() see list supported models required arguments prior One brmsprior objects created brms::set_prior() related functions combined using c method + operator. See also default_prior() help. necessary default model fitting, can provide prior constraints model parameters ... arguments passed brms::stancode(). See description brms::stancode() details","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/stancode.bmmformula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Stan code for bmm models — stancode.bmmformula","text":"character string containing fully commented Stan code fit bmm model.","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/stancode.bmmformula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Stan code for bmm models — stancode.bmmformula","text":"","code":"scode1 <- stancode(bmf(c ~ 1, kappa ~ 1),   data = oberauer_lin_2017,   model = sdm(resp_error = \"dev_rad\") ) cat(scode1) #> // generated with brms 2.22.0 and bmm 1.1.1.9000 #> functions { #>   /* compute the tan_half link #>    * Args: #>    *   x: a scalar in (-pi, pi) #>    * Returns: #>    *   a scalar in (-Inf, Inf) #>    */ #>    real tan_half(real x) { #>      return tan(x / 2); #>    } #>   /* compute the tan_half link (vectorized) #>    * Args: #>    *   x: a vector in (-pi, pi) #>    * Returns: #>    *   a vector in (-Inf, Inf) #>    */ #>    vector tan_half(vector x) { #>      return tan(x / 2); #>    } #>   /* compute the inverse of the tan_half link #>    * Args: #>    *   y: a scalar in (-Inf, Inf) #>    * Returns: #>    *   a scalar in (-pi, pi) #>    */ #>    real inv_tan_half(real y) { #>      return 2 * atan(y); #>    } #>   /* compute the inverse of the tan_half link (vectorized) #>    * Args: #>    *   y: a vector in (-Inf, Inf) #>    * Returns: #>    *   a vector in (-pi, pi) #>    */ #>    vector inv_tan_half(vector y) { #>      return 2 * atan(y); #>    } #>  #>  #>  #>   // utility function trick for converting real to integer type #>   int bin_search(real x, int min_val, int max_val) { #>       int mid_p; #>       int L = min_val; #>       int R = max_val; #>       while(L < R) { #>         mid_p = (R-L) %/% 2; #>         if (L + mid_p < x) { #>           L += mid_p + 1; #>         } else if (L + mid_p > x) { #>           R = L + mid_p - 1; #>         } else { #>           return(L + mid_p); #>         } #>       } #>       return(L); #>     } #>  #>   // utility function for determining optimal number of chebyshev points for the denominator approximation #>   int get_m(real c, real kappa) { #>     real m = floor(2 * exp(0.4*c) * kappa^(fma(c,0.0145,0.7)) + 0.5)+2; #>     int M = bin_search(m, 2, 200); #>     return(M); #>   } #>  #>   // log of the numerator of the sdm likelihood #>   real sdm_simple_lpdf(vector y, vector mu, vector c, vector kappa) { #>     int N = size(y); #>     vector[N] num = exp(fma(kappa,cos(y-mu)-1,c)) ; #>     real out = dot_product(num, sqrt(kappa)); #>     out *= inv(sqrt2()) * inv_sqrt(pi()); #>     return(out); #>   } #>  #>   // log of the normalization constant, approximated by chebyshev quadrature #>   real sdm_simple_ldenom_chquad_adaptive(real c, real kappa, matrix CN) { #>     int m = get_m(c,kappa); #>     vector[m] cosn = CN[1:m,m]; #>     vector[m] fn = exp(fma(kappa,cosn,c)) * sqrt(kappa) * inv(sqrt2()) * inv_sqrt(pi()); #>     real out = -log_sum_exp(fn)+log(m); #>     return(out); #>   } #> } #> data { #>   int<lower=1> N;  // total number of observations #>   vector[N] Y;  // response variable #>   int prior_only;  // should the likelihood be ignored? #> } #> transformed data { #>     // precompute chebyshev points #>   matrix[200,200] COSN; #>   for (m in 1:200) { #>     for (i in 1:m) { #>       COSN[i,m] = cos((2*i-1)*pi()/(2*m))-1; #>     } #>   } #> } #> parameters { #>   real Intercept_c;  // temporary intercept for centered predictors #>   real Intercept_kappa;  // temporary intercept for centered predictors #> } #> transformed parameters { #>   real Intercept;  // temporary intercept for centered predictors #>   real lprior = 0;  // prior contributions to the log posterior #>   Intercept = 0; #>   lprior += student_t_lpdf(Intercept_c | 5, 2, 0.75); #>   lprior += student_t_lpdf(Intercept_kappa | 5, 1.75, 0.75); #> } #> model { #>   // likelihood including constants #>   if (!prior_only) { #>     // initialize linear predictor term #>     vector[N] mu = rep_vector(0.0, N); #>     // initialize linear predictor term #>     vector[N] c = rep_vector(0.0, N); #>     // initialize linear predictor term #>     vector[N] kappa = rep_vector(0.0, N); #>     mu += Intercept; #>     c += Intercept_c; #>     kappa += Intercept_kappa; #>     mu = inv_tan_half(mu); #>     kappa = exp(kappa); #>     target += sdm_simple_lpdf(Y | mu, c, kappa); #>       // adaptive calculation of the normalization constant #>     real z; #>     for (n in 1:N) { #>     \tif (n == 1 || c[n] != c[n-1] || kappa[n] != kappa[n-1]) { #>     \t\tz = sdm_simple_ldenom_chquad_adaptive(c[n],kappa[n],COSN); #>     \t} #>     \ttarget += z; #>     } #>     target += -(log2()+log(pi()))*N; #>   } #>   // priors including constants #>   target += lprior; #> } #> generated quantities { #>   // actual population-level intercept #>   real b_Intercept = Intercept; #>   // actual population-level intercept #>   real b_c_Intercept = Intercept_c; #>   // actual population-level intercept #>   real b_kappa_Intercept = Intercept_kappa; #> }"},{"path":"https://venpopov.github.io/bmm/dev/reference/standata.bmmformula.html","id":null,"dir":"Reference","previous_headings":"","what":"Stan data for bmm models — standata.bmmformula","title":"Stan data for bmm models — standata.bmmformula","text":"Given model, data formula model, function return combined stan data generated bmm brms","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/standata.bmmformula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stan data for bmm models — standata.bmmformula","text":"","code":"# S3 method for class 'bmmformula' standata(object, data, model, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/standata.bmmformula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stan data for bmm models — standata.bmmformula","text":"object bmmformula object data object class data.frame, containing data variables used model. names variables must match variable names passed bmmodel object required argurments. model description model fitted. call bmmodel mixture3p() function. Every model function number required arguments need specified within function call. Call supported_models() see list supported models required arguments ... arguments passed brms::standata(). See description brms::standata() details","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/standata.bmmformula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stan data for bmm models — standata.bmmformula","text":"named list objects containing required data fit bmm model Stan.","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/standata.bmmformula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stan data for bmm models — standata.bmmformula","text":"","code":"sdata1 <- standata(bmf(c ~ 1, kappa ~ 1),   data = oberauer_lin_2017,   model = sdm(resp_error = \"dev_rad\") ) str(sdata1) #> List of 12 #>  $ N         : int 15200 #>  $ Y         : num [1:15200(1d)] 0.384 -0.4538 -0.0873 0.3665 -0.0349 ... #>  $ K         : int 1 #>  $ Kc        : num 0 #>  $ X         : num [1:15200, 1] 1 1 1 1 1 1 1 1 1 1 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:15200] \"1\" \"2\" \"3\" \"4\" ... #>   .. ..$ : chr \"Intercept\" #>   ..- attr(*, \"assign\")= int 0 #>  $ K_c       : int 1 #>  $ Kc_c      : num 0 #>  $ X_c       : num [1:15200, 1] 1 1 1 1 1 1 1 1 1 1 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:15200] \"1\" \"2\" \"3\" \"4\" ... #>   .. ..$ : chr \"Intercept\" #>   ..- attr(*, \"assign\")= int 0 #>  $ K_kappa   : int 1 #>  $ Kc_kappa  : num 0 #>  $ X_kappa   : num [1:15200, 1] 1 1 1 1 1 1 1 1 1 1 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:15200] \"1\" \"2\" \"3\" \"4\" ... #>   .. ..$ : chr \"Intercept\" #>   ..- attr(*, \"assign\")= int 0 #>  $ prior_only: int 0 #>  - attr(*, \"class\")= chr [1:2] \"standata\" \"list\""},{"path":"https://venpopov.github.io/bmm/dev/reference/summary.bmmfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a summary of a fitted model represented by a bmmfit object — summary.bmmfit","title":"Create a summary of a fitted model represented by a bmmfit object — summary.bmmfit","text":"Create summary fitted model represented bmmfit object","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/summary.bmmfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a summary of a fitted model represented by a bmmfit object — summary.bmmfit","text":"","code":"# S3 method for class 'bmmfit' summary(   object,   priors = FALSE,   prob = 0.95,   robust = FALSE,   mc_se = FALSE,   ...,   backend = \"bmm\" )"},{"path":"https://venpopov.github.io/bmm/dev/reference/summary.bmmfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a summary of a fitted model represented by a bmmfit object — summary.bmmfit","text":"object object class brmsfit. priors Logical; Indicating priors included summary. Default FALSE. prob value 0 1 indicating desired probability covered uncertainty intervals. default 0.95. robust FALSE (default) mean used measure central tendency standard deviation measure variability. TRUE, median median absolute deviation (MAD) applied instead. mc_se Logical; Indicating uncertainty Estimate caused MCMC sampling shown summary. Defaults FALSE. ... potential arguments backend Choose whether display bmm summary method (default), display brms summary method.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/summary.bmmfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a summary of a fitted model represented by a bmmfit object — summary.bmmfit","text":"list class bmmsummary containing summary model's parameters, model formula, model, data used fit model.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/summary.bmmfit.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a summary of a fitted model represented by a bmmfit object — summary.bmmfit","text":"can turn color output setting option options(bmm.color_summary = FALSE) bmm_options(color_summary = FALSE)","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/summary.bmmfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a summary of a fitted model represented by a bmmfit object — summary.bmmfit","text":"","code":"if (FALSE) { # isTRUE(Sys.getenv(\"BMM_EXAMPLES\")) # generate artificial data from the Signal Discrimination Model dat <- data.frame(y = rsdm(2000))  # define formula ff <- bmmformula(c ~ 1, kappa ~ 1)  # fit the model fit <- bmm(   formula = ff,   data = dat,   model = sdm(resp_error = \"y\"),   cores = 4,   backend = \"cmdstanr\" )  # summary of the model summary(fit) }"},{"path":"https://venpopov.github.io/bmm/dev/reference/supported_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Measurement models available in bmm — supported_models","title":"Measurement models available in bmm — supported_models","text":"Measurement models available bmm","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/supported_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measurement models available in bmm — supported_models","text":"","code":"supported_models(print_call = TRUE)"},{"path":"https://venpopov.github.io/bmm/dev/reference/supported_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measurement models available in bmm — supported_models","text":"print_call Logical; TRUE (default), function print information model function called required arguments. FALSE, function return character vector names available models","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/supported_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measurement models available in bmm — supported_models","text":"character vector measurement models available bmm","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/supported_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measurement models available in bmm — supported_models","text":"","code":"supported_models() #> The following models are supported: #>  #> -  imm(resp_error, nt_features, nt_distances, set_size, regex, version)  #> -  m3(resp_cats, num_options, choice_rule, version)  #> -  mixture2p(resp_error)  #> -  mixture3p(resp_error, nt_features, set_size, regex)  #> -  sdm(resp_error, version)  #>  #> Type  ?modelname  to get information about a specific model, e.g.  ?imm"},{"path":"https://venpopov.github.io/bmm/dev/reference/update.bmmfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a bmm model — update.bmmfit","title":"Update a bmm model — update.bmmfit","text":"Update existing bmm mode. function calls brms::update.brmsfit(), applies necessary bmm postprocessing model object update.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/update.bmmfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a bmm model — update.bmmfit","text":"","code":"# S3 method for class 'bmmfit' update(object, formula., newdata = NULL, recompile = NULL, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/update.bmmfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a bmm model — update.bmmfit","text":"object object class bmmfit formula. bmmformula(). missing, original formula used. Currently specify full bmmformula newdata optional data frame containing variables model recompile Logical, indicating whether Stan model recompiled. NULL (default), update tries figure internally, recompilation necessary. Setting FALSE cause Stan code changing arguments ignored. ... arguments passed brms::update.brmsfit()","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/update.bmmfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a bmm model — update.bmmfit","text":"updated bmmfit object refit new data /formula","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/update.bmmfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update a bmm model — update.bmmfit","text":"updating brmsfit created cmdstanr backend different R session, recompilation triggered default, cmdstanr writes model executable temporary directory. avoid , set option \"cmdstanr_write_stan_file_dir\" nontemporary path choice creating original bmmfit. information examples, see brms::update.brmsfit()","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/update.bmmfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a bmm model — update.bmmfit","text":"","code":"if (FALSE) { # isTRUE(Sys.getenv(\"BMM_EXAMPLES\")) # generate artificial data from the Signal Discrimination Model # generate artificial data from the Signal Discrimination Model dat <- data.frame(y = rsdm(2000))  # define formula ff <- bmf(c ~ 1, kappa ~ 1)  # fit the model fit <- bmm(   formula = ff,   data = dat,   model = sdm(resp_error = \"y\"),   cores = 4,   backend = \"cmdstanr\" )  # update the model fit <- update(fit, newdata = data.frame(y = rsdm(2000, kappa = 5))) }"},{"path":"https://venpopov.github.io/bmm/dev/reference/use_model_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a file with a template for adding a new model (for developers) — use_model_template","title":"Create a file with a template for adding a new model (for developers) — use_model_template","text":"Create file template adding new model (developers)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/use_model_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a file with a template for adding a new model (for developers) — use_model_template","text":"","code":"use_model_template(   model_name,   custom_family = FALSE,   stanvar_blocks = c(\"data\", \"tdata\", \"parameters\", \"tparameters\", \"model\", \"likelihood\",     \"genquant\", \"functions\"),   open_files = TRUE,   testing = FALSE )"},{"path":"https://venpopov.github.io/bmm/dev/reference/use_model_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a file with a template for adding a new model (for developers) — use_model_template","text":"model_name string name model. file named model_model_name.R necessary functions created appropriate names structure. file saved R/ directory custom_family Logical; plan define brms::custom_family()? TRUE function add section custom family, placeholders stan_vars corresponding empty .stan files inst/stan_chunks/, can fill example, see sdm model /R/model_sdm.R. FALSE (default) function add custom family section stan files. stanvar_blocks character vector names blocks added custom family section. See brms::stanvar() details. default lists possible blocks, unlikely need . can specify vector need. function add section block list open_files Logical; TRUE (default), function open template files created RStudio testing Logical; TRUE, function return file content save file. FALSE (default), function save file","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/use_model_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a file with a template for adding a new model (for developers) — use_model_template","text":"testing TRUE, function return file content string. testing FALSE, function return NULL","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/use_model_template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a file with a template for adding a new model (for developers) — use_model_template","text":"get warning check() non-ASCII characters, often due citation field. can find problem running   usually rewriting numbers (issue, page numbers) manually fixes ","code":"remotes::install_github(\"eddelbuettel/dang\") dang::checkPackageAsciiCode(dir = \".\")"},{"path":"https://venpopov.github.io/bmm/dev/reference/use_model_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a file with a template for adding a new model (for developers) — use_model_template","text":"","code":"if (FALSE) { # isTRUE(Sys.getenv(\"BMM_EXAMPLES\")) library(usethis)   # create a new model file with a brms::custom_family, three .stan files in # inst/stan_chunks/ and open the files use_model_template(\"abc\",   custom_family = TRUE,   stanvar_blocks = c(\"functions\", \"likelihood\", \"tdata\") ) }"},{"path":"https://venpopov.github.io/bmm/dev/reference/wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap angles that extend beyond (-pi;pi) — wrap","title":"Wrap angles that extend beyond (-pi;pi) — wrap","text":"circular space, angles can range (-pi;pi -180;180). subtracting angles, can result values outside range. example, calculating difference value 10 degrees minus 340 degrees, results difference 330 degrees. However, true difference two values -30 degrees. function wraps values, occur circle","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap angles that extend beyond (-pi;pi) — wrap","text":"","code":"wrap(x, radians = TRUE)"},{"path":"https://venpopov.github.io/bmm/dev/reference/wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap angles that extend beyond (-pi;pi) — wrap","text":"x numeric vector, matrix data.frame angles wrapped. radians (default) degrees. radians Logical. x radians (default=TRUE) degrees (FALSE)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/wrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap angles that extend beyond (-pi;pi) — wrap","text":"object type x","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/wrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrap angles that extend beyond (-pi;pi) — wrap","text":"","code":"x <- runif(1000, -pi, pi) y <- runif(1000, -pi, pi) diff <- x - y hist(diff)  wrapped_diff <- wrap(x - y) hist(wrapped_diff)"},{"path":"https://venpopov.github.io/bmm/dev/reference/zhang_luck_2008.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Experiment 2 reported by Zhang & Luck (2008) — zhang_luck_2008","title":"Data from Experiment 2 reported by Zhang & Luck (2008) — zhang_luck_2008","text":"Raw data 8 subjects response error continuous reproduction task set size 1, 2, 3, 6 reported Zhang & Luck (2008).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/zhang_luck_2008.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from Experiment 2 reported by Zhang & Luck (2008) — zhang_luck_2008","text":"","code":"zhang_luck_2008"},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/zhang_luck_2008.html","id":"zhang-luck-","dir":"Reference","previous_headings":"","what":"zhang_luck_2008","title":"Data from Experiment 2 reported by Zhang & Luck (2008) — zhang_luck_2008","text":"data frame 4,000 rows 9 columns: subID Integer uniquely identifying different subjects trial Trial identifyier setsize set_size data row response_error response error, difference response given target color radians. col_lure1, col_Lure2, col_Lure3, col_Lure4, col_Lure5 Color value lure items coded relative target color.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/zhang_luck_2008.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data from Experiment 2 reported by Zhang & Luck (2008) — zhang_luck_2008","text":"https://www.nature.com/articles/nature06860","code":""},{"path":[]},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"new-models-1-1-1","dir":"Changelog","previous_headings":"","what":"New models","title":"bmm 1.1.1","text":"Add Memory Measurement Model (Oberauer & Lewandowsky, 2019) generalization Multinomial Measurement Model categorical decision tasks new model class m3 three versions: simple span (ss), complex span (cs), custom. details, see article bmm website (#237). Thanks @GidonFrischkorn @chenyu-psy","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"new-features-1-1-1","dir":"Changelog","previous_headings":"","what":"New features","title":"bmm 1.1.1","text":"Updates bmf2bf S3 methods flexible translation bmmformulas brmsformulas (#227). New function apply_links adds link functions non-linear formulas bmmformula object. New example data set oberauer_lewandowsky_2019_e1 exploring m3 model. file_refit argument bmm function now accepts character strings like brms. warning given “on_change” specified, currently implemented bmmodels (#228). New function rejection_sampling","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bug-fixes-1-1-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bmm 1.1.1","text":"Fix conflict setting default priors model parameters transformed non-linear formula (#232). Allow NULL formula (formula(NULL)) added bmmformula consistentcy brms (#264) Improve error messages attempting construct bmmformulas without left-hand-side variable","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"documentation-1-1-1","dir":"Changelog","previous_headings":"","what":"Documentation","title":"bmm 1.1.1","text":"Add documentation continuous reproduction task article pre-processing half-circular stimulus spaces using bmmodels circular model class (#229, #233). New online article accompany m3 model","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"other-changes-1-1-1","dir":"Changelog","previous_headings":"","what":"Other changes","title":"bmm 1.1.1","text":"vectorize k2sd() function improved performance various internal refactorings (#246, #242) dplyr, magrittr tidyr dependencies now optional (#240) new contributor - Chenyun Li (chenyu-psy) work m3 model","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bmm-100","dir":"Changelog","previous_headings":"","what":"bmm 1.0.0","title":"bmm 1.0.0","text":"First version package published CRAN!","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"New features","title":"bmm 1.0.0","text":"can now specify save bmmfit object generated bmm() file file argument, similarly brms::brm() (#190) parameterization imm adapted accurately reflect model implemented Oberauer et al. (2017) prepare package CRAN submission","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bmm 1.0.0","text":"fix incorrect specification default priors interaction specified (#201) random generation function mixture3p imm returned incorrect samples rare parameter combinations, now fixed, functions now return correct samples parameter combinations.","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"deprecated-functions-and-arguments-1-0-0","dir":"Changelog","previous_headings":"","what":"Deprecated functions and arguments","title":"bmm 1.0.0","text":"BREAKING CHANGE: arguments distribution functions mixture2p mixture3p model change match snake_case coding scheme. Instead pMem pNT now p_mem p_nt. old names deprecated longer supported","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bug-fixes-0-5-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bmm 0.5.1","text":"fix display model call summary method bmm models","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"New features","title":"bmm 0.5.0","text":"add summary() method bmmfit objects (#144) add global option bmm.summary_backend control backend used summary() method (choices “bmm” “brms”) function restructure() now allows apply methods introduced newer bmm versions bmmfit objects created older bmm versions can now specify model parameter constant using equal sign bmmformula (#142) can now choose estimate parameters fixed constant default models (#145) default priors models now specified via configure_prior() S3 method (#145) cmdstanr used default backend brms user installed (#145) various updates documentation data sets","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"documentation-0-5-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"bmm 0.5.0","text":"two new online articles introduce bmmformula syntax explain extract information bmmodels generated Stan code Stan data model","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bmm 0.5.0","text":"fix bug preventing sort_data check executed (#72) fix bugs summary() function displaying implicit parameters (#152) working properly hierarchical designs (#173) fix bug sort_data check occurred cases shouldn’t (#158)","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"deprecated-functions-and-arguments-0-5-0","dir":"Changelog","previous_headings":"","what":"Deprecated functions and arguments","title":"bmm 0.5.0","text":"BREAKING CHANGE: remove get_model_prior(), get_stancode() get_standata(). Due recent changes brms version 2.21.0, can now use brms functions default_prior, stancode standata directly bmm models. function fit_model() deprecated favor bmm() removed future version (#163) argument setsize mixture3p IMM models now called set_size consistency. old argument name deprecated removed future version (#163) distributions functions imm model renamed dIMM, pIMM, rIMM qIMM dimm, pimm, rimm qimm (#163) argument parallel bmm() function deprecated removed future version. Use cores instead, brms::brm() (#163) models IMMfull(), IMMabc() IMMbsc() now called via imm(), imm(version = “abc”) imm(version = “bsc”). old names deprecated removed future version (#163) sdmSimple() model now called sdm(). old name deprecated removed future version (#163)","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"other-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"bmm 0.5.0","text":"bmm now requires least version 2.21.0 brms.","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"bmm 0.4.0","text":"add check sdmSimple model data sorted predictors. leads much faster sampling. user can control default behavior sort_data argument (#72) mixture3p IMM models now require intercept must suppressed set size used predictor (#96). add postprocessing methods sdmSimple allow use pp_check(), conditional_effects bridgesampling model (#30) add informed default priors models. can always use get_model_prior() function see default priors model add new function set_default_prior developers, allows easily set default priors new models regardless user-specified formula can now specify variables models via regular expressions rather character vectors (#102) can now view set bmm global options via bmm_options(). See ?bmm_options information add start-message upon loading package","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bmm 0.4.0","text":"fix bug mixture3p IMM models caused error intercept suppressed set size used predictor update() now works properly bmmfit objects (#95) fix bug sort_data check caused error using grouped covariance structure random effects across different parameters","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"other-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"bmm 0.4.0","text":"brms now loaded automatically loading bmm library(bmm)","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"bmm 0.3.0","text":"BREAKING CHANGE: fit_model function now requires bmmformula passed. syntax bmmformula short form bmf equal specifying brmsformula. However, version bmmformula specifies parameters bmmodel change across experimental conditions continuous predictors. response variables model fit now specified model defined using model = bmmodel(). (#79) BREAKING CHANGE: non_target spaPos variables mixture3p IMM models relabeled nt_features nt_distances consistency. also communicate distance limited spatial distance distances feature dimensions retrieval cues. Currently, still single generalization gradient cue features possible. release includes reference fits implemented models ensure future changes package compromise included models change results implementations produce. check_formula methods adapted match new bmmformula syntax. now evaluates formulas specified using bmmformula function, formulas parameters bmmodel specified warns user fixed intercept estimated formula one parameters provided. Additionally, check_formula throws error formulas provided match parameter called bmmodel unless part non-linear transformation. can now specify formulas internally fixed parameters mu visual working memory models. allows predict response bias data. formula provided mu, model assume mean response distribution fixed zero. now option bmm.silent allows suppress messages baseline activation b removed IMM models, internally fixed zero scaling now predicted independent variables model unidentifiable. arguments used fit bmmodel now accessible bmmfit object via fit$bmm$fit_args list. add class(‘bmmfit’) object returned fit_model() allowing flexible postprocessing underlying brmsfit object. object now class(‘bmmfit’, ‘brmsfit’) changes column names datasets zhang_luck_2008 oberauer_lin_2017 make consistent","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"bmm 0.3.0","text":"error treatment distances IMMfull IMMbsc corrected. versions ensures positive distances can passed two models. removed warning regarding scaling distances IMMfull IMMbsc specific circular distances.","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"documentation-0-3-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"bmm 0.3.0","text":"articles update new bmmformula syntax.","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bug-fixes-0-2-2","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"bmm 0.2.2","text":"fixed bug passing character vector negative values set_size argument visual working memory models caused error incorrect behavior (#97)","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bug-fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"bmm 0.2.1","text":"Minor change sdmSimple Stan helper functions avoid harmless warning message Stan output","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"bmm 0.2.0","text":"New model available - Signal Discrimination Model Oberauer (2023) visual working memory continuous reproduction tasks. See ?sdmSimple. current version take account non-target activation Add ability extract information default priors bmm models get_model_prior() (#53) Add ability generate stan code stan data model get_model_stancode() get_model_standata() (#81) BREAKING CHANGE: Add distribution functions likelihood (e.g. dIMM()) random variate generation rIMM()) models package. Remove deprecated gen_3p_data() gen_imm_data() functions (#69) Two new data sets available: zhang_luck_2008 oberauer_lin_2017 (#22)","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"documentation-0-2-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"bmm 0.2.0","text":"Website development version package now available https://venpopov.github.io/bmm/dev/ (#18) Add articles model website https://venpopov.github.io/bmm/dev/articles/ Add detailed developer’s guide website https://venpopov.github.io/bmm/dev/dev-notes (#21) Improve README detailed information package’s goals models (#21)","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"other-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"bmm 0.2.0","text":"Save bmm package version brmsfit object reproducibility - e.g. fit$version$bmm (#88)","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"new-features-0-1-1","dir":"Changelog","previous_headings":"","what":"New features","title":"bmm 0.1.1","text":"BREAKING CHANGE: Improve user interface fit_model() ensures package stability future development. Model specific arguments now passed model functions named arguments (e.g. mixture3p(non_targets, setsize)). allows flexible intuitive way specify model arguments. Passing model specific arguments directly fit_model() function now deprecated (#43). Add information model domain, task, name, version, citation, requirements parameters (#42) Add ability generate template file adding new models package use_model_template() (developers) (#39)","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"other-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Other changes","title":"bmm 0.1.1","text":"Improve documentation model functions. can now get help model typing ?model_name console. example, calling information full version Interference Measurement Model look like : ?IMMfull","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bmm-010","dir":"Changelog","previous_headings":"","what":"bmm 0.1.0","title":"bmm 0.1.0","text":"major restructuring package support stable generalizable development future models (#41).","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"bmm 0.1.0","text":"Refactor fit_model() function generic independent model fit (#20) Transform models S3 objects. (#41). View currently supported models new function supported_models(). Currently supported models : mixture2p(), mixture3p(), IMMabc(), IMMbsc(), IMMfull() Add S3 methods checking data, formula, model priors (#41) Add distribution functions Signal Discrimination Model. See ?SDM usage (#27) Add softmax softmaxinv functions","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bug-fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"bmm 0.1.0","text":"Change default prior log(kappa) Normal(2,1) mixture3p() model (#15)","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"other-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"bmm 0.1.0","text":"BREAKING CHANGE: deprecate model_type argument fit_model(). Models must now specified S3 functions passed argument model rather model names strings passed argument model_type (#41) Add extensive unit testing","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bmm-001","dir":"Changelog","previous_headings":"","what":"bmm 0.0.1","title":"bmm 0.0.1","text":"Initial release version","code":""}]
