[{"path":"https://venpopov.github.io/bmm/dev/articles/IMM.html","id":"introduction-to-the-model","dir":"Articles","previous_headings":"","what":"Introduction to the model","title":"The Interference Measurement Model (IMM)","text":"Interference Measurement Model (IMM) measurement model continous reproduction tasks domain visual working memory. model introduced Oberauer et al. (2017) . aim IMM capture response behavior continuous reproduction tasks including occurrence swap errors items encoded visual working memory. IMM assumes retrieval, --remembered items features (e.g., colors, orientations, shapes) associated context appeared (e.g. spatial location). associations can continuous strength represent bindings contents context --remembered information (see Figure 1.1). retrieval different sources activation contribute activation --retrieved contents. Background noise (b) uniformly activates possible responses, example 360 colors participants can chose color wheel experiment. Cue-independent activation () equally activates features encoded visual working memory retrieval. cue-dependent activation (c) activates features associated current retrieval cue (e.g., spatial location cued retrieved). Additionally, IMM assumes cue-dependent activation follows generalization gradient (s) activates similar contexts. Figure 1.1: Illustration IMM Oberauer et al. (2017) activation potential feature \\(x\\) retrieved sum weighted activation three activation sources, given retrieval cue \\(L\\) location \\(\\theta\\): \\[ (x|L_\\theta) = b \\times A_b(x) + \\times A_a(x) + c \\times A_c(c|L_\\theta) \\] background activation (\\(A_b\\)) independent encoded features thus modeled uniform distribution around circular feature space. implemented von-Mises (vM) distribution centered 0 precision \\(\\kappa = 0\\): \\[ A_b(x) = vM(x,0,0) \\] cue-independent activation (\\(A_a\\)) modeled sum von Mises distributions centered feature values \\(x_i\\) \\(n\\) encoded items \\(\\) precision memory : \\[ A_a(x) = \\sum^n_{= 1} vM(x,x_i,\\kappa) \\] cue-dependent activation (\\(A_c\\)) modeled sum von Mises distributions centered feature values \\(x_i\\) \\(n\\) encoded items \\(\\) precision memory . distributions weighted spatial distance \\(D\\) context \\(L\\) feature associated cue context \\(L_\\theta\\). distance weighted generalization gradient \\(s\\) captures specificity bindings cue dimension: \\[ A_c(x|L_\\theta) = \\sum^n_{= 1} e^{-s*D(L,L\\theta)} \\times vM(x,x_i,\\kappa) \\] probability choosing response \\(\\hat{x}\\) results normalizing activation possible responses \\(N\\). original publication IMM done using Luce’s choice rule: \\[ P(\\hat{x}|L_\\theta) = \\frac{(\\hat{x}|L_\\theta)}{\\sum^N_{j=1}(j|L_\\theta)} \\] bmm package, decided implement alternative normalization using softmax normalization: \\[ P(\\hat{x}|L_\\theta) = \\frac{e^{(\\hat{x}|L_\\theta)}}{\\sum^N_{j=1}e^{(j|L_\\theta)}} \\] comparison different normalization function context activation based models working memory can found appendix Oberauer Lewandowsky (2019). Additionally, recent factorial comparison different models visual working memory (Oberauer 2023) indicated softmax normalization generally captures observed data better Luce’s choice rule context continuous reproduction tasks. sum, IMM assumes responses continuous reproduction tasks results cue-based retrieval cue-independent activation features corrupted background noise.","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/IMM.html","id":"parametrization-in-the-bmm-package","dir":"Articles","previous_headings":"","what":"Parametrization in the bmm package","title":"The Interference Measurement Model (IMM)","text":"identification, one weighting parameters fixed. original publication strength cue-dependent activation \\(c\\) fixed one. default setup brms however currently allows fix strength background noise \\(b\\) zero. Therefore, implementations IMM bmm package, strength cue-dependent cue-independent activation, \\(c\\) \\(\\), can estimated predicted independent variables. Apart , precision memory representations \\(\\kappa\\) generalization gradient \\(s\\) parameterized way original publication. Please also note, scaling generalization gradient s dependent scaling distance D target location locations non-targets. previous studies estimating IMM (Oberauer et al. 2017) distances scaled radians, items placed imaginary circle around center screen. However, studies might position color patches randomly inside frame certain width height thus might use euclidean distances. Also changing radius imaginary circles color patches placed , change absolute distance items. affect absolute size generalization gradient s. Thus, differences generalization gradient s different studies interpreted strongly, especially studies used different distance measures different experimental settings respect placement items. now, recommend differences generalization gradient s conditions single experiment taken robust results. Additionally, use softmax normalization translating activation probabilities, estimates strength cue-dependent -independent activation, \\(c\\) \\(\\) interpreted relatively strength baseline activation \\(b\\) fixed zero. Thus, possible strength cue-dependent cue-independent activation, \\(c\\) \\(\\), become negative. reflect absolute negative activation rather activation relatively smaller baseline activation.","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/IMM.html","id":"fitting-the-model-with-bmm","dir":"Articles","previous_headings":"","what":"Fitting the model with bmm","title":"The Interference Measurement Model (IMM)","text":"start loading bmm package:","code":"library(bmm)"},{"path":"https://venpopov.github.io/bmm/dev/articles/IMM.html","id":"generating-simulated-data","dir":"Articles","previous_headings":"3 Fitting the model with bmm","what":"Generating simulated data","title":"The Interference Measurement Model (IMM)","text":"already data set want fit, can skip section. Alternatively, can use data provided package (see data(package='bmm')) generate data using random generation function provided bmm package.","code":"# set seed for reproducibility set.seed(123)  # specfiy generating parameters Cs <- c(4,4,2,2) As <- c(0.5,1,0.5,0.5) Ss <- c(10,10,5,5) kappas <- c(15,10,15,10) nTrials = 1000 setsize = 5  simData <- data.frame() for (i in 1:length(Cs)) {   # generate different non-target locations for each condition   item_location <- c(0, runif(setsize - 1, -pi,pi))      # generate different distances for each condition   item_distance <- c(0, runif(setsize - 1, min = 0.1, max = pi))      # simulate data for each condition   genData <- rIMM(n = nTrials,                   mu = item_location,                   dist = item_distance,                   c = Cs[i], a = As[i],                   b = 0, s = Ss[i], kappa = kappas[i])      condData <- data.frame(     resp_err = genData,     trialID = 1:nTrials,     cond = i,     color_item1 = 0,     dist_item1 = 0   )      init_colnames <- colnames(condData)      for (j in 1:(setsize - 1)) {     condData <- cbind(condData,item_location[j + 1])     condData <- cbind(condData,item_distance[j + 1])   }      colnames(condData) <- c(init_colnames,                           paste0(rep(c(\"color_item\",\"dist_item\"),times = setsize - 1),                                   rep(2:(setsize),each = 2)))      simData <- rbind(simData,condData) }  # convert condition variable to a factor  simData$cond <- as.factor(simData$cond)"},{"path":"https://venpopov.github.io/bmm/dev/articles/IMM.html","id":"estimating-the-model-with-bmm","dir":"Articles","previous_headings":"3 Fitting the model with bmm","what":"Estimating the model with bmm","title":"The Interference Measurement Model (IMM)","text":"estimate IMM first need specify formula. specify formula using bmmformula function (bmf). formula, directly estimate parameters four conditions. Unlike brmsformula provide dependent variable formula.: , can specify model want estimate. includes specifying name variable containing dependent variable resp_err simulated data set. Additionally, also need provide information non_target locations, name variable coding spatial distances nt_features target spaDist, setsize used data. setsize can either fixed integer, one setsize data, name variable coding setsize data: example specified column names non_targets explicitely via paste0('color_item',2:5). Alternatively, can use regular expression match non-target feature columns dataset. example, can specify model different ways via regular expressions: Finally, can fit model passing relevant arguments fit_model function: Running model takes 2 5 minutes (depending speed computer). load already saved fit object, machine wait model finishes sampling. brms cmdstanr typically print information sampling progress. Using fit object can quick look summary fitted model: first thing might notice parts formula passed fit_model function, bmm added lot additional specifications implement IMM. nothing check. interested customizing exploring different assumptions imposed IMM, start taking formula adapting accordingly. Next, can look estimated parameters. first thing check sampling converged, indicated Rhat values close one. want inspection sampling, can check functionality implemented brmsto . parameter estimates c already native scale, s kappa estimated using log link function, transform back native scale. results indicate parameters, except s well recovered. already noted Oberauer et al. (2017), good recovery generalization gradient s requires lot data. Thus might consider opting simplified version IMM without s parameter, IMMabc. can illustrate recovery data generating parameters plotting full posterior distributions alongside data generating parameters. need extract posterior draws using tidybayes package include data generating parameters plots posteriors.","code":"model_formula <- bmf(   c ~ 0 + cond,   a ~ 0 + cond,   s ~ 0 + cond,   kappa ~ 0 + cond ) model <- IMMfull(resp_err = \"resp_err\",                  nt_features = paste0(\"color_item\",2:5),                  setsize = setsize,                  nt_distances = paste0(\"dist_item\",2:5)) model <- IMMfull(resp_err = \"resp_err\",                  nt_features = \"color_item[2-5]\",                  setsize = setsize,                  nt_distances = \"dist_item[2-5]\",                  regex = TRUE) fit <- fit_model(   formula = model_formula,   data = simData,   model = model,   parallel = TRUE,   chains = 4,   iter = 2000,   backend = \"cmdstanr\" ) fit <- bmm:::bmmfit_imm_vignette summary(fit) Model: IMMfull(resp_err = \"resp_err\",                  nt_features = c(\"color_item2\", \"color_item3\", \"color_item4\", \"color_item5\"),                  nt_distances = c(\"dist_item2\", \"dist_item3\", \"dist_item4\", \"dist_item5\"),                  setsize = 5)    Links: kappa = log; a = identity; c = identity; s = log  Formula: mu1 = 0          kappa ~ 0 + cond          a ~ 0 + cond          c ~ 0 + cond          s ~ 0 + cond          mu2 = 0          kappa2 = -100     Data: simData (Number of observations: 4000)   Draws: 2 chains, each with iter = 2000; warmup = 1000; thin = 1;          total post-warmup draws = 2000  Regression Coefficients:             Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS kappa_cond1     2.65      0.05     2.55     2.75 1.00     1976     1652 kappa_cond2     2.39      0.05     2.29     2.50 1.00     2018     1442 kappa_cond3     2.68      0.07     2.55     2.82 1.00     2455     1386 kappa_cond4     2.25      0.12     1.98     2.47 1.00     2082     1264 a_cond1         0.48      0.52    -0.48     1.62 1.00     2226     1364 a_cond2         0.10      0.61    -0.95     1.44 1.00     2170     1263 a_cond3         0.57      0.64    -0.46     2.05 1.00     1800     1376 a_cond4         0.56      0.24     0.12     1.07 1.00     2130     1373 c_cond1         4.01      0.15     3.72     4.33 1.00     2130     1549 c_cond2         4.22      0.25     3.76     4.74 1.00     1711     1465 c_cond3         2.17      0.10     1.99     2.38 1.00     1883     1471 c_cond4         1.90      0.13     1.67     2.16 1.00     1573     1400 s_cond1         2.62      0.38     2.05     3.49 1.00     1638     1216 s_cond2         1.70      0.31     1.27     2.46 1.00     1813     1102 s_cond3         1.37      0.14     1.11     1.66 1.00     2084     1237 s_cond4         1.85      0.41     1.26     2.76 1.00     1787     1276  Constant Parameters:                   Value mu1_Intercept      0.00  Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS and Tail_ESS are effective sample size measures, and Rhat is the potential scale reduction factor on split chains (at convergence, Rhat = 1). fixedFX <- brms::fixef(fit)  # print posterior means for the s parameter fixedFX[startsWith(rownames(fixedFX),\"c_\"),] #>         Estimate Est.Error     Q2.5    Q97.5 #> c_cond1 4.006365 0.1540218 3.723778 4.327814 #> c_cond2 4.220944 0.2469081 3.760590 4.737412 #> c_cond3 2.172225 0.0967064 1.992021 2.376198 #> c_cond4 1.896768 0.1253333 1.673340 2.158503  # print posterior means for the s parameter fixedFX[startsWith(rownames(fixedFX),\"a_\"),] #>          Estimate Est.Error       Q2.5    Q97.5 #> a_cond1 0.4849243 0.5245535 -0.4811216 1.622143 #> a_cond2 0.1045386 0.6099981 -0.9481660 1.444586 #> a_cond3 0.5730334 0.6402724 -0.4562681 2.051471 #> a_cond4 0.5638559 0.2443944  0.1168784 1.068508  # print posterior means for the s parameter exp(fixedFX[grepl(\"s_\",rownames(fixedFX)),]) #>          Estimate Est.Error     Q2.5     Q97.5 #> s_cond1 13.798054  1.456866 7.738250 32.941038 #> s_cond2  5.499778  1.358736 3.569686 11.699159 #> s_cond3  3.954253  1.152316 3.030156  5.258137 #> s_cond4  6.368609  1.501818 3.517774 15.857549  # print posterior means for the s parameter exp(fixedFX[grepl(\"kappa_\",rownames(fixedFX)),]) #>              Estimate Est.Error      Q2.5    Q97.5 #> kappa_cond1 14.169354  1.050895 12.863444 15.58298 #> kappa_cond2 10.958754  1.056496  9.830687 12.13389 #> kappa_cond3 14.655252  1.072666 12.816372 16.82502 #> kappa_cond4  9.449505  1.132294  7.210386 11.80726 library(tidybayes) library(dplyr) library(tidyr) library(ggplot2)  # extract the posterior draws draws <- tidybayes::tidy_draws(fit) draws <- select(draws, starts_with(\"b_\")) %>% select(-(1:3)) %>%    mutate_at(vars(starts_with(\"b_s\")),exp) %>%    mutate_at(vars(starts_with(\"b_kappa\")),exp)  # plot posterior with original parameters overlayed as diamonds as.data.frame(draws) %>%    gather(par, value) %>%    ggplot(aes(value, par)) +   tidybayes::stat_halfeyeh(normalize = \"groups\") +   geom_point(data = data.frame(par = colnames(draws),                                value = c(kappas, As, Cs, Ss)),              aes(value,par), color = \"red\",              shape = \"diamond\", size = 2.5) +   scale_x_continuous(lim=c(-1.5,20)) colnames(draws) #>  [1] \"b_kappa_cond1\" \"b_kappa_cond2\" \"b_kappa_cond3\" \"b_kappa_cond4\" #>  [5] \"b_a_cond1\"     \"b_a_cond2\"     \"b_a_cond3\"     \"b_a_cond4\"     #>  [9] \"b_c_cond1\"     \"b_c_cond2\"     \"b_c_cond3\"     \"b_c_cond4\"     #> [13] \"b_s_cond1\"     \"b_s_cond2\"     \"b_s_cond3\"     \"b_s_cond4\""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/articles/mixture_models.html","id":"introduction-to-the-models","dir":"Articles","previous_headings":"","what":"Introduction to the models","title":"Mixture models for visual working memory","text":"two-parameter mixture model (Zhang Luck 2008) three-parameter mixture model (Bays, Catalao, Husain 2009) measurement models continuous reproduction tasks visual working memory domain (details task, see vignette('vwm-crt')). measurement models continuous reproduction tasks, goal model distribution angular response errors. two-parameter mixture model (?mixture2p) distinguishes two memory states lead responses mixture two different distributions angular errors. two states : representation cued object certain precision feature visual working memory (solid blue distribution Figure 1.1) representation visual working memory thus guessing random response (dashed red distribution). Figure 1.1: Mixtures response distributions Responses based noisy memory representation correct feature come circular normal distribution (.e., von Mises) centered correct feature value, guessing responses come uniform distribution along entire circle: \\[ p(\\theta) = p_{mem} \\cdot \\text{vM}(\\theta; \\mu, \\kappa) + (1-p_{mem}) \\cdot \\text{Uniform}(\\theta; -\\pi, \\pi) \\\\ \\] \\[ p_{guess} = 1-p_{mem} \\\\ \\] \\[ vM(\\theta; \\mu, \\kappa) = \\frac{e^{\\kappa \\cos(\\theta - \\mu)}}{2\\pi I_0(\\kappa)} \\] \\(\\theta\\) response angle, \\(p_{mem}\\) probability responses come memory target feature, \\(\\mu\\) mean von Mises distribution representing target feature, \\(\\kappa\\) concentration parameter von Mises distribution, representing precision target memory representation. three-parameter mixture model (?mixture3p) adds third state: confusing cued object another object shown encoding thus reporting feature object (long dashed green distribution Figure 1.1). Responses state sometimes called non-target responses swap errors. non-target responses also come von Mises distribution centered feature non-target object. probability non-target responses represented parameter \\(p_{nt}\\), complete model : \\[ p(\\theta) = p_{mem} \\cdot \\text{vM}(\\theta; \\mu_t, \\kappa) + p_{nt} \\cdot \\frac{\\sum_{=1}^{n} \\text{vM}(\\theta; \\mu_{}, \\kappa)}{n} + (1-p_{mem}-p_{nt}) \\cdot \\text{Uniform}(\\theta; -\\pi, \\pi) \\\\ \\] \\[ p_{guess} = 1-p_{mem}-p_{nt} \\] \\(\\mu_{t}\\) location target feature, \\(\\mu_{}\\) location -th non-target feature, \\(n\\) number non-target features. applications model, responses coded angular error relative target feature. true non-target memory representations, assumed centered target feature, precision non-target memory representation assumed precision target memory representation. version model implemented bmm package: \\[ p(\\theta) = p_{mem} \\cdot \\text{vM}(\\theta; 0, \\kappa) + p_{nt} \\cdot \\frac{\\sum_{=1}^{n}  \\text{vM}(\\theta; \\mu_{}-\\mu_t, \\kappa)}{n} + (1-p_{mem}-p_{nt}) \\cdot \\text{Uniform}(\\theta; -\\pi, \\pi) \\]","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/mixture_models.html","id":"the-data","dir":"Articles","previous_headings":"","what":"The data","title":"Mixture models for visual working memory","text":"Begin loading bmm package: example, analyze data Bays, Catalao, Husain (2009). data included mixtur R package can loaded following command: data contains following columns: : id unique identifier participant setsize number items presented memory array response participant’s recollection target orientation radians target feature value target radians non_target_1 non_target5 feature values non-targets radians trials vary set_size (1, 2, 3 6), also vary encoding duration. fit mixture models bmm, first make sure data correct format. response variable radians represent angular error relative target, non-target variables radians centered relative target. can find requirements help topic ?mixture2p ?mixture3p. dataset, response non-target variables already radians, centered relative target. can check plotting response distribution. memory items selected random trial, non-centered responses show uniform distribution:  can center response non-target variables subtracting target value . can mutate function dplyr package. also need make sure response range \\((-\\pi, \\pi)\\), non-target variables range \\((-\\pi, \\pi)\\). can wrap function bmm package. can see new plot, response distribution now centered 0.  plot can also see performace gets substantially worse increasing set size. Now, can fit two mixture models two understand driving pattern.","code":"library(bmm) # install the mixtur package if you haven't done so # install.packages(\"mixtur\") dat <- mixtur::bays2009_full library(ggplot2) ggplot(dat, aes(response)) +   geom_histogram(binwidth = 0.5, fill = \"lightblue\", color = \"black\") +   labs(title = \"Response distribution\", x = \"Response error (radians)\", y = \"Frequency\") library(dplyr) dat_preprocessed <- dat %>%   mutate(error = wrap(response - target),          non_target_1 = wrap(non_target_1 - target),          non_target_2 = wrap(non_target_2 - target),          non_target_3 = wrap(non_target_3 - target),          non_target_4 = wrap(non_target_4 - target),          non_target_5 = wrap(non_target_5 - target),          set_size = as.factor(set_size))  ggplot(dat_preprocessed, aes(error)) +   geom_histogram(bins=60, fill = \"lightblue\", color = \"black\") +   labs(title = \"Response distribution\", x = \"Response error (radians)\", y = \"Frequency\") +   facet_wrap(~set_size)"},{"path":"https://venpopov.github.io/bmm/dev/articles/mixture_models.html","id":"fitting-the-2-parameter-mixture-model-with-bmm","dir":"Articles","previous_headings":"","what":"Fitting the 2-parameter mixture model with bmm","title":"Mixture models for visual working memory","text":"fit two-parameter mixture model, need specify model formula model. model formula use brms package’s bf function. linear model formulas brms, left side equation refers -predicted variable parameter right side specifies variables used predict . example, want fit model probability memory responses precision memory responses vary set size. also want effect set size vary across participants. model formula three components: response variable error predicted constant term, internally fixed mean 0 precision parameter kappa predicted set size, effect set size varies across participants mixture weight1 memory responses thetat predicted set size, effect set size varies across participants. specify model simply : Finally, fit model fit_model function. fit model function uses brms package fit model, can pass argument pass brm function.","code":"ff <- bmf(thetat ~ 0 + set_size + (0 + set_size | id),           kappa ~ 0 + set_size + (0 + set_size | id)) model <- mixture2p(resp_err = \"error\") fit <- fit_model(   formula = ff,   data = dat_preprocessed,   model = model,   parallel=T,   iter=2000,   refresh=100,   backend='cmdstanr' )"},{"path":"https://venpopov.github.io/bmm/dev/articles/mixture_models.html","id":"results-of-the-2-parameter-mixture-model","dir":"Articles","previous_headings":"","what":"Results of the 2-parameter mixture model","title":"Mixture models for visual working memory","text":"can now inspect model fit: summary shows estimated fixed effects precision mixture weight, well estimated random effects precision mixture weight. Rhat values close 1, good sign chains converged. effective sample sizes also high, means chains mixed well. now want understand estimated parameters. kappa coded within brms log-link function, need exponentiate estimates get precision parameter. can use k2sd function convert precision parameter standard deviation units. thetat mixture weight memory responses. described footnote 1, can use softmax function get probability memory responses. estimates kappa setsize : Standard deviation: Probability responses comes memory: even better visualize entire posterior distribution parameters.  black dot represents median posterior distribution, thick line represents 50% credible interval, thin line represents 95% credible interval.","code":"summary(fit) Model: mixture2p(resp_err = \"error\")    Links: mu1 = identity; kappa = log; thetat = identity  Formula: mu1 = 0          kappa ~ 0 + set_size + (0 + set_size || id)          thetat ~ 0 + set_size + (0 + set_size || id)          mu2 = 0          kappa2 = -100     Data: dat_preprocessed (Number of observations: 7271)   Draws: 2 chains, each with iter = 2000; warmup = 1000; thin = 1;          total post-warmup draws = 2000  Multilevel Hyperparameters: ~id (Number of levels: 12)                       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS sd(kappa_set_size1)      0.36      0.10     0.21     0.58 1.00      685      920 sd(kappa_set_size2)      0.21      0.08     0.08     0.40 1.00      806      786 sd(kappa_set_size4)      0.35      0.12     0.17     0.62 1.00      806     1032 sd(kappa_set_size6)      0.44      0.15     0.21     0.75 1.00      890     1098 sd(thetat_set_size1)     0.54      0.43     0.01     1.64 1.00      660      987 sd(thetat_set_size2)     0.92      0.29     0.50     1.58 1.01      754     1241 sd(thetat_set_size4)     0.96      0.29     0.55     1.62 1.00      661      952 sd(thetat_set_size6)     0.69      0.20     0.40     1.13 1.00      537      822  Regression Coefficients:                  Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS kappa_set_size1      2.88      0.11     2.65     3.10 1.00      659      916 kappa_set_size2      2.40      0.08     2.24     2.55 1.00     1087     1219 kappa_set_size4      2.07      0.13     1.83     2.33 1.00      967      861 kappa_set_size6      1.94      0.15     1.65     2.24 1.00      889     1306 thetat_set_size1     4.51      0.36     3.86     5.31 1.00     1790      946 thetat_set_size2     2.55      0.31     1.95     3.13 1.00      855     1170 thetat_set_size4     1.07      0.31     0.44     1.68 1.00      488      730 thetat_set_size6     0.30      0.22    -0.13     0.75 1.00      673      820  Constant Parameters:                   Value mu1_Intercept      0.00  Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS and Tail_ESS are effective sample size measures, and Rhat is the potential scale reduction factor on split chains (at convergence, Rhat = 1). # extract the fixed effects from the model and determine the rows that contain # the relevant parameter estimates fixedEff <- brms::fixef(fit) thetat <- fixedEff[grepl(\"thetat\",rownames(fixedEff)),] kappa <- fixedEff[grepl(\"kappa_\",rownames(fixedEff)),]  # transform parameters because brms uses special link functions kappa <- exp(kappa) sd <- k2sd(kappa[,1])  pmem <- exp(thetat)/(exp(thetat)+1) pg <- exp(0)/(exp(thetat)+1) kappa #>                  Estimate Est.Error      Q2.5     Q97.5 #> kappa_set_size1 17.878362  1.120400 14.147422 22.141602 #> kappa_set_size2 11.049215  1.080684  9.405554 12.797379 #> kappa_set_size4  7.964096  1.133872  6.259763 10.325856 #> kappa_set_size6  6.981440  1.159402  5.219639  9.359801 names(sd) <- paste0(\"Set size \", c(1,2,4,6)) round(sd,3) #> Set size 1 Set size 2 Set size 4 Set size 6  #>      0.240      0.308      0.367      0.394 rownames(pmem) <- paste0(\"Set size \", c(1,2,4,6)) round(pmem,3) #>            Estimate Est.Error  Q2.5 Q97.5 #> Set size 1    0.989     0.590 0.979 0.995 #> Set size 2    0.928     0.576 0.875 0.958 #> Set size 4    0.745     0.577 0.608 0.843 #> Set size 6    0.575     0.555 0.467 0.678 library(tidybayes) library(tidyr)  # extract the posterior draws draws <- tidybayes::tidy_draws(fit) draws_theta <- select(draws, b_thetat_set_size1:b_thetat_set_size6) draws_kappa <- select(draws, b_kappa_set_size1:b_kappa_set_size6)  # transform parameters because brms uses special link functions draws_theta <- exp(draws_theta)/(exp(draws_theta) + 1) draws_kappa <- exp(draws_kappa)  # plot posterior as.data.frame(draws_theta) %>%    gather(par, value) %>%   mutate(par = gsub(\"b_thetat_set_size\", \"\", par)) %>%   ggplot(aes(par, value)) +   tidybayes::stat_halfeyeh(normalize = \"groups\", orientation = \"vertical\") +   labs(y = \"Probability of memory response\", x = \"Set size\", parse = TRUE)  as.data.frame(draws_kappa) %>%    gather(par, value) %>%   mutate(value = k2sd(value)) %>%    mutate(par = gsub(\"b_kappa_set_size\", \"\", par)) %>%   ggplot(aes(par,value)) +   tidybayes::stat_halfeyeh(normalize = \"groups\", orientation = \"vertical\") +   labs(y = \"Memory imprecision (SD)\", x = \"Set size\", parse = TRUE)"},{"path":"https://venpopov.github.io/bmm/dev/articles/mixture_models.html","id":"fitting-the-3-parameter-mixture-model-with-bmm","dir":"Articles","previous_headings":"","what":"Fitting the 3-parameter mixture model with bmm","title":"Mixture models for visual working memory","text":"Fitting 3-parameter mixture model similar. extra parameter thetant represents mixture weight non-target responses2. also need specify names non-target variables setsize3 variable mixture3p function. run model just like : rest analysis 2-parameter model. can inspect model fit, extract parameter estimates, visualize posterior distributions. example specified column names non_targets explicitely via paste0('non_target_',1:5). Alternatively, can use regular expression match non-target feature columns dataset. useful non-target feature columns named consistent way, e.g. non_target_1, non_target_2, non_target_3, etc. example, can specify model different ways via regular expressions:","code":"ff <- bmf(   thetat ~ 0 + set_size + (0 + set_size | id),   thetant ~ 0 + set_size + (0 + set_size | id),   kappa ~ 0 + set_size + (0 + set_size | id) )  model <- mixture3p(resp_err = \"error\", nt_features = paste0('non_target_',1:5), setsize = 'set_size') fit3p <- fit_model(   formula = ff,   data = dat_preprocessed,   model = model,   parallel=T,   iter=2000,   refresh=100,   backend='cmdstanr' ) model <- mixture3p(resp_err = \"error\",                     nt_features = \"non_target_[1-5]\",                     setsize = 'set_size',                     regex = TRUE) model <- mixture3p(resp_err = \"error\",                     nt_features = \"non_target_\",                     setsize = 'set_size',                     regex = TRUE)"},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/articles/sdm-simple.html","id":"introduction-to-the-model","dir":"Articles","previous_headings":"","what":"Introduction to the model","title":"The Signal Discrimination Model (SDM)","text":"Signal Discrimination Model measurement model continuous reproduction tasks visual working memory domain. model originally introduced Oberauer (2023). measurement models continuous reproduction tasks, ’s goal model distribution angular response errors. model assumes test probe appears, possible responses circle (\\(\\theta\\)) activated strength depends distance feature stored memory (\\(\\mu\\)) response options. Formally, given following activation function: \\[ S(\\theta) = c \\cdot \\frac{\\exp(\\kappa \\cdot \\cos(y-\\mu))}{2\\pi I_0(\\kappa)} \\] \\(c\\) memory strength parameter, \\(\\kappa\\) precision parameter, \\(I_0\\) modified Bessel function first kind order 0. Thus, activation function follows von Mises distribution, weigthed memory strength parameter. activation response options corrupted noise, assumed follow Gumbel distribution. response option highest activation value: \\[ Pr(\\theta) = argmax(S(\\theta) + \\epsilon) \\\\ \\epsilon \\sim Gumbel(0,1) \\] equivalent following softmax function (also known exponentiated Luce’s choice rule): \\[ Pr(\\theta) = \\frac{\\exp(S(\\theta)}{\\sum_{=1}^{n} \\exp(S(\\theta_i))} \\] n number response options, often 360 typical visual working memory experiments. summary, model assumes response errors come following distribution, \\(\\mu = 0\\): \\[ \\Large{f(\\theta\\ |\\ \\mu,c,\\kappa) = \\frac{e^ {c \\ \\frac{e^{k\\ cos(\\theta-\\mu)}}{2\\pi I_o(k)}}}{Z}} \\] Z normalizing constant ensure probability mass sums 1.","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/sdm-simple.html","id":"parametrization-in-the-bmm-package","dir":"Articles","previous_headings":"","what":"Parametrization in the bmm package","title":"The Signal Discrimination Model (SDM)","text":"bmm package use different parametrization. parametrization chosen numerical stability efficiency. Three features parametrization make difficult work practice. First, modified bessel function \\(I_0\\) increases rapidly, often leading numerical overflow. Second, bessel function expensive compute, estimating model MCMC methods can slow. Third, normalizing constant denominator requires summing 360 terms, also slow. address issues, use following parametrization SDM distribution: \\[ \\Large{f(\\theta\\ |\\ \\mu,c,\\kappa) = \\frac{ e^{c \\ \\sqrt{\\frac{k}{2\\pi}} e^{k \\ (cos(\\theta-\\mu)-1)}} }{Z}} \\] parametrization derived known approximation modified bessel function large \\(k\\) (Abramowitz, Stegun, Romer (1988)): \\[ I_0(\\kappa) \\sim ~ \\frac{e^{\\kappa}}{\\sqrt{2\\pi \\kappa}}, \\ \\ \\ \\ \\kappa \\rightarrow \\infty \\] needed, \\(c\\) parameter original formulation Oberauer (2023) can computed : \\[ c_{oberauer} = c_{bmm} \\ e^{-\\kappa} I_0(\\kappa)\\sqrt{2 \\pi \\kappa} \\] parametrization change predicted shape distribution, produces slightly different values \\(c\\) small values \\(kappa\\). parametrization default bmm package. second optimization concerns calculation normalizing constant \\(Z\\). original model assumed responses can one 360 discrete values, resulting probability mass function. bmm treat response variable continuous, makes \\(f(\\theta)\\) probability density function. means can calculate normalizing constant \\(Z\\) integrating \\(f(\\theta)\\) entire circle: \\[ Z = \\int_{-\\pi}^{\\pi} f(\\theta) d\\theta \\] integral expressed closed form, can approximated using numerical integration methods. results discrete continuous formulations nearly identical, large number response options (typical applications), number response options small, example 4-AFC tasks.","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/sdm-simple.html","id":"fitting-the-model-with-bmm","dir":"Articles","previous_headings":"","what":"Fitting the model with bmm","title":"The Signal Discrimination Model (SDM)","text":"Begin loading bmm package:","code":"library(bmm)"},{"path":"https://venpopov.github.io/bmm/dev/articles/sdm-simple.html","id":"generating-simulated-data","dir":"Articles","previous_headings":"3 Fitting the model with bmm","what":"Generating simulated data","title":"The Signal Discrimination Model (SDM)","text":"already data want fit, can skip section. current illustration, generate simulated data equation (??) known parameters. bmm provides density functions typical R style, prefix d density (dsdm), p cumulative distribution function (psdm), q quantile function (qsdm), (rsdm) generating random deviates. ’s simulate data SDM distribution three conditions: gives us following distribution response errors, lines overlaying predicted density generated dsdm:","code":"# set seed for reproducibility set.seed(123)  # define parameters: cs <- c(2, 9, 2) kappas <- c(3, 1, 8)  # simulate data from the model y <- c(rsdm(n = 1000, mu=0, c = cs[1], kappa = kappas[1], parametrization = \"sqrtexp\"),        rsdm(n = 1000, mu=0, c = cs[2], kappa = kappas[2], parametrization = \"sqrtexp\"),        rsdm(n = 1000, mu=0, c = cs[3], kappa = kappas[3], parametrization = \"sqrtexp\")) dat <- data.frame(y = y,                   cond = factor(rep(c('A','B','C'), each=1000))) # generate predicted SDM density: dd <- data.frame(y = rep(seq(-pi, pi, length.out=1000),3),                  cond = factor(rep(c('A','B','C'), each=1000)),                  c = rep(cs, each=1000),                  kappa = rep(kappas, each=1000)) dd$d <- dsdm(dd$y, mu=0, c=dd$c, kappa=dd$kappa, parametrization = \"sqrtexp\")  # prepare labels for plots par_labels <- data.frame(cond = c('A','B','C'),                          c = c(2, 9, 2),                          kappa = c(3, 1, 8)) par_labels$label <- paste0('c = ', par_labels$c, '\\nkappa = ', par_labels$kappa)  # plot the data and the predicted density library(ggplot2) ggplot(dat, aes(x=y, fill=cond)) +   geom_histogram(aes(y=..density..), binwidth = 0.1, position = \"identity\", alpha=0.5) +   theme_classic() +   facet_wrap(~cond) +   geom_line(data=dd, fun=dsdm, aes(y, d)) +   scale_x_continuous(limits = c(-pi, pi)) +   labs(title = \"Simulated data from the SDM distribution\",        x = \"Response error (radians)\",        y = \"Density\") +   geom_text(data=par_labels, aes(x=-pi, y=0.5, label=label), hjust=0, vjust=0, size=3)"},{"path":"https://venpopov.github.io/bmm/dev/articles/sdm-simple.html","id":"estimating-the-model-with-bmm","dir":"Articles","previous_headings":"3 Fitting the model with bmm","what":"Estimating the model with bmm","title":"The Signal Discrimination Model (SDM)","text":"estimate parameters SDM distribution, can use fit_model() function. First, let’s specify model formula. want c kappa vary conditions. first two lines formula specify parameters vary conditions. case, want vary cond variable, use c ~ 0 + cond kappa ~ 0 + cond: specify model, case just sdmSimple(), provide name response error variable dataset: Finally, can fit model. strongly recommend using cmdstanr backend fitting SDM model, much faster stable default rstan backend particular model. ’s fit model cmdstanr: model takes 30 seconds fit compiled. can now inspect results model fit: see Rhat values less 1.01, good sign chains converged. principle inspection, let us see estimated parameters. model uses log-link function c kappa parameters, exponentiate coefficients get estimated parameters: close true values used simulate data: can see even though estimated parameters close, exactly true parameters. get better picture, can plot estimated posterior distributions parameters:  true parameters lie within 50% credible intervals, good sign model able recover true parameters data. final step, can plot data , adding another line overlay density predicted estimated parameters:  histograms represent data, black lines represent predicted density true parameters, red lines represent predicted density estimated parameters. can see estimated parameters able capture main features data.","code":"ff <- bmf(   c ~ 0 + cond,   kappa ~ 0 + cond ) model <- sdmSimple(resp_err = \"y\") fit <- fit_model(   formula = ff,   data = dat,   model = model,   parallel = T,   chains = 4,   init = 0.5,   iter = 2000,   backend='cmdstanr' ) summary(fit) Model: sdmSimple(resp_err = \"y\")    Links: mu = identity; c = log; kappa = log  Formula: mu = 0          c ~ 0 + cond          kappa ~ 0 + cond     Data: dat (Number of observations: 3000)   Draws: 2 chains, each with iter = 2000; warmup = 1000; thin = 1;          total post-warmup draws = 2000  Regression Coefficients:             Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS c_condA         0.71      0.11     0.50     0.92 1.00     1068      867 c_condB         2.30      0.16     2.01     2.64 1.00     1031     1044 c_condC         0.65      0.06     0.54     0.77 1.00     1161     1320 kappa_condA     0.99      0.17     0.65     1.32 1.00     1084      965 kappa_condB    -0.06      0.16    -0.38     0.24 1.00     1049     1068 kappa_condC     2.12      0.11     1.92     2.33 1.00     1103     1268  Constant Parameters:                  Value mu_Intercept      0.00  Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS and Tail_ESS are effective sample size measures, and Rhat is the potential scale reduction factor on split chains (at convergence, Rhat = 1). exp(brms::fixef(fit)[2:7,1]) #>     c_condA     c_condB     c_condC kappa_condA kappa_condB kappa_condC  #>   2.0267546   9.9572058   1.9222065   2.6855853   0.9445482   8.3574474 par_labels[,1:3] #>   cond c kappa #> 1    A 2     3 #> 2    B 9     1 #> 3    C 2     8 library(tidybayes) library(dplyr) library(tidyr)  # extract the posterior draws draws <- tidybayes::tidy_draws(fit) draws <- select(draws, b_c_condA:b_kappa_condC)  # plot posterior with original parameters overlayed as diamonds as.data.frame(draws) %>%    gather(par, value) %>%    mutate(value = exp(value)) %>%    ggplot(aes(value, par)) +   tidybayes::stat_halfeyeh(normalize = \"groups\") +   geom_point(data = data.frame(par = c('b_c_condA','b_c_condB','b_c_condC',                                        'b_kappa_condA','b_kappa_condB','b_kappa_condC'),                                value = c(cs, kappas)),              aes(value,par), color = \"red\",              shape = \"diamond\", size = 2.5) +   scale_x_continuous(lim=c(0,20)) # generate predicted SDM density: ddest <- data.frame(y = rep(seq(-pi, pi, length.out=1000),3),                     cond = factor(rep(c('A','B','C'), each=1000)),                     c = rep(exp(brms::fixef(fit)[2:4,1]), each=1000),                     kappa = rep(exp(brms::fixef(fit)[5:7,1]), each=1000))  # prepare labels for plots par_labels <- data.frame(cond = c('A','B','C'),                          c_est = exp(brms::fixef(fit)[2:4,1]),                          kappa_est = exp(brms::fixef(fit)[5:7,1]),                          c = c(2, 9, 2),                          kappa = c(3, 1, 8)) par_labels$label <- paste0('c = ', par_labels$c, ' (estimate = ', round(par_labels$c_est,2), ')\\n',                            'kappa = ', par_labels$kappa, ' (estimate = ', round(par_labels$kappa_est,2), ')')  ddest$d <- dsdm(ddest$y, mu=0, c=ddest$c, kappa=ddest$kappa, parametrization = \"sqrtexp\")  # plot the data and the predicted density ggplot(dat, aes(x=y, fill=cond)) +   geom_histogram(aes(y=..density..), binwidth = 0.1, position = \"identity\", alpha=0.5) +   theme_classic() +   facet_wrap(~cond) +   geom_line(data=dd, fun=dsdm, aes(y, d), color='black') +   geom_line(data=ddest, fun=dsdm, aes(y, d), color='red') +   scale_x_continuous(limits = c(-pi, pi)) +   labs(title = \"Simulated data from the SDM distribution\",        x = \"Response error (radians)\",        y = \"Density\") +   geom_text(data=par_labels, aes(x=-pi, y=0.9, label=label), hjust=0, vjust=0, size=3) +   scale_y_continuous(limits = c(0,1))"},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/articles/vwm-crt.html","id":"task-description","dir":"Articles","previous_headings":"","what":"Task description","title":"Continuous reproduction tasks (CRT)","text":"research visual working memory participants often asked remember reproduce continuous features visual objects color orientation. continuous reproduction task (sometimes also called delayed estimation task), participants encode set visual objects visual working memory asked reproduce specific feature one cued object continuous scale test (see Figure 1.1 illustration). often features used tasks colors sampled color wheel (Wilken Ma 2004) continuous orientations bar triangle (Bays et al. 2011). set --remembered objects typically consists one eight objects spatially distributed screen. Thus, participants must associate --remembered features (e.g. color orientation) spatial locations presented . precision representation object’s feature visual working memory measured angular deviation true feature presented encoding. Figure 1.1: typical continuous reproduction task","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/vwm-crt.html","id":"the-role-of-measurement-models","dir":"Articles","previous_headings":"","what":"The role of measurement models","title":"Continuous reproduction tasks (CRT)","text":"continuous reproduction tasks, simplest measure performance average angle deviation response true feature value. many studies, average recall error main dependent variable evaluating effect experimental manipulations. Yet, average recall error confounds different properties memory representations sufficiently represent theoretical processes assumed current models visual working memory. Therefore, different measurement models proposed formalize distinct aspects visual working memory models translate observed behavior. measurement model statistical model describes relationship latent cognitive processes observed behavior. continuous reproduction tasks, measurement models provide refined representation memory processes decompose average recall error several theoretically meaningful parameters. core models assumption responses continuous reproduction tasks can stem different distributions depending continuous activation different memory representation cognitive state person recall.","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/vwm-crt.html","id":"crt-models-in-the-bmm-package","dir":"Articles","previous_headings":"","what":"CRT Models in the bmm package","title":"Continuous reproduction tasks (CRT)","text":"bmm package implements several measurement models analyzing continuous reproduction data:","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/vwm-crt.html","id":"the-two-parameter-mixture-model-zhang_luck_2008","dir":"Articles","previous_headings":"3 CRT Models in the bmm package","what":"The two-parameter mixture model (Zhang and Luck 2008)","title":"Continuous reproduction tasks (CRT)","text":"see ?mixture2p vignette(\"mixture_models\")","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/vwm-crt.html","id":"the-three-parameter-mixture-model-bays_catalao_husain_2009","dir":"Articles","previous_headings":"3 CRT Models in the bmm package","what":"The three-parameter mixture model (Bays, Catalao, and Husain 2009)","title":"Continuous reproduction tasks (CRT)","text":"see ?mixture3p vignette(\"mixture_models\")","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/vwm-crt.html","id":"the-interference-measurement-model-oberauer_lin_2017","dir":"Articles","previous_headings":"3 CRT Models in the bmm package","what":"The Interference Measurement Model (Oberauer and Lin 2017)","title":"Continuous reproduction tasks (CRT)","text":"see ?IMM vignette(\"imm\")","code":""},{"path":"https://venpopov.github.io/bmm/dev/articles/vwm-crt.html","id":"the-signal-discrimination-model-sdm-by-oberauer_2023","dir":"Articles","previous_headings":"3 CRT Models in the bmm package","what":"The Signal Discrimination Model (SDM) by (Oberauer 2023)","title":"Continuous reproduction tasks (CRT)","text":"see ?sdmSimple vignette(\"sdm-simple\")","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vencislav Popov. Author, maintainer, copyright holder. Gidon Frischkorn. Author, copyright holder. Paul Bürkner. Copyright holder.            Creator brms, package Bayesian regression model package builds upon.","code":""},{"path":"https://venpopov.github.io/bmm/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Frischkorn GT, Popov V (2023). “tutorial estimating mixture models visual working memory tasks brms: Introducing Bayesian Measurement Modeling (bmm) package R.” PsyArXiv. doi:10.31234/osf.io/umt57.","code":"@Article{,   title = {A tutorial for estimating mixture models for visual working memory tasks in brms: Introducing the Bayesian Measurement Modeling (bmm) package for R},   author = {Gidon T. Frischkorn and Vencislav Popov},   journal = {PsyArXiv},   year = {2023},   doi = {10.31234/osf.io/umt57}, }"},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Easy and Accesible Bayesian Measurement Models using brms","text":"goal bmm (Bayesian Measurement Models) package make easier estimate common cognitive measurement models behavioral research. achieves combining flexibility ‘brms’ package specifying linear model syntax custom functions translate cognitive measurement model distributional families can estimated using Bayesian hierarchical estimation. Cognitive measurement models provide refined representation cognitive processes underlying observed behavior, decompose observed behavior several theoretically meaningful parameters represent distinct cognitive processes.","code":""},{"path":"https://venpopov.github.io/bmm/dev/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Easy and Accesible Bayesian Measurement Models using brms","text":"See following sections information bmm package: Available models install bmm Fitting models using bmm Exploring cogntive measurement models general structure bmm package Contributing bmm package","code":""},{"path":"https://venpopov.github.io/bmm/dev/index.html","id":"available-models","dir":"","previous_headings":"","what":"Available models","title":"Easy and Accesible Bayesian Measurement Models using brms","text":"Currently bmm package implements mainly models used domain visual working memory research: Visual working memory Interference measurement model Oberauer Lin (2017). Two-parameter mixture model Zhang Luck (2008). Three-parameter mixture model Bays et al (2009). Signal Discrimination Model (SDM) Oberauer (2023) However, setup bmm package provides foundation implementation broad range cognitive measurement models. fact, already working implementing additional models, : Signal-Detection Models Evidence Accumulation Models Memory Models categorical response suggestions models added package, feel free create issue. Ideally describe model, point towards literature gives details model, possible link code already implemented model. Given dynamic nature bmm package currently , can always view latest list supported models running:","code":"bmm::supported_models() #> The following models are supported: #>  #> -  IMMabc(resp_err, nt_features, setsize, regex, links)  #> -  IMMbsc(resp_err, nt_features, nt_distances, setsize, regex, links)  #> -  IMMfull(resp_err, nt_features, nt_distances, setsize, regex, links)  #> -  mixture2p(resp_err, links)  #> -  mixture3p(resp_err, nt_features, setsize, regex, links)  #> -  sdmSimple(resp_err, links)  #>  #> Type  ?modelname  to get information about a specific model, e.g.  ?IMMfull"},{"path":"https://venpopov.github.io/bmm/dev/index.html","id":"how-to-install-bmm","dir":"","previous_headings":"","what":"How to install bmm","title":"Easy and Accesible Bayesian Measurement Models using brms","text":"Currently, working getting package ready submitted CRAN. , can install latest version package GitHub. bmm based brms stan requires working C++ compiler. used brms , need first install dependencies. already using brms, can skip step.  Install configure C++ compiler. Detailed instructions Install rstan /cmdstanr. recommend using cmdstanr. Install brms Install bmm described next already using brms, good go can install package described one options :  install vignettes, take long time build, available bmm website.   package significantly updated Feb 03, 2024. following older versions (earlier Version 6) Tutorial preprint, need install 0.0.1 version bmm package :","code":"install.packages('bmm', repos = c('https://popov-lab.r-universe.dev')) if (!requireNamespace(\"remotes\")) {   install.packages(\"remotes\") } remotes::install_github(\"venpopov/bmm\") if (!requireNamespace(\"remotes\")) {   install.packages(\"remotes\") } remotes::install_github(\"venpopov/bmm@v0.0.1\")"},{"path":"https://venpopov.github.io/bmm/dev/index.html","id":"fitting-models-using-bmm","dir":"","previous_headings":"","what":"Fitting models using bmm","title":"Easy and Accesible Bayesian Measurement Models using brms","text":"core function bmm package fit_model() function. function takes: linear model formula specifying parameters model vary function experimental conditions data containing dependent variables, variables predicting model parameters, potentially additional variables providing information identify model model fit can get detailed information models implemented bmm invoking documentation model typing ?bmmmodel console. example, calling information full version Interference Measurement Model look like : complete call fit model using bmm look like . example, using OberauerLin_2017 data provided package. quick example, show setup fitting Interference Measurement Model data. want detailed description model depth explanation parameters estimated model, please look vignette(\"IMM\"). Using call, fit object save information fitted model. bmm calls brms fit models, objects can handled way normal brmsfit object handled: can look examples fit currently implemented models reading vignettes model released version package development version.","code":"?IMMfull library(bmm) data <- OberauerLin_2017 model_formula <- bmmformula(c ~ 0 + set_size,                             a ~ 0 + set_size,                             s ~ 0 + set_size,                             kappa ~ 0 + set_size)  model <- IMMfull(resp_err = \"dev_rad\",                  nt_features = paste0(\"col_nt\", 1:7),                  nt_distances = paste0(\"dist_nt\",1:7),                  setsize = \"set_size\")  fit <- fit_model(   formula = model_formula,   data = data,   model = model ) # print summary summary(fit)  # plot posterior predicitive plot brms::pp_check(fit)"},{"path":"https://venpopov.github.io/bmm/dev/index.html","id":"exploring-cogntive-measurement-models","dir":"","previous_headings":"","what":"Exploring cogntive measurement models","title":"Easy and Accesible Bayesian Measurement Models using brms","text":"aid users improving intuition different models predict observed data given certain parameter set, bmm package also includes density random generation function implemented models. function provide easy way see model predicts data given certain set parameters. example can easily plot probability density function data Interference Measurement model using dIMM function. similar fashion random generation function included model, generates random data based set data generating parameters. IMM, can use rIMM generate data given set parameters. Plotting random data density illustrates data follows theoretically implied density.","code":"library(ggplot2)  simData <- data.frame(   x = bmm::rIMM(n = 500,                 mu = c(0,-1.5,2.5,1),                 dist = c(0, 2, 0.3, 1),                 c = 1.5, a = 0.3, b = 0, s = 2, kappa = 10) )  ggplot(data = simData, aes(x = x)) +   geom_histogram(aes(y = after_stat(density))) +   geom_function(fun = bmm::dIMM,                 args = list(mu = c(0,-1.5,2.5,1),                             dist = c(0, 2, 0.3, 1),                             c = 1.5, a = 0.3, b = 0, s = 2, kappa = 10)) +   scale_x_continuous(limits = c(-pi,pi))"},{"path":"https://venpopov.github.io/bmm/dev/index.html","id":"the-general-structure-of-the-bmm-package","dir":"","previous_headings":"","what":"The general structure of the bmm package","title":"Easy and Accesible Bayesian Measurement Models using brms","text":"main building block bmm package cognitive measurement models can often specified distributional models distributional parameters generalized linear mixed model function cognitive measurement model parameters. functions translate cognitive measurement model parameters distributional parameters implement bmm package.  function can become complicated implementation changes differences experimental designs, bmm package provides general translation functions eases use cognitive measurement models end users. way researchers face challenges writing STAN code implement models can still use models almost experimental design. hood, main bmm fit_model() function call appropriate functions specified model perform several steps: Configure Sample (e.g., set prallelization) model installed required arguments provided valid formula passed data contains necessary variables Configure called model (including specifying priors necessary) Calling brms passing specified arguments Posprocessing output passing user process illustrated Figure :","code":""},{"path":"https://venpopov.github.io/bmm/dev/index.html","id":"contributing-to-the-bmm-package","dir":"","previous_headings":"","what":"Contributing to the bmm package","title":"Easy and Accesible Bayesian Measurement Models using brms","text":"interested contributing model bmm package, first look Developer Notes. give depth description package architecture steps necessary add model package.","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/pull_request_template.html","id":"tests","dir":"","previous_headings":"","what":"Tests","title":"NA","text":"[] Confirm tests passed [] Confirm devtools::check() produces errors","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/IMM.html","id":null,"dir":"Reference","previous_headings":"","what":"Interference measurement model by Oberauer and Lin (2017). — IMM","title":"Interference measurement model by Oberauer and Lin (2017). — IMM","text":"Interference measurement model Oberauer Lin (2017).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interference measurement model by Oberauer and Lin (2017). — IMM","text":"","code":"IMMfull(   resp_err,   nt_features,   nt_distances,   setsize,   regex = FALSE,   links = NULL,   ... )  IMMbsc(   resp_err,   nt_features,   nt_distances,   setsize,   regex = FALSE,   links = NULL,   ... )  IMMabc(resp_err, nt_features, setsize, regex = FALSE, links = NULL, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/IMM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interference measurement model by Oberauer and Lin (2017). — IMM","text":"resp_err name variable provided dataset containing response error. response Error code response relative --recalled target radians. can transform response error degrees radian using deg2rad function. nt_features character vector names non-target variables. non_target variables radians centered relative target. Alternatively, regex=TRUE, regular expression can used match non-target feature columns dataset. nt_distances vector names columns containing distances non-target items target item. Alternatively, regex=TRUE, regular expression can used match non-target distances columns dataset. necessary IMMbsc IMMfull models. setsize Name column containing set size variable (setsize varies) numeric value setsize, setsize fixed. regex Logical. TRUE, nt_features nt_distances arguments interpreted regular expression match non-target feature columns dataset. links list links parameters. Currently affect model fits, future. ... used internally testing, ignore ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interference measurement model by Oberauer and Lin (2017). — IMM","text":"object class bmmmodel","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interference measurement model by Oberauer and Lin (2017). — IMM","text":"Domain: Visual working memory Task: Continuous reproduction Name: Interference measurement model Oberauer Lin (2017). Citation: Oberauer, K., & Lin, H.Y. (2017). interference model visual working memory. Psychological Review, 124(1), 21-59","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMM.html","id":"version-immfull","dir":"Reference","previous_headings":"","what":"Version: IMMfull","title":"Interference measurement model by Oberauer and Lin (2017). — IMM","text":"Requirements: response vairable radians represent angular error relative target non-target features radians centered relative target Parameters: mu1: Location parameter von Mises distribution memory responses (radians). Fixed internally 0 default. kappa: Concentration parameter von Mises distribution : General activation memory items c: Context activation s: Spatial similarity gradient Fixed parameters: mu1 = 0 mu2 = 0 kappa2 = -100","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMM.html","id":"version-immbsc","dir":"Reference","previous_headings":"","what":"Version: IMMbsc","title":"Interference measurement model by Oberauer and Lin (2017). — IMM","text":"Requirements: response vairable radians represent angular error relative target non-target features radians centered relative target Parameters: mu1: Location parameter von Mises distribution memory responses (radians). Fixed internally 0 default. kappa: Concentration parameter von Mises distribution c: Context activation s: Spatial similarity gradient Fixed parameters: mu1 = 0 mu2 = 0 kappa2 = -100","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMM.html","id":"version-immabc","dir":"Reference","previous_headings":"","what":"Version: IMMabc","title":"Interference measurement model by Oberauer and Lin (2017). — IMM","text":"Requirements: response vairable radians represent angular error relative target non-target features radians centered relative target Parameters: mu1: Location parameter von Mises distribution memory responses (radians). Fixed internally 0 default. kappa: Concentration parameter von Mises distribution : General activation memory items c: Context activation Fixed parameters: mu1 = 0 mu2 = 0 kappa2 = -100 Additionally, IMM models internal parameter fixed 0 allow model identifiable. parameter estimated included model formula. parameter : b = \"Background activation (internally fixed 0)\"","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interference measurement model by Oberauer and Lin (2017). — IMM","text":"","code":"if (FALSE) { # load data data <- OberauerLin_2017  # define formula ff <- bmmformula(   kappa ~ 0 + set_size,   c ~ 0 + set_size,   a ~ 0 + set_size,   s ~ 0 + set_size )  # specify the full IMM model with explicit column names for non-target features and distances model1 <- IMMfull(resp_err = \"dev_rad\",                   nt_features = paste0('col_nt',1:7),                   nt_distances = paste0('dist_nt',1:7),                   setsize = 'set_size')  # fit the model fit <- fit_model(formula = ff,                  data = data,                  model = model1,                  parallel = T,                  iter = 500,                  backend = 'cmdstanr')  # alternatively specify the IMM model with a regular expression to match non-target features # this is equivalent to the previous call, but more concise model2 <- IMMfull(resp_err = \"dev_rad\",                   nt_features = 'col_nt',                   nt_distances = 'dist_nt',                   setsize = 'set_size',                   regex = TRUE)  # fit the model fit <- fit_model(formula = ff,                  data = data,                  model = model2,                  parallel=T,                  iter = 500,                  backend='cmdstanr') }"},{"path":"https://venpopov.github.io/bmm/dev/reference/IMMdist.html","id":null,"dir":"Reference","previous_headings":"","what":"The Interference Measurement Model (IMM) — IMMdist","title":"The Interference Measurement Model (IMM) — IMMdist","text":"Density, distribution, random generation functions interference measurement model location mu, strength cue- dependent activation c, strength cue-independent activation , generalization gradient s, precision memory representations kappa.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMMdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Interference Measurement Model (IMM) — IMMdist","text":"","code":"dIMM(   x,   mu = c(0, 2, -1.5),   dist = c(0, 0.5, 2),   c = 1,   a = 0.2,   b = 0,   s = 2,   kappa = 5,   log = FALSE )  pIMM(   q,   mu = c(0, 2, -1.5),   dist = c(0, 0.5, 2),   c = 1,   a = 0.2,   b = 0,   s = 2,   kappa = 5 )  qIMM(   p,   mu = c(0, 2, -1.5),   dist = c(0, 0.5, 2),   c = 1,   a = 0.2,   b = 0,   s = 2,   kappa = 5 )  rIMM(   n,   mu = c(0, 2, -1.5),   dist = c(0, 0.5, 2),   c = 1,   a = 0.2,   b = 0,   s = 2,   kappa = 5 )"},{"path":"https://venpopov.github.io/bmm/dev/reference/IMMdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Interference Measurement Model (IMM) — IMMdist","text":"x Vector observed responses mu Vector locations dist Vector distances item locations cued location c Vector strengths cue-dependent activation Vector strengths cue-independent activation b Vector baseline activation s Vector generalization gradients kappa Vector precision values log Logical; TRUE, values returned log scale. q Vector quantiles p Vector probability n Number observations generate data ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMMdist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Interference Measurement Model (IMM) — IMMdist","text":"dIMM gives density interference measurement model, pIMM gives cumulative distribution function interference measurement model, qIMM gives quantile function interference measurement model, rIMM gives random generation function interference measurement model.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMMdist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Interference Measurement Model (IMM) — IMMdist","text":"Oberauer, K., Stoneking, C., Wabersich, D., & Lin, H.-Y. (2017). Hierarchical Bayesian measurement models continuous reproduction visual features working memory. Journal Vision, 17(5), 11.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/IMMdist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Interference Measurement Model (IMM) — IMMdist","text":"","code":"# example code"},{"path":"https://venpopov.github.io/bmm/dev/reference/OberauerLin_2017.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Experiment 1 reported by Oberauer & Lin (2017) — OberauerLin_2017","title":"Data from Experiment 1 reported by Oberauer & Lin (2017) — OberauerLin_2017","text":"Raw data 19 subjects completed continuous reproduction task set size 1 8 reported Oberauer & Lin (2017).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/OberauerLin_2017.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from Experiment 1 reported by Oberauer & Lin (2017) — OberauerLin_2017","text":"","code":"OberauerLin_2017"},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/OberauerLin_2017.html","id":"oberauerlin-","dir":"Reference","previous_headings":"","what":"OberauerLin_2017","title":"Data from Experiment 1 reported by Oberauer & Lin (2017) — OberauerLin_2017","text":"data frame 15,200 rows 39 columns: ID Integer uniquely identifying different subjects session Session number trial Trial number within session set_size setsize data row dev_rad response error, difference response given target color radians. col_nt1,col_nt2,col_nt3,col_nt4,col_nt5,col_nt6_Col,col_nt7 non-target items' color value relative target. dist_nt1,dist_nt2,dist_nt3,dist_nt4,dist_nt5,dist_nt6_Pos,dist_nt7,dist_nt8 spatial distance non-target items target item radians.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/OberauerLin_2017.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data from Experiment 1 reported by Oberauer & Lin (2017) — OberauerLin_2017","text":"https://osf.io/m4shu","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDM.html","id":null,"dir":"Reference","previous_headings":"","what":"Signal Discrimination Model (SDM) by Oberauer (2023) — SDM","title":"Signal Discrimination Model (SDM) by Oberauer (2023) — SDM","text":"Signal Discrimination Model (SDM) Oberauer (2023)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signal Discrimination Model (SDM) by Oberauer (2023) — SDM","text":"","code":"sdmSimple(resp_err, links = NULL, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/SDM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signal Discrimination Model (SDM) by Oberauer (2023) — SDM","text":"resp_err name variable dataset containing response error. response error code response relative --recalled target radians. can transform response error degrees radians using deg2rad function. links list links parameters. Currently affect model fits, future. ... used internally testing, ignore ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Signal Discrimination Model (SDM) by Oberauer (2023) — SDM","text":"object class bmmmodel","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Signal Discrimination Model (SDM) by Oberauer (2023) — SDM","text":"see vignette(\"sdm-simple\") detailed description model use . Domain: Visual working memory Task: Continuous reproduction Name: Signal Discrimination Model (SDM) Oberauer (2023) Citation: Oberauer, K. (2023). Measurement models visual working memory - factorial model comparison. Psychological Review, 130(3), 841-852 Version: Simple (non-targets) Requirements: response variable radians represent angular error relative target Parameters: mu: Location parameter SDM distribution (radians; default fixed internally 0) c: Memory strength parameter SDM distribution kappa: Precision parameter SDM distribution Fixed parameters: mu = 0 Default parameter links: mu = identity; c = log; kappa = log","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Signal Discrimination Model (SDM) by Oberauer (2023) — SDM","text":"","code":"if (FALSE) { # simulate data from the model library(bmm) library(brms) dat <- data.frame(y = rsdm(n = 1000, c = 4, kappa = 3))  # specify formula ff <- bmf(c ~ 1,           kappa ~ 1)  # specify prior prior <- prior(normal(1,2), class='Intercept', dpar='c')+    prior(normal(1,2), class='Intercept', dpar='kappa')  # specify the model fit <- fit_model(formula = ff,                  data = dat,                  model = sdmSimple(resp_err = 'y'),                  prior = prior,                  parallel=T,                  iter=2000,                  backend='cmdstanr')  # extract coefficients and plot fit coef <- exp(brms::fixef(fit)[2:3,1]) hist(dat$y, breaks=60, freq=F) x <- seq(-pi,pi,0.01) lines(x, dsdm(x, mu=0, c=coef['c_Intercept'],               kappa=coef['kappa_Intercept']), col='red') }"},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":null,"dir":"Reference","previous_headings":"","what":"The Signal Discrimination Model (SDM) Distribution — SDMdist","title":"The Signal Discrimination Model (SDM) Distribution — SDMdist","text":"Density, distribution function, random generation Signal Discrimination Model (SDM) Distribution location mu, memory strength c, precision kappa. Currently single activation source supported.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Signal Discrimination Model (SDM) Distribution — SDMdist","text":"","code":"dsdm(x, mu = 0, c = 3, kappa = 3.5, log = FALSE, parametrization = \"sqrtexp\")  psdm(   q,   mu = 0,   c = 3,   kappa = 3.5,   lower.tail = TRUE,   log.p = FALSE,   lower.bound = -pi,   parametrization = \"sqrtexp\" )  qsdm(p, mu = 0, c = 3, kappa = 3.5, parametrization = \"sqrtexp\")  rsdm(n, mu = 0, c = 3, kappa = 3.5, parametrization = \"sqrtexp\")"},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Signal Discrimination Model (SDM) Distribution — SDMdist","text":"x Vector quantiles mu Vector location values radians c Vector memory strength values kappa Vector precision values log Logical; TRUE, values returned log scale. parametrization Character; either \"bessel\" \"sqrtexp\" (default). See vignette(\"sdm-simple\") details parameterization. q Vector quantiles lower.tail Logical; TRUE (default), return P(X <= x). Else, return P(X > x) log.p Logical; TRUE, probabilities returned log scale. lower.bound Numeric; Lower bound integration cumulative distribution p Vector probabilities n Number observations sample","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Signal Discrimination Model (SDM) Distribution — SDMdist","text":"dsdm gives density, psdm gives distribution function, qsdm gives quantile function, rsdm generates random deviates, .dsdm_integrate helper function calculating density SDM distribution.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Signal Discrimination Model (SDM) Distribution — SDMdist","text":"Parametrization See vignette(\"sdm-simple\") details parameterization. Oberauer (2023) introduced SDM bessel parametrization. sqrtexp parametrization default bmm package numerical stability efficiency. two parametrizations related functions c_bessel2sqrtexp() c_sqrtexp2bessel(). cumulative distribution function Since responses circle, cumulative distribution function requires choose lower bound integration. default \\(-\\pi\\), brms::pvon_mises() function can choose value argument lower_bound psdm. Another useful choice mean response distribution minus \\(\\pi\\), e.g. lower_bound = mu-pi. default circular::pvonmises(), ensures 50% cumulative probability mass mean response distribution.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Signal Discrimination Model (SDM) Distribution — SDMdist","text":"Oberauer, K. (2023). Measurement models visual working memory - factorial model comparison. Psychological Review, 130(3), 841–852","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/SDMdist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Signal Discrimination Model (SDM) Distribution — SDMdist","text":"","code":"# plot the density of the SDM distribution x <- seq(-pi,pi,length.out=10000) plot(x,dsdm(x,0,2,3),type=\"l\", xlim=c(-pi,pi),ylim=c(0,1),      xlab=\"Angle error (radians)\",      ylab=\"density\",      main=\"SDM density\") lines(x,dsdm(x,0,9,1),col=\"red\") lines(x,dsdm(x,0,2,8),col=\"green\") legend(\"topright\",c(\"c=2, kappa=3.0, mu=0\",                     \"c=9, kappa=1.0, mu=0\",                     \"c=2, kappa=8, mu=1\"),        col=c(\"black\",\"red\",\"green\"),lty=1, cex=0.8)   # plot the cumulative distribution function of the SDM distribution p <- psdm(x, mu = 0, c = 3.1, kappa = 5) plot(x,p,type=\"l\")   # generate random deviates from the SDM distribution and overlay the density r <- rsdm(10000, mu = 0, c = 3.1, kappa = 5) d <- dsdm(x, mu = 0, c = 3.1, kappa = 5) hist(r, breaks=60, freq=FALSE) lines(x,d,type=\"l\", col=\"red\")"},{"path":"https://venpopov.github.io/bmm/dev/reference/ZhangLuck_2008.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Experiment 2 reported by Zhang & Luck (2008) — ZhangLuck_2008","title":"Data from Experiment 2 reported by Zhang & Luck (2008) — ZhangLuck_2008","text":"Raw data 8 subjects response error continuous reproduction task set size 1, 2, 3, 6 reported Zhang & Luck (2008).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/ZhangLuck_2008.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from Experiment 2 reported by Zhang & Luck (2008) — ZhangLuck_2008","text":"","code":"ZhangLuck_2008"},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/ZhangLuck_2008.html","id":"zhangluck-","dir":"Reference","previous_headings":"","what":"ZhangLuck_2008","title":"Data from Experiment 2 reported by Zhang & Luck (2008) — ZhangLuck_2008","text":"data frame 4,000 rows 9 columns: subID Integer uniquely identifying different subjects trial Trial identifyier setsize setsize data row response_error response error, difference response given target color radians. col_lure1, col_Lure2, col_Lure3, col_Lure4, col_Lure5 Color value lure items coded relative target color.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/ZhangLuck_2008.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data from Experiment 2 reported by Zhang & Luck (2008) — ZhangLuck_2008","text":"https://www.nature.com/articles/nature06860","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmf2bf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert bmmformula objects to brmsformula objects — bmf2bf","title":"Convert bmmformula objects to brmsformula objects — bmf2bf","text":"Called configure_model() inside fit_model() convert bmmformula brmsformula based information model object. call appropriate bmf2bf.\\* methods based classes defined model_\\* function.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmf2bf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert bmmformula objects to brmsformula objects — bmf2bf","text":"","code":"bmf2bf(model, formula)"},{"path":"https://venpopov.github.io/bmm/dev/reference/bmf2bf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert bmmformula objects to brmsformula objects — bmf2bf","text":"model model object defining one supported `bmmmodels`` formula bmmformula converted brmsformula","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmf2bf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert bmmformula objects to brmsformula objects — bmf2bf","text":"brmsformula defining response variables additional parameter formulas specified bmmmodel","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmf2bf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert bmmformula objects to brmsformula objects — bmf2bf","text":"","code":"model <- mixture2p(resp_err = \"error\")    formula <- bmmformula(     thetat ~ 0 + setsize + (0 + setsize | id),     kappa ~ 1 + (1 | id)   )    brms_formula <- bmf2bf(model, formula)"},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm-package.html","id":null,"dir":"Reference","previous_headings":"","what":"bmm: Easy and Accesible Bayesian Measurement Models using 'brms' — bmm-package","title":"bmm: Easy and Accesible Bayesian Measurement Models using 'brms' — bmm-package","text":"Implementations computational measurement models using 'brms' package. Currently implemented models can listed using supported_models(). package also provides functions extract model informations priors, generated STAN code. implemented models also density random generation functions easily explore model predictions evaluate parameter recovery. Finally, helper functions aid pre- post-processing data efficient communication results.","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bmm: Easy and Accesible Bayesian Measurement Models using 'brms' — bmm-package","text":"Maintainer: Vencislav Popov vencislav.popov@gmail.com [copyright holder] Authors: Gidon Frischkorn gidon.frischkorn@psychologie.uzh.ch [copyright holder] contributors: Paul Bürkner paul.buerkner@gmail.com (Creator brms, package Bayesian regression model package builds upon.) [copyright holder]","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm_options.html","id":null,"dir":"Reference","previous_headings":"","what":"View or change global bmm options — bmm_options","title":"View or change global bmm options — bmm_options","text":"View change global bmm options","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View or change global bmm options — bmm_options","text":"","code":"bmm_options(   sort_data,   parallel,   default_priors,   silent,   color_summary,   reset_options = FALSE )"},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View or change global bmm options — bmm_options","text":"sort_data logical. TRUE, data sorted predictors. FALSE, data sorted, sampling slower. \"check\" (default), fit_model() check data sorted, ask via console prompt sorted. Default: \"check\" parallel logical. TRUE, chains run parallel. FALSE, chains run sequentially. can also set value model separately via argument parallel fit_model(). Default: FALSE default_priors logical. TRUE (default), default bmm priors used. FALSE, basic brms priors used. Default: TRUE silent numeric. Verbosity level 0 2. 1 ( default), informational messages compiler sampler suppressed. 2, even messages suppressed. actual sampling progress still printed. Default: 1 color_summary logical. TRUE, summary model printed color. Default: TRUE reset_options logical. TRUE, options reset default values Default: FALSE","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View or change global bmm options — bmm_options","text":"message current bmm options values, invisibly returns old options use .exit() friends.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"View or change global bmm options — bmm_options","text":"bmm_options function used view change current bmm options. arguments provided, function return current options. arguments provided, function change options return old options invisibly. provide arguments, options changed. options stored global options list used fit_model() functions bmm package. options can also set manually using built-options() function, setting bmm.sort_data,  bmm.default_priors, bmm.silent options.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmm_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View or change global bmm options — bmm_options","text":"","code":"# view the current options bmm_options() #> Current bmm options: #>   sort_data = check #>   parallel = FALSE #>   default_priors = TRUE #>   silent = 1 #>   color_summary = TRUE #> For more information on these options or how to change them, see help(bmm_options).  # change the options to always sort the data and to use parallel sampling bmm_options(sort_data = TRUE, parallel = TRUE) #> Current bmm options: #>   sort_data = TRUE #>   parallel = TRUE #>   default_priors = TRUE #>   silent = 1 #>   color_summary = TRUE #> For more information on these options or how to change them, see help(bmm_options).  # restore the default options bmm_options(reset_options = TRUE) #> Current bmm options: #>   sort_data = check #>   parallel = FALSE #>   default_priors = TRUE #>   silent = 1 #>   color_summary = TRUE #> For more information on these options or how to change them, see help(bmm_options).  # you can change the options using the options() function as well options(bmm.sort_data = TRUE, bmm.parallel = TRUE) bmm_options() #> Current bmm options: #>   sort_data = TRUE #>   parallel = TRUE #>   default_priors = TRUE #>   silent = 1 #>   color_summary = TRUE #> For more information on these options or how to change them, see help(bmm_options).  # reset the options to their default values bmm_options(reset_options = TRUE) #> Current bmm options: #>   sort_data = check #>   parallel = FALSE #>   default_priors = TRUE #>   silent = 1 #>   color_summary = TRUE #> For more information on these options or how to change them, see help(bmm_options).  # bmm_options(sort_data = TRUE, parallel = TRUE) will also return the old options # so you can use it with on.exit() old_op <- bmm_options(sort_data = TRUE, parallel = TRUE) #> Current bmm options: #>   sort_data = TRUE #>   parallel = TRUE #>   default_priors = TRUE #>   silent = 1 #>   color_summary = TRUE #> For more information on these options or how to change them, see help(bmm_options). on.exit(bmm_options(old_op)) #> Error in !missing(sort_data) && sort_data != \"check\": 'length = 2' in coercion to 'logical(1)'"},{"path":"https://venpopov.github.io/bmm/dev/reference/bmmformula.html","id":null,"dir":"Reference","previous_headings":"","what":"Create formula for predicting parameters of a bmmmodel — bmmformula","title":"Create formula for predicting parameters of a bmmmodel — bmmformula","text":"function used specify formulas predicting different parameters bmmmodel.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmmformula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create formula for predicting parameters of a bmmmodel — bmmformula","text":"","code":"bmmformula(...)  bmf(...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/bmmformula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create formula for predicting parameters of a bmmmodel — bmmformula","text":"... Formulas predicting bmmmodel parameter. formula parameter specified separate argument, separated commas","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmmformula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create formula for predicting parameters of a bmmmodel — bmmformula","text":"list formulas parameters predicted","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/bmmformula.html","id":"general-formula-structure","dir":"Reference","previous_headings":"","what":"General formula structure","title":"Create formula for predicting parameters of a bmmmodel — bmmformula","text":"formula argument accepts formulas following syntax:   bmm formulas built brms formulas function nearly way, can use brms formula syntax. main differences bmm formulas, response variable specified formula. Instead, parameter model explicitly specified left-hand side formula. brms, response variable always specified left-hand side first formula, implicitly means predictors first formula predictors mu parameter model. general, measurement models mu parameter, therefore straigthforward explicitely predict parameter model. example, following brms formula drift diffusion model, first line corresponds drift rate parameter, explicitely stated.   bmm, formula written :   rt response variables specified model argument fit_model function. Aside , bmm formula syntax brms formula syntax. information brms formula syntax, see brms::brmsformula(). can also use bmf() function shorthand bmmformula().","code":"parameter ~ fixed_effects + (random_effects | grouping_variable) brmsformula(rt | dec(response) ~ condition + (condition | id),                   bs ~ 1 + (1 | id),                   ndt ~ 1 + (1 | id),                   bias ~ 1 + (1 | id)) bmmformula(drift ~ condition + (condition | id),                  bs ~ 1 + (1 | id),                  ndt ~ 1 + (1 | id),                  bias ~ 1 + (1 | id))"},{"path":"https://venpopov.github.io/bmm/dev/reference/bmmformula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create formula for predicting parameters of a bmmmodel — bmmformula","text":"","code":"imm_formula <- bmmformula(   c ~ 0 + setsize + (0 + setsize | id),   a ~ 1,   kappa ~ 0 + setsize + (0 + setsize | id) )  # or use the shorter alias 'bmf' imm_formula2 <- bmf(   c ~ 0 + setsize + (0 + setsize | id),   a ~ 1,   kappa ~ 0 + setsize + (0 + setsize | id) ) identical(imm_formula, imm_formula2) #> [1] TRUE"},{"path":"https://venpopov.github.io/bmm/dev/reference/c_parametrizations.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between parametrizations of the c parameter of the SDM distribution — c_parametrizations","title":"Convert between parametrizations of the c parameter of the SDM distribution — c_parametrizations","text":"Convert parametrizations c parameter SDM distribution","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/c_parametrizations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between parametrizations of the c parameter of the SDM distribution — c_parametrizations","text":"","code":"c_sqrtexp2bessel(c, kappa)  c_bessel2sqrtexp(c, kappa)"},{"path":"https://venpopov.github.io/bmm/dev/reference/c_parametrizations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between parametrizations of the c parameter of the SDM distribution — c_parametrizations","text":"c Vector memory strength values kappa Vector precision values","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/c_parametrizations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between parametrizations of the c parameter of the SDM distribution — c_parametrizations","text":"c_bessel2sqrtexp converts memory strength parameter (c) bessel parametrization sqrtexp parametrization, c_sqrtexp2bessel converts sqrtexp parametrization bessel parametrization.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/c_parametrizations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert between parametrizations of the c parameter of the SDM distribution — c_parametrizations","text":"See vignette(\"sdm-simple\") details parameterization. sqrtexp parametrization default bmm package.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/calc_error_relative_to_nontargets.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate response error relative to non-target values — calc_error_relative_to_nontargets","title":"Calculate response error relative to non-target values — calc_error_relative_to_nontargets","text":"Given vector responses, values non-targets, function computes error relative non-targets.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/calc_error_relative_to_nontargets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate response error relative to non-target values — calc_error_relative_to_nontargets","text":"","code":"calc_error_relative_to_nontargets(data, response, nt_features)"},{"path":"https://venpopov.github.io/bmm/dev/reference/calc_error_relative_to_nontargets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate response error relative to non-target values — calc_error_relative_to_nontargets","text":"data data.frame object row single observation response Character. name column data contains response nt_features Character vector. names columns data contain values non-targets","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/calc_error_relative_to_nontargets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate response error relative to non-target values — calc_error_relative_to_nontargets","text":"data.frame n*m rows, n number rows data m number non-target variables. preserves columns data, except non-target locations, adds column y_nt, contains transformed response error relative non-targets","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic S3 method for checking data based on model type — check_data","title":"Generic S3 method for checking data based on model type — check_data","text":"Called fit_model() automatically perform checks data depending model type. call appropriate check_data methods based list classes defined .model_* functions. models several classes listed, call functions order listed. Thus, operations common group models defined appropriate check_data.* function, \\* corresponds shared class. example, .model_IMMabc model, corresponds following order check_data.* functions: check_data() -> check_data.vwm(), check_data.nontargets() output final function returned fit_model().","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic S3 method for checking data based on model type — check_data","text":"","code":"check_data(model, data, formula)"},{"path":"https://venpopov.github.io/bmm/dev/reference/check_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic S3 method for checking data based on model type — check_data","text":"model model list object returned check_model() data user supplied data.frame containing data checked formula user supplied formula","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic S3 method for checking data based on model type — check_data","text":"data.frame number rows input data, additional columns added necessary, necessary transformations applied, attributes added data.frame later use. need reuse variables created check_data.* functions subsequent stages (e.g. configure_model()), can store access using attr() function.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"checks if the formula is valid for the specified model — check_formula","title":"checks if the formula is valid for the specified model — check_formula","text":"checks formula valid specified model","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checks if the formula is valid for the specified model — check_formula","text":"","code":"check_formula(model, data, formula)"},{"path":"https://venpopov.github.io/bmm/dev/reference/check_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checks if the formula is valid for the specified model — check_formula","text":"model model list object returned check_model() data user supplied data formula user supplied formula","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checks if the formula is valid for the specified model — check_formula","text":"formula object","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if the model is supported, and returns the model function — check_model","title":"Checks if the model is supported, and returns the model function — check_model","text":"Checks model supported, returns model function","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if the model is supported, and returns the model function — check_model","text":"","code":"check_model(model, data = NULL, formula = NULL)"},{"path":"https://venpopov.github.io/bmm/dev/reference/check_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if the model is supported, and returns the model function — check_model","text":"model model argument supplied user data data argument supplied user formula formula argument supplied user","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/check_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if the model is supported, and returns the model function — check_model","text":"list generated model function type .model_*","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/circle_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert degrees to radians or radians to degrees. — circle_transform","title":"Convert degrees to radians or radians to degrees. — circle_transform","text":"helper functions deg2rad rad2deg add convenience transforming data degrees radians radians degrees.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/circle_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert degrees to radians or radians to degrees. — circle_transform","text":"","code":"deg2rad(deg)  rad2deg(rad)"},{"path":"https://venpopov.github.io/bmm/dev/reference/circle_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert degrees to radians or radians to degrees. — circle_transform","text":"deg numeric vector values degrees. rad numeric vector values radians.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/circle_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert degrees to radians or radians to degrees. — circle_transform","text":"numeric vector length deg rad.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/circle_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert degrees to radians or radians to degrees. — circle_transform","text":"","code":"degrees <- runif(100, min = 0, max = 360)   radians <- deg2rad(degrees)   degrees_again <- rad2deg(radians)"},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic S3 method for configuring the model to be fit by brms — configure_model","title":"Generic S3 method for configuring the model to be fit by brms — configure_model","text":"Called fit_model() automatically construct model formula, family objects default priors model specified user. call appropriate configure_model.* functions based list classes defined .model_* functions. Currently, method last class listed .model_* functions. keep model configuration simple possible. future may add shared methods classes models share configuration.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic S3 method for configuring the model to be fit by brms — configure_model","text":"","code":"configure_model(model, data, formula)"},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic S3 method for configuring the model to be fit by brms — configure_model","text":"model model list object returned check_model() data user supplied data.frame containing data checked formula user supplied formula","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic S3 method for configuring the model to be fit by brms — configure_model","text":"named list containing minimum following elements: formula: object class brmsformula. constructed model formula data: user supplied data.frame, preprocessed check_data family: brms family object prior: brms prior object stanvars: (optional) object class stanvars (custom families). See brms::custom_family() details.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic S3 method for configuring the model to be fit by brms — configure_model","text":"bare bones configure_model.* method look like :","code":"configure_model.newmodel <- function(model, data, formula) {     # preprocessing - e.g. extract arguments from data check, construct new variables    <preprocessing code>     # construct the formula    formula <- bmf2bf(formula, model)     # construct the family    family <- <code for new family>     # construct the default prior    prior <- <code for new prior>     # return the list    nlist(formula, data, family, prior) }"},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic S3 method for configuring the model to be fit by brms — configure_model","text":"","code":"if (FALSE) { configure_model.mixture3p <- function(model, data, formula) {   # retrieve arguments from the data check   max_setsize <- attr(data, \"max_setsize\")   lure_idx <- attr(data, \"lure_idx_vars\")   nt_features <- model$other_vars$nt_features   setsize_var <- model$other_vars$setsize    # construct initial brms formula   formula <- bmf2bf(model, formula) +     brms::lf(kappa2 ~ 1) +     brms::lf(mu2 ~ 1) +     brms::nlf(theta1 ~ thetat) +     brms::nlf(kappa1 ~ kappa)    # additional internal terms for the mixture model formula   kappa_nts <- paste0(\"kappa\", 3:(max_setsize + 1))   theta_nts <- paste0(\"theta\", 3:(max_setsize + 1))   mu_nts <- paste0(\"mu\", 3:(max_setsize + 1))    for (i in 1:(max_setsize - 1)) {     formula <- formula +       glue_nlf(\"{kappa_nts[i]} ~ kappa\") +       glue_nlf(\"{theta_nts[i]} ~ {lure_idx[i]} * (thetant + log(inv_ss)) + \",                \"(1 - {lure_idx[i]}) * (-100)\") +       glue_nlf(\"{mu_nts[i]} ~ {nt_features[i]}\")   }    # define mixture family   vm_list <- lapply(1:(max_setsize + 1), function(x) brms::von_mises(link = \"identity\"))   vm_list$order <- \"none\"   formula$family <- brms::do_call(brms::mixture, vm_list)    nlist(formula, data) } }"},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure local options during model fitting — configure_options","title":"Configure local options during model fitting — configure_options","text":"Currently serves set local options parallel processing update number chains number chains greater number cores.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure local options during model fitting — configure_options","text":"","code":"configure_options(opts, env = parent.frame())"},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure local options during model fitting — configure_options","text":"opts list options env environment set options - set parent.frame() changes apply environment function called . case, environment fit_model() function. Changes propagated user environment.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure local options during model fitting — configure_options","text":"list options pass brm()","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic S3 method for configuring the default prior for a bmmmodel — configure_prior","title":"Generic S3 method for configuring the default prior for a bmmmodel — configure_prior","text":"Called fit_model() automatically construct priors given model, data formula, combine prior given user. first method executed configure_prior.bmmmodel, build prior based information model object fixed_parameters, default_priors, etc. Thus important define values model object. function also recognize user specified parameters fixed constant put appropriate constant priors. additional priors developer wants specify, based information model object, can defined configure_prior.* method model. See configure_prior.IMMfull example.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic S3 method for configuring the default prior for a bmmmodel — configure_prior","text":"","code":"configure_prior(model, data, formula, user_prior, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/configure_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic S3 method for configuring the default prior for a bmmmodel — configure_prior","text":"model bmmmodel object data data.frame containing data used model formula brmsformula object returned configure_model() user_prior brmsprior object given user argument fit_model() ... Additional arguments passed method","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract information from a brmsfit object — fit_info","title":"Extract information from a brmsfit object — fit_info","text":"Extract information brmsfit object","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract information from a brmsfit object — fit_info","text":"","code":"fit_info(fit, what)"},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract information from a brmsfit object — fit_info","text":"fit brmsfit object, list brmsfit objects String. return: \"time\" sampling time per chain \"time_mean\" mean sampling time","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract information from a brmsfit object — fit_info","text":"Depends class fit. brmsfit objects, information single fit returned. brmsfit_list objects, list data.frame information fit returned. \"time\": data.frame sampling time per chain \"time_mean\": named numeric vector mean sampling time","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Measurement Models using BRMS — fit_model","title":"Fit Measurement Models using BRMS — fit_model","text":"Fit Bayesian multilevel measurement model. Currently implemented two-parameter mixture model Zhang Luck (2008), three-parameter mixture model Bays et al (2009), three different versions Interference Measurement Model (Oberauer et al., 2017). wrapper function brms::brm, used estimate model.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Measurement Models using BRMS — fit_model","text":"","code":"fit_model(   formula,   data,   model,   prior = NULL,   chains = 4,   parallel = getOption(\"bmm.parallel\", FALSE),   sort_data = getOption(\"bmm.sort_data\", \"check\"),   silent = getOption(\"bmm.silent\", 1),   backend = getOption(\"brms.backend\", NULL),   ... )"},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Measurement Models using BRMS — fit_model","text":"formula object class bmmformula. symbolic description model fitted. data object class data.frame, containing data variables used model. names variables must match variable names passed bmmmodel object required argurments. model description model fitted. call bmmmodel mixture3p() function. Every model function number required arguments need specified within function call. Call supported_models() see list supported models required arguments prior One brmsprior objects created brms::set_prior() related functions combined using c method + operator. See also get_model_prior() help. necessary default model fitting, can provide prior constraints model parameters chains Numeric. Number Markov chains (defaults 4) parallel Logical; TRUE, number cores machine detected brms fit max(chains, cores) number chains (specified chain argument) parallel using parallel package sort_data Logical. TRUE, data sorted predictor variables faster sampling. FALSE, data sorted, sampling slower. \"check\" (default), fit_model() check data sorted, ask via console prompt sorted. can set default value option using global options(bmm.sort_data = TRUE/FALSE/\"check))viabmm_options(sort_data)` silent Verbosity level 0 2. 1 (default), informational messages compiler sampler suppressed. 2, even messages suppressed. actual sampling progress still printed. Set refresh = 0 turn well. using backend = \"rstan\" can also set open_progress = FALSE prevent opening additional progress bars. backend Character. backend use fitting model. Can \"rstan\" \"cmdstanr\". NULL (default), \"cmdstanr\" used cmdstanr package installed, otherwise \"rstan\" used. can set default backend using global options(brms.backend = \"rstan\"/\"cmdstanr\") ... arguments passed brms::brm() Stan. See description brms::brm() details","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Measurement Models using BRMS — fit_model","text":"object class brmsfit contains posterior draws along many useful information model. Use methods(class = \"brmsfit\") overview available methods.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit Measurement Models using BRMS — fit_model","text":"following models supported: IMMabc(resp_err, nt_features, setsize, regex, links) IMMbsc(resp_err, nt_features, nt_distances, setsize, regex, links) IMMfull(resp_err, nt_features, nt_distances, setsize, regex, links) mixture2p(resp_err, links) mixture3p(resp_err, nt_features, setsize, regex, links) sdmSimple(resp_err, links) Type  ?modelname  get information specific model, e.g.  ?IMMfull Type help(package=bmm) full list available help topics.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit Measurement Models using BRMS — fit_model","text":"Frischkorn, G. T., & Popov, V. (2023). tutorial estimating mixture models visual working memory tasks brms: Introducing Bayesian Measurement Modeling  (bmm) package R. https://doi.org/10.31234/osf.io/umt57","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/fit_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Measurement Models using BRMS — fit_model","text":"","code":"if (FALSE) { # generate artificial data from the Signal Discrimination Model dat <- data.frame(y=rsdm(n=2000))  # define formula ff <- bmmformula(c ~ 1,                  kappa ~ 1)  # fit the model fit <- fit_model(formula = ff,                  data = dat,                  model = sdmSimple(resp_err = \"y\"),                  parallel=T,                  iter=500,                  backend='cmdstanr') }"},{"path":"https://venpopov.github.io/bmm/dev/reference/get_model_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Default priors for Measurement Models specified in BMM — get_model_prior","title":"Get Default priors for Measurement Models specified in BMM — get_model_prior","text":"Obtain default priors Bayesian multilevel measurement model, well information parameters priors can specified. Given model, data formula model, function return default priors used estimate model. Additionally, return model parameters prior specified (flat priors). can help get idea priors need specified also know priors used user-specified priors passed fit_model() function.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/get_model_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Default priors for Measurement Models specified in BMM — get_model_prior","text":"","code":"get_model_prior(object, data, model, formula = object, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/get_model_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Default priors for Measurement Models specified in BMM — get_model_prior","text":"object bmmformula object data object class data.frame, containing data variables used model. names variables must match variable names passed bmmmodel object required argurments. model description model fitted. call bmmmodel mixture3p() function. Every model function number required arguments need specified within function call. Call supported_models() see list supported models required arguments formula Deprecated. Use object instead. ... arguments passed brms::get_prior(). See description brms::get_prior() details","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/get_model_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Default priors for Measurement Models specified in BMM — get_model_prior","text":"data.frame columns specifying prior, class, coef group priors specified. Separate rows contain information parameters (parameter classes) priors can specified.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/get_model_prior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Default priors for Measurement Models specified in BMM — get_model_prior","text":"function deprecated. Please use default_prior() get_prior() (using brms >= 2.20.14) instead. brms >= 2.20.14, get_prior() became alias default_prior(), default_prior() recommended function use.","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/get_model_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Default priors for Measurement Models specified in BMM — get_model_prior","text":"","code":"if (FALSE) { # if using brms >= 2.20.14 default_prior(bmf(c ~ 1, kappa ~ 1),               data = OberauerLin_2017,               model = sdmSimple(resp_err = 'dev_rad')) # if using brms < 2.20.14 get_prior(bmf(c ~ 1, kappa ~ 1),           data = OberauerLin_2017,           model = sdmSimple(resp_err = 'dev_rad')) }"},{"path":"https://venpopov.github.io/bmm/dev/reference/get_stancode.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Stan code for bmm models — get_stancode","title":"Generate Stan code for bmm models — get_stancode","text":"wrapper around brms::make_stancode() models specified bmm. Given model, data formula model, function return combined stan code generated bmm brms","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/get_stancode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Stan code for bmm models — get_stancode","text":"","code":"get_stancode(object, data, model, prior = NULL, formula = object, ...)  # S3 method for bmmformula stancode(object, data, model, prior = NULL, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/get_stancode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Stan code for bmm models — get_stancode","text":"object bmmformula object data object class data.frame, containing data variables used model. names variables must match variable names passed bmmmodel object required argurments. model description model fitted. call bmmmodel mixture3p() function. Every model function number required arguments need specified within function call. Call supported_models() see list supported models required arguments prior One brmsprior objects created brms::set_prior() related functions combined using c method + operator. See also get_model_prior() help. necessary default model fitting, can provide prior constraints model parameters formula Deprecated. Use object instead. ... arguments passed brms::make_stancode(). See description brms::make_stancode() details","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/get_stancode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Stan code for bmm models — get_stancode","text":"character string containing fully commented Stan code fit bmm model.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/get_stancode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Stan code for bmm models — get_stancode","text":"function deprecated. Please use stancode() make_stancode() (using brms >= 2.20.14) instead. brms >= 2.20.14, make_stancode() became alias stancode(), stancode() recommended function use.","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/get_stancode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Stan code for bmm models — get_stancode","text":"","code":"scode1 <- stancode(bmf(c ~ 1, kappa ~ 1),                    data = OberauerLin_2017,                    model = sdmSimple(resp_err = \"dev_rad\")) cat(scode1) #> // generated with brms 2.21.0 #> functions { #>     // utility function trick for converting real to integer type #>   int bin_search(real x, int min_val, int max_val) { #>       int mid_p; #>       int L = min_val; #>       int R = max_val; #>       while(L < R) { #>         mid_p = (R-L) %/% 2; #>         if (L + mid_p < x) { #>           L += mid_p + 1; #>         } else if (L + mid_p > x) { #>           R = L + mid_p - 1; #>         } else { #>           return(L + mid_p); #>         } #>       } #>       return(L); #>     } #>  #>   // utility function for determining optimal number of chebyshev points for the denominator approximation #>   int get_m(real c, real kappa) { #>     real m = floor(2 * exp(0.4*c) * kappa^(fma(c,0.0145,0.7)) + 0.5)+2; #>     int M = bin_search(m, 2, 200); #>     return(M); #>   } #>  #>   // log of the numerator of the sdm likelihood #>   real sdm_simple_lpdf(vector y, vector mu, vector c, vector kappa) { #>     int N = size(y); #>     vector[N] num = exp(fma(kappa,cos(y-mu)-1,c)) ; #>     real out = dot_product(num, sqrt(kappa)); #>     out *= inv(sqrt2()) * inv_sqrt(pi()); #>     return(out); #>   } #>  #>   // log of the normalization constant, approximated by chebyshev quadrature #>   real sdm_simple_ldenom_chquad_adaptive(real c, real kappa, matrix CN) { #>     int m = get_m(c,kappa); #>     vector[m] cosn = CN[1:m,m]; #>     vector[m] fn = exp(fma(kappa,cosn,c)) * sqrt(kappa) * inv(sqrt2()) * inv_sqrt(pi()); #>     real out = -log_sum_exp(fn)+log(m); #>     return(out); #>   } #> } #> data { #>   int<lower=1> N;  // total number of observations #>   vector[N] Y;  // response variable #>   int prior_only;  // should the likelihood be ignored? #> } #> transformed data { #>     // precompute chebyshev points #>   matrix[200,200] COSN; #>   for (m in 1:200) { #>     for (i in 1:m) { #>       COSN[i,m] = cos((2*i-1)*pi()/(2*m))-1; #>     } #>   } #> } #> parameters { #>   real Intercept_c;  // temporary intercept for centered predictors #>   real Intercept_kappa;  // temporary intercept for centered predictors #> } #> transformed parameters { #>   real Intercept;  // temporary intercept for centered predictors #>   real lprior = 0;  // prior contributions to the log posterior #>   Intercept = 0; #>   lprior += student_t_lpdf(Intercept_c | 5,2,0.75); #>   lprior += student_t_lpdf(Intercept_kappa | 5,1.75,0.75); #> } #> model { #>   // likelihood including constants #>   if (!prior_only) { #>     // initialize linear predictor term #>     vector[N] mu = rep_vector(0.0, N); #>     // initialize linear predictor term #>     vector[N] c = rep_vector(0.0, N); #>     // initialize linear predictor term #>     vector[N] kappa = rep_vector(0.0, N); #>     mu += Intercept; #>     c += Intercept_c; #>     kappa += Intercept_kappa; #>     kappa = exp(kappa); #>     target += sdm_simple_lpdf(Y | mu, c, kappa); #>       // adaptive calculation of the normalization constant #>     real z; #>     for (n in 1:N) { #>     \tif (n == 1 || c[n] != c[n-1] || kappa[n] != kappa[n-1]) { #>     \t\tz = sdm_simple_ldenom_chquad_adaptive(c[n],kappa[n],COSN); #>     \t} #>     \ttarget += z; #>     } #>     target += -(log2()+log(pi()))*N; #>   } #>   // priors including constants #>   target += lprior; #> } #> generated quantities { #>   // actual population-level intercept #>   real b_Intercept = Intercept; #>   // actual population-level intercept #>   real b_c_Intercept = Intercept_c; #>   // actual population-level intercept #>   real b_kappa_Intercept = Intercept_kappa; #> }"},{"path":"https://venpopov.github.io/bmm/dev/reference/get_standata.html","id":null,"dir":"Reference","previous_headings":"","what":"Stan data for bmm models — get_standata","title":"Stan data for bmm models — get_standata","text":"Given model, data formula model, function return combined stan data generated bmm brms","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/get_standata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stan data for bmm models — get_standata","text":"","code":"get_standata(object, data, model, prior = NULL, formula = object, ...)  # S3 method for bmmformula standata(object, data, model, prior = NULL, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/get_standata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stan data for bmm models — get_standata","text":"object bmmformula object data object class data.frame, containing data variables used model. names variables must match variable names passed bmmmodel object required argurments. model description model fitted. call bmmmodel mixture3p() function. Every model function number required arguments need specified within function call. Call supported_models() see list supported models required arguments prior One brmsprior objects created brms::set_prior() related functions combined using c method + operator. See also get_model_prior() help. necessary default model fitting, can provide prior constraints model parameters formula Deprecated. Use object instead. ... arguments passed brms::make_standata(). See description brms::make_standata() details","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/get_standata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stan data for bmm models — get_standata","text":"named list objects containing required data fit bmm model Stan.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/get_standata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stan data for bmm models — get_standata","text":"function deprecated. Please use standata() make_standata() (using brms >= 2.20.14) instead. brms >= 2.20.14, make_standata() became alias standata(), standata() recommended function use.","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/get_standata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stan data for bmm models — get_standata","text":"","code":"sdata1 <- standata(bmf(c ~ 1, kappa ~ 1),                    data = OberauerLin_2017,                    model = sdmSimple(resp_err = \"dev_rad\")) #>  #> Your data has been sorted by the following predictors:  #> * caution: you have set `sort_data=TRUE`. You need to be careful when using #> brms postprocessing methods that rely on the data order, such as generating #> predictions. Assuming you assigned the result of fit_model to a variable called #> `fit`, you can extract the sorted data from the fitted object with: #>  #> data_sorted <- fit$fit_args$data str(sdata1) #> List of 12 #>  $ N         : int 15200 #>  $ Y         : num [1:15200(1d)] 0.384 -0.4538 -0.0873 0.3665 -0.0349 ... #>  $ K         : int 1 #>  $ Kc        : num 0 #>  $ X         : num [1:15200, 1] 1 1 1 1 1 1 1 1 1 1 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:15200] \"1\" \"2\" \"3\" \"4\" ... #>   .. ..$ : chr \"Intercept\" #>   ..- attr(*, \"assign\")= int 0 #>  $ K_c       : int 1 #>  $ Kc_c      : num 0 #>  $ X_c       : num [1:15200, 1] 1 1 1 1 1 1 1 1 1 1 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:15200] \"1\" \"2\" \"3\" \"4\" ... #>   .. ..$ : chr \"Intercept\" #>   ..- attr(*, \"assign\")= int 0 #>  $ K_kappa   : int 1 #>  $ Kc_kappa  : num 0 #>  $ X_kappa   : num [1:15200, 1] 1 1 1 1 1 1 1 1 1 1 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:15200] \"1\" \"2\" \"3\" \"4\" ... #>   .. ..$ : chr \"Intercept\" #>   ..- attr(*, \"assign\")= int 0 #>  $ prior_only: int 0 #>  - attr(*, \"class\")= chr [1:2] \"standata\" \"list\""},{"path":"https://venpopov.github.io/bmm/dev/reference/k2sd.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform kappa of the von Mises distribution to the circular standard\ndeviation — k2sd","title":"Transform kappa of the von Mises distribution to the circular standard\ndeviation — k2sd","text":"function transforms precision parameter kappa von Mises distribution circular standard deviation. Adapted Matlab code Paul Bays (https://www.paulbays.com/code.php)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/k2sd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform kappa of the von Mises distribution to the circular standard\ndeviation — k2sd","text":"","code":"k2sd(K)"},{"path":"https://venpopov.github.io/bmm/dev/reference/k2sd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform kappa of the von Mises distribution to the circular standard\ndeviation — k2sd","text":"K numeric. vector kappa values.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/k2sd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform kappa of the von Mises distribution to the circular standard\ndeviation — k2sd","text":"vector sd values.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/k2sd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform kappa of the von Mises distribution to the circular standard\ndeviation — k2sd","text":"","code":"kappas <- runif(1000, 0.01, 100)  # calcualte SD (in radians) SDs <- k2sd(kappas)  # transform SDs from radians to degrees SDs_degress <- SDs * 180 / pi  # plot the relationship between kappa and circular SD plot(kappas,SDs)  plot(kappas,SDs_degress)"},{"path":"https://venpopov.github.io/bmm/dev/reference/make_stancode_parblock.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the parameter block from a generated Stan code for bmm models — make_stancode_parblock","title":"Get the parameter block from a generated Stan code for bmm models — make_stancode_parblock","text":"wrapper around get_stancode() models specified bmm. Given model, data formula model, function return just parameters block. Useful figuring paramters can set initial values ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/make_stancode_parblock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the parameter block from a generated Stan code for bmm models — make_stancode_parblock","text":"","code":"make_stancode_parblock(formula, data, model, prior = NULL, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/make_stancode_parblock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the parameter block from a generated Stan code for bmm models — make_stancode_parblock","text":"formula object class bmmformula. symbolic description model fitted. data object class data.frame, containing data variables used model. names variables must match variable names passed bmmmodel object required argurments. model description model fitted. call bmmmodel mixture3p() function. Every model function number required arguments need specified within function call. Call supported_models() see list supported models required arguments prior One brmsprior objects created brms::set_prior() related functions combined using c method + operator. See also get_model_prior() help. necessary default model fitting, can provide prior constraints model parameters ... arguments passed brms::make_stancode(). See description brms::make_stancode() details","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/make_stancode_parblock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the parameter block from a generated Stan code for bmm models — make_stancode_parblock","text":"character string containing parameter block fully commented Stan code fit bmm model.","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p.html","id":null,"dir":"Reference","previous_headings":"","what":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","title":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","text":"Two-parameter mixture model Zhang Luck (2008).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","text":"","code":"mixture2p(resp_err, links = NULL, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","text":"resp_err name variable provided dataset containing response error. response Error code response relative --recalled target radians. can transform response error degrees radian using deg2rad function. links list links parameters. Currently affect model fits, future. ... used internally testing, ignore ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","text":"object class bmmmodel","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","text":"Domain: Visual working memory Task: Continuous reproduction Name: Two-parameter mixture model Zhang Luck (2008). Citation: Zhang, W., & Luck, S. J. (2008). Discrete fixed-resolution representations visual working memory. Nature, 453(7192), 233-235 Requirements: response vairable radians represent angular error relative target Parameters: mu1: Location parameter von Mises distribution memory responses (radians). Fixed internally 0 default. kappa: Concentration parameter von Mises distribution thetat: Mixture weight target responses Fixed parameters: mu1 = 0 mu2 = 0 kappa2 = -100 Default parameter links: mu1 = identity; kappa = log; thetat = identity","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two-parameter mixture model by Zhang and Luck (2008). — mixture2p","text":"","code":"if (FALSE) { # generate artificial data dat <- data.frame(y = rmixture2p(n=2000))  # define formula ff <- bmmformula(kappa ~ 1,                  thetat ~ 1)  model <- mixture2p(resp_err = \"y\")  # fit the model fit <- fit_model(formula = ff,                  data = dat,                  model = model,                  parallel=T,                  iter=500,                  backend='cmdstanr') }"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"The two-parameter mixture model (mixture2p) — mixture2p_dist","title":"The two-parameter mixture model (mixture2p) — mixture2p_dist","text":"Density, distribution, random generation functions two-parameter mixture model location mu, precision memory representations kappa probability recalling items memory pMem.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The two-parameter mixture model (mixture2p) — mixture2p_dist","text":"","code":"dmixture2p(x, mu = 0, kappa = 5, pMem = 0.6, log = FALSE)  pmixture2p(q, mu = 0, kappa = 7, pMem = 0.8)  qmixture2p(p, mu = 0, kappa = 5, pMem = 0.6)  rmixture2p(n, mu = 0, kappa = 5, pMem = 0.6)"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The two-parameter mixture model (mixture2p) — mixture2p_dist","text":"x Vector observed responses mu Vector locations kappa Vector precision values pMem Vector probabilities memory recall log Logical; TRUE, values returned log scale. q Vector quantiles p Vector probability n Number observations generate data ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The two-parameter mixture model (mixture2p) — mixture2p_dist","text":"dmixture2p gives density two-parameter mixture model, pmixture2p gives cumulative distribution function two-parameter mixture model, qmixture2p gives quantile function two-parameter mixture model, rmixture2p gives random generation function two-parameter mixture model.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p_dist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The two-parameter mixture model (mixture2p) — mixture2p_dist","text":"Zhang, W., & Luck, S. J. (2008). Discrete fixed-resolution representations visual working memory. Nature, 453.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture2p_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The two-parameter mixture model (mixture2p) — mixture2p_dist","text":"","code":"# example code"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p.html","id":null,"dir":"Reference","previous_headings":"","what":"Three-parameter mixture model by Bays et al (2009). — mixture3p","title":"Three-parameter mixture model by Bays et al (2009). — mixture3p","text":"Three-parameter mixture model Bays et al (2009).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Three-parameter mixture model by Bays et al (2009). — mixture3p","text":"","code":"mixture3p(resp_err, nt_features, setsize, regex = FALSE, links = NULL, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Three-parameter mixture model by Bays et al (2009). — mixture3p","text":"resp_err name variable dataset containing response error. response error code response relative --recalled target radians. can transform response error degrees radians using deg2rad function. nt_features character vector names non-target feature values. non_target feature values radians centered relative target. Alternatively, regex=TRUE, regular expression can used match non-target feature columns dataset. setsize Name column containing set size variable (setsize varies) numeric value setsize, setsize fixed. regex Logical. TRUE, nt_features argument interpreted regular expression match non-target feature columns dataset. links list links parameters. Currently affect model fits, future. ... used internally testing, ignore ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Three-parameter mixture model by Bays et al (2009). — mixture3p","text":"object class bmmmodel","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Three-parameter mixture model by Bays et al (2009). — mixture3p","text":"Domain: Visual working memory Task: Continuous reproduction Name: Three-parameter mixture model Bays et al (2009). Citation: Bays, P. M., Catalao, R. F. G., & Husain, M. (2009). precision visual working memory set allocation shared resource. Journal Vision, 9(10), 1-11 Requirements: response vairable radians represent angular error relative target non-target features radians centered relative target Parameters: mu1: Location parameter von Mises distribution memory responses (radians). Fixed internally 0 default. kappa: Concentration parameter von Mises distribution thetat: Mixture weight target responses thetant: Mixture weight non-target responses Fixed parameters: mu1 = 0 mu2 = 0 kappa2 = -100 Default parameter links: mu1 = identity; kappa = log; thetat = identity; thetant = identity","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Three-parameter mixture model by Bays et al (2009). — mixture3p","text":"","code":"if (FALSE) { # generate artificial data from the Bays et al (2009) 3-parameter mixture model dat <- data.frame(   y = rmixture3p(n=2000, mu = c(0,1,-1.5,2)),   nt1_loc = 1,   nt2_loc = -1.5,   nt3_loc = 2 )  # define formula ff <- bmmformula(   kappa ~ 1,   thetat ~ 1,   thetant ~ 1 )  # specify the 3-parameter model with explicit column names for non-target features model1 <- mixture3p(resp_err = \"y\", nt_features = paste0('nt',1:3,'_loc'), setsize = 4)  # fit the model fit <- fit_model(formula = ff,                  data = dat,                  model = model1,                  parallel=T,                  iter = 500,                  backend='cmdstanr')  # alternatively specify the 3-parameter model with a regular expression to match non-target features # this is equivalent to the previous call, but more concise model2 <- mixture3p(resp_err = \"y\", nt_features = \"nt.*_loc\", setsize = 4, regex = TRUE)  # fit the model fit <- fit_model(formula = ff,                  data = dat,                  model = model2,                  parallel=T,                  iter = 500,                  backend='cmdstanr') }"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"The three-parameter mixture model (mixture3p) — mixture3p_dist","title":"The three-parameter mixture model (mixture3p) — mixture3p_dist","text":"Density, distribution, random generation functions three-parameter mixture model location mu, precision memory representations kappa, probability recalling items memory pMem, probability recalling non-targets pNT.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The three-parameter mixture model (mixture3p) — mixture3p_dist","text":"","code":"dmixture3p(   x,   mu = c(0, 2, -1.5),   kappa = 5,   pMem = 0.6,   pNT = 0.2,   log = FALSE )  pmixture3p(q, mu = c(0, 2, -1.5), kappa = 5, pMem = 0.6, pNT = 0.2)  qmixture3p(p, mu = c(0, 2, -1.5), kappa = 5, pMem = 0.6, pNT = 0.2)  rmixture3p(n, mu = c(0, 2, -1.5), kappa = 5, pMem = 0.6, pNT = 0.2)"},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The three-parameter mixture model (mixture3p) — mixture3p_dist","text":"x Vector observed responses mu Vector locations. First value represents location target item additional values indicate location non-target items. kappa Vector precision values pMem Vector probabilities memory recall pNT Vector probabilities swap errors log Logical; TRUE, values returned log scale. q Vector quantiles p Vector probability n Number observations generate data ","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The three-parameter mixture model (mixture3p) — mixture3p_dist","text":"dmixture3p gives density three-parameter mixture model, pmixture3p gives cumulative distribution function two-parameter mixture model, qmixture3p gives quantile function two-parameter mixture model, rmixture3p gives random generation function two-parameter mixture model.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p_dist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The three-parameter mixture model (mixture3p) — mixture3p_dist","text":"Bays, P. M., Catalao, R. F. G., & Husain, M. (2009). precision visual working memory set allocation shared resource. Journal Vision, 9(10), 7.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/mixture3p_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The three-parameter mixture model (mixture3p) — mixture3p_dist","text":"","code":"# example code"},{"path":"https://venpopov.github.io/bmm/dev/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::[\\%>\\%][magrittr::pipe] details.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://venpopov.github.io/bmm/dev/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/postprocess_brm.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic S3 method for postprocessing the fitted brm model — postprocess_brm","title":"Generic S3 method for postprocessing the fitted brm model — postprocess_brm","text":"Called fit_model() automatically perform type postprocessing depending model type. call appropriate postprocess_brm.* methods based list classes defined .model_* functions. models several classes listed, call functions order listed. Thus, operations common group models defined appropriate postprocess_brm.* function, \\* corresponds shared class. example, sdmSimple model, postprocessing involves setting link function c parameter \"log\", coded manually stan code, specified \"identity\" brms custom family. model requires postprocessing, can skip method, default method used (returns brmsfit object passed ).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/postprocess_brm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic S3 method for postprocessing the fitted brm model — postprocess_brm","text":"","code":"postprocess_brm(model, fit, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/postprocess_brm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic S3 method for postprocessing the fitted brm model — postprocess_brm","text":"model model list object returned check_model() fit fitted brm model returned call_brm() ... Additional arguments passed method","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/postprocess_brm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic S3 method for postprocessing the fitted brm model — postprocess_brm","text":"object class brmsfit, necessary postprocessing applied","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/print_pretty_models_md.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a markdown list of the measurement models available in bmm — print_pretty_models_md","title":"Generate a markdown list of the measurement models available in bmm — print_pretty_models_md","text":"Used internally automatically populate information README file","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/print_pretty_models_md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a markdown list of the measurement models available in bmm — print_pretty_models_md","text":"","code":"print_pretty_models_md()"},{"path":"https://venpopov.github.io/bmm/dev/reference/print_pretty_models_md.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a markdown list of the measurement models available in bmm — print_pretty_models_md","text":"Markdown code printing list measurement models available bmm","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/restructure_bmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Restructure Old bmmfit Objects — restructure_bmm","title":"Restructure Old bmmfit Objects — restructure_bmm","text":"Restructure old bmmfit objects work latest bmm version. function called internally applying post-processing methods.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/restructure_bmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restructure Old bmmfit Objects — restructure_bmm","text":"","code":"restructure_bmm(x, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/restructure_bmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restructure Old bmmfit Objects — restructure_bmm","text":"x object class bmmfit. ... Currently ignored.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/restructure_bmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restructure Old bmmfit Objects — restructure_bmm","text":"bmmfit object compatible latest version bmm brms.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/revert_postprocess_brm.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic S3 method for reverting any postprocessing of the fitted brm model — revert_postprocess_brm","title":"Generic S3 method for reverting any postprocessing of the fitted brm model — revert_postprocess_brm","text":"Called update.bmmfit() automatically revert postprocessing depending model type. call appropriate revert_postprocess_brm.* methods based list classes defined .model_* functions. models several classes listed, call functions order listed. example, sdmSimple model, postprocessing involves setting link function c parameter \"log\", coded manually stan code, specified \"identity\" brms custom family. However, update process, link function set back \"identity\". use specific reason revert postprocessing (otherwise update method produce incorrect results).","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/revert_postprocess_brm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic S3 method for reverting any postprocessing of the fitted brm model — revert_postprocess_brm","text":"","code":"revert_postprocess_brm(model, fit, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/revert_postprocess_brm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic S3 method for reverting any postprocessing of the fitted brm model — revert_postprocess_brm","text":"model model list object returned check_model() fit fitted brm model returned call_brm() ... Additional arguments passed method","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/revert_postprocess_brm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic S3 method for reverting any postprocessing of the fitted brm model — revert_postprocess_brm","text":"object class brmsfit, necessary postprocessing applied","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/softmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Softmax and logsoftmax functions and their inverse functions — softmax","title":"Softmax and logsoftmax functions and their inverse functions — softmax","text":"softmax returns value softmax function softmaxinv returns value inverse-softmax function","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/softmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Softmax and logsoftmax functions and their inverse functions — softmax","text":"","code":"softmax(eta, lambda = 1)  softmaxinv(p, lambda = 1)"},{"path":"https://venpopov.github.io/bmm/dev/reference/softmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Softmax and logsoftmax functions and their inverse functions — softmax","text":"eta numeric vector input lambda Tuning parameter (single positive value) p probability vector (.e., numeric vector non-negative values sum one)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/softmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Softmax and logsoftmax functions and their inverse functions — softmax","text":"Value softmax function inverse","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/softmax.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Softmax and logsoftmax functions and their inverse functions — softmax","text":"softmax function bijective function maps real vector length m-1 probability vector length m non-zero probabilities.  present functions define softmax function inverse, tuning parameter. current functions define softmax : $$\\Large P(\\eta_i) = \\frac{e^{\\lambda \\eta_i}}{1+ \\sum_{j=1}^m e^{\\lambda \\eta_j}}$$ Code adapted utilities package","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/softmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Softmax and logsoftmax functions and their inverse functions — softmax","text":"","code":"softmax(5:7) #> [1] 0.0899759918 0.2445801036 0.6648376511 0.0006062535 softmaxinv(softmax(5:7)) #> [1] 5 6 7"},{"path":"https://venpopov.github.io/bmm/dev/reference/summary.bmmfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a summary of a fitted model represented by a bmmfit object — summary.bmmfit","title":"Create a summary of a fitted model represented by a bmmfit object — summary.bmmfit","text":"Create summary fitted model represented bmmfit object","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/summary.bmmfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a summary of a fitted model represented by a bmmfit object — summary.bmmfit","text":"","code":"# S3 method for bmmfit summary(   object,   priors = FALSE,   prob = 0.95,   robust = FALSE,   mc_se = FALSE,   ...,   backend = \"bmm\" )"},{"path":"https://venpopov.github.io/bmm/dev/reference/summary.bmmfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a summary of a fitted model represented by a bmmfit object — summary.bmmfit","text":"object object class brmsfit. priors Logical; Indicating priors included summary. Default FALSE. prob value 0 1 indicating desired probability covered uncertainty intervals. default 0.95. robust FALSE (default) mean used measure central tendency standard deviation measure variability. TRUE, median median absolute deviation (MAD) applied instead. mc_se Logical; Indicating uncertainty Estimate caused MCMC sampling shown summary. Defaults FALSE. ... potential arguments backend Choose whether display bmm summary method (default), display brms summary method.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/summary.bmmfit.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a summary of a fitted model represented by a bmmfit object — summary.bmmfit","text":"can turn color output setting option options(bmm.color_summary = FALSE) bmm_options(color_summary = FALSE)","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/reference/supported_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Measurement models available in bmm — supported_models","title":"Measurement models available in bmm — supported_models","text":"Measurement models available bmm","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/supported_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measurement models available in bmm — supported_models","text":"","code":"supported_models(print_call = TRUE)"},{"path":"https://venpopov.github.io/bmm/dev/reference/supported_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measurement models available in bmm — supported_models","text":"print_call Logical; TRUE (default), function print information model function called required arguments. FALSE, function return character vector names available models","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/supported_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measurement models available in bmm — supported_models","text":"character vector measurement models available bmm","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/supported_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measurement models available in bmm — supported_models","text":"","code":"supported_models() #> The following models are supported: #>  #> -  IMMabc(resp_err, nt_features, setsize, regex, links)  #> -  IMMbsc(resp_err, nt_features, nt_distances, setsize, regex, links)  #> -  IMMfull(resp_err, nt_features, nt_distances, setsize, regex, links)  #> -  mixture2p(resp_err, links)  #> -  mixture3p(resp_err, nt_features, setsize, regex, links)  #> -  sdmSimple(resp_err, links)  #>  #> Type  ?modelname  to get information about a specific model, e.g.  ?IMMfull"},{"path":"https://venpopov.github.io/bmm/dev/reference/update.bmmfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a bmm model — update.bmmfit","title":"Update a bmm model — update.bmmfit","text":"Update existing bmm mode. function calls brms::update.brmsfit(), applies necessary bmm postprocessing model object update.","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/update.bmmfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a bmm model — update.bmmfit","text":"","code":"# S3 method for bmmfit update(object, formula., newdata = NULL, recompile = NULL, ...)"},{"path":"https://venpopov.github.io/bmm/dev/reference/update.bmmfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a bmm model — update.bmmfit","text":"object object class bmmfit formula. bmmformula(). missing, original formula used. Currently specify full bmmformula newdata optional data frame containing variables model recompile Logical, indicating whether Stan model recompiled. NULL (default), update tries figure internally, recompilation necessary. Setting FALSE cause Stan code changing arguments ignored. ... arguments passed brms::update.brmsfit()","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/update.bmmfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update a bmm model — update.bmmfit","text":"updating brmsfit created cmdstanr backend different R session, recompilation triggered default, cmdstanr writes model executable temporary directory. avoid , set option \"cmdstanr_write_stan_file_dir\" nontemporary path choice creating original bmmfit. information examples, see brms::update.brmsfit()","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/use_model_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a file with a template for adding a new model (for developers) — use_model_template","title":"Create a file with a template for adding a new model (for developers) — use_model_template","text":"Create file template adding new model (developers)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/use_model_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a file with a template for adding a new model (for developers) — use_model_template","text":"","code":"use_model_template(   model_name,   custom_family = FALSE,   stanvar_blocks = c(\"data\", \"tdata\", \"parameters\", \"tparameters\", \"model\", \"likelihood\",     \"genquant\", \"functions\"),   open_files = TRUE,   testing = FALSE )"},{"path":"https://venpopov.github.io/bmm/dev/reference/use_model_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a file with a template for adding a new model (for developers) — use_model_template","text":"model_name string name model. file named bmm_model_model_name.R necessary functions created appropriate names structure. file saved R/ directory custom_family Logical; plan define brms::custom_family()? TRUE function add section custom family, placeholders stan_vars corresponding empty .stan files inst/stan_chunks/, can fill example, see sdmSimple model /R/bmm_model_sdmSimple.R. FALSE (default) function add custom family section stan files. stanvar_blocks character vector names blocks added custom family section. See brms::stanvar() details. default lists possible blocks, unlikely need . can specify vector need. function add section block list open_files Logical; TRUE (default), function open template files created RStudio testing Logical; TRUE, function return file content save file. FALSE (default), function save file","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/use_model_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a file with a template for adding a new model (for developers) — use_model_template","text":"testing TRUE, function return file content string. testing FALSE, function return NULL","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/use_model_template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a file with a template for adding a new model (for developers) — use_model_template","text":"get warning check() non-ASCII characters, often due citation field. can find problem running   usually rewriting numbers (issue, page numbers) manually fixes ","code":"remotes::install_github(\"eddelbuettel/dang\") dang::checkPackageAsciiCode(dir = \".\")"},{"path":"https://venpopov.github.io/bmm/dev/reference/use_model_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a file with a template for adding a new model (for developers) — use_model_template","text":"","code":"if (FALSE) {  library(usethis)   # create a new model file without a brms::custom_family, and open the file  use_model_template(\"newmodel\")   # create a new model file with a brms::custom_family, three .stan files in  # inst/stan_chunks/ and open the files  use_model_template('abc',custom_family = TRUE,                     stanvar_blocks = c('functions','likelihood','tdata')) }"},{"path":"https://venpopov.github.io/bmm/dev/reference/wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap angles that extend beyond (-pi;pi) — wrap","title":"Wrap angles that extend beyond (-pi;pi) — wrap","text":"circular space, angles can range (-pi;pi -180;180). subtracting angles, can result values outside range. example, calculating difference value 10 degrees minus 340 degrees, results difference 330 degrees. However, true difference two values -30 degrees. function wraps values, occur circle","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap angles that extend beyond (-pi;pi) — wrap","text":"","code":"wrap(x, radians = TRUE)"},{"path":"https://venpopov.github.io/bmm/dev/reference/wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap angles that extend beyond (-pi;pi) — wrap","text":"x numeric vector, matrix data.frame angles wrapped. radians (default) degrees. radians Logical. x radians (default=TRUE) degrees (FALSE)","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/wrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap angles that extend beyond (-pi;pi) — wrap","text":"object type x","code":""},{"path":"https://venpopov.github.io/bmm/dev/reference/wrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrap angles that extend beyond (-pi;pi) — wrap","text":"","code":"x <- runif(1000, -pi, pi) y <- runif(1000, -pi, pi) diff <- x-y hist(diff)  wrapped_diff <- wrap(x-y) hist(wrapped_diff)"},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"bmm 0.4.0+","text":"add custom summary() method bmm models (#144) add global options bmm.summary_backend control backend used summary() method (choices “bmm” “brms”) deprecate get_model_prior(), get_stancode() get_standata(). functions removed future versions package. Due recent changes brms version 2.20.14, can now use brms functions default_prior, stancode standata directly bmm models (alternatively, older aliases, “get_prior”, “make_stancode”, “make_standata”). function restructure() now allows apply methods introduced newer bmm versions bmmfit objects created older bmm versions can now specify model parameter constant using equal sign bmmformula (#142) can now choose estimate parameters fixed constant default models (#145) default priors models now specified via configure_prior() S3 method (#145) cmdstanr used default backend brms user installed (#145) various updates documentation data sets","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bmm 0.4.0+","text":"fix bug preventing sort_data check executed (#72) fix bug summary() function displaying implicit parameters (#152) fix bug sort_data check occured cases shouldn’t (#158)","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"new-features-0-4-0-1","dir":"Changelog","previous_headings":"","what":"New features","title":"bmm 0.4.0","text":"add check sdmSimple model data sorted predictors. leads much faster sampling. user can control default behavior sort_data argument (#72) mixture3p imm models now require set size used predictor, intercept must suppressed. set size 1 otherwise causes problems - can contribution non_target responses set size 1, meaningful estimate intercept parameters involve non_target responses (#96). add postprocessing methods sdmSimple allow pp_check(), conditional_effects bridgesampling usage model (#30) add informed default priors models. can always use get_model_prior() function see default priors model add new function set_default_prior developers, allows easily set default priors new models regardless user-specified formula can now specify variables models via regular expressions rather character vectors (#102) can now view set bmm global options via bmm_options(). See ?bmm_options information add startup message upon loading package","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bug-fixes-0-4-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bmm 0.4.0","text":"fix bug mixture3p IMM models caused error intercept supressed set size used predictor update() now works properly bmmfit objects (#95) fix bug sort_data check caused error using grouped covariance structure random effects across different parameters","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"other-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"bmm 0.4.0","text":"brms now loaded automatically loading bmm library(bmm)","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"bmm 0.3.0","text":"BREAKING CHANGE: fit_model function now requires bmmformula passed. syntax bmmformula short form bmf equal specifying brmsformula. However, version bmmformula specifies parameters bmmmodel change across experimental conditions continuous predictors. response variables model fit now specified model defined using model = bmmmodel(). (#79) BREAKING CHANGE: non_target spaPos variables mixture3p IMM models relabled nt_features nt_distances consistency. also communicate distance limited spatial distance distances feature dimensions retrieval cues. Currently, still single generalization gradient cue features possible. release includes reference fits implemented models ensure future changes package compromise included models change results implementations produce. check_formula methods adapted match new bmmformula syntax. now evaluates formulas specified using bmmformula function, formulas parameters bmmmodel specified warns user fixed intercept estimated formula one parameters provided. Additionally, check_formula throws error formulas provided match parameter called bmmmodel unless part non-linear transformation. can now specify formulas internally fixed parameters mu visual working memory models. allows predict response bias data. formula provided mu, model assume mean response distribution fixed zero. now option bmm.silent allows suppress messages baseline activation b removed IMM models, internally fixed zero scaling now predicted independent variables model unidentifiable. arguments used fit bmm model now accessible bmmfit object via fit$bmm$fit_args list. add class(‘bmmfit’) object returned fit_model() allowing flexible postprocessing underlying brmsfit object. object now class(‘bmmfit’, ‘brmsfit’) changes column names datasets ZhangLuck_2008 OberauerLin_2017 make consistent","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"bmm 0.3.0","text":"error treatment distances IMMfull IMMbsc corrected. versions ensures positive distances can passed two models. removed warning regarding scaling distances IMMfull IMMbsc specific circular distances.","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"documentation-0-3-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"bmm 0.3.0","text":"vignettes update new bmmformula syntax.","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bug-fixes-0-2-2","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"bmm 0.2.2","text":"fixed bug passing character vector negative values setsize argument visual working memory models caused error incorrect behavior (#97)","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bug-fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"bmm 0.2.1","text":"Minor change sdmSimple stan helper functions avoid harmless warning message stan output","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"bmm 0.2.0","text":"New model available - Signal Discrimination Model Oberauer (2023) visual working memory continuous reproduction tasks. See ?sdmSimple. current version take account non-target activation Add ability extract information default priors bmm models get_model_prior() (#53) Add ability generate stan code stan data model get_model_stancode() get_model_standata() (#81) BREAKING CHANGE: Add distribution functions likelihood (e.g. dimm()) random variate generation rimm()) models package. Remove deprecated gen_3p_data() gen_imm_data() functions (#69) Two new datasets available: ZhangLuck_2008 OberauerLin_2017 (#22)","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"documentation-0-2-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"bmm 0.2.0","text":"Website development version package now available https://venpopov.github.io/bmm/dev/ (#18) Add vignettes model website https://venpopov.github.io/bmm/dev/articles/ Add detailed developer’s guide website https://venpopov.github.io/bmm/dev/dev-notes (#21) Improve README detailed information package’s goals models (#21)","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"other-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"bmm 0.2.0","text":"Save bmm package version brmsfit object reproducibility - e.g. fit$version$bmm (#88)","code":""},{"path":[]},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"new-features-0-1-1","dir":"Changelog","previous_headings":"","what":"New features","title":"bmm 0.1.1","text":"BREAKING CHANGE: Improve user interface fit_model() ensures package stability future development. Model specific arguments now passed model functions named arguments (e.g. mixture3p(non_targets, setsize)). allows flexible intuitive way specify model arguments. Passing model specific arguments directly fit_model() function now deprecated (#43). Add information model domain, task, name, version, citation, requirements parameters (#42) Add ability generate template file adding new models package use_model_template() (developers) (#39)","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"other-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Other changes","title":"bmm 0.1.1","text":"Improve documentation model functions. can now get help model typing ?model_name console. example, calling information full version Interference Measurement Model look like : ?IMMfull","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bmm-010","dir":"Changelog","previous_headings":"","what":"bmm 0.1.0","title":"bmm 0.1.0","text":"major restructuring package support stable generalizable development future models (#41).","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"bmm 0.1.0","text":"Refactor fit_model() function generic independent model fit (#20) Transform models S3 objects. (#41). View currently supported models new function supported_models(). Currently supported models : mixture2p(), mixture3p(), IMMabc(), IMMbsc(), IMMfull() Add S3 methods checking data, formula, model priors (#41) Add distribution functions Signal Discrimination Model. See ?SDM usage (#27) Add softmax invsoftmax functions","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bug-fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"bmm 0.1.0","text":"Change default prior log(kappa) Normal(2,1) mixture3p() model (#15)","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"other-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"bmm 0.1.0","text":"BREAKING CHANGE: deprecate model_type argument fit_model(). Models must now specified S3 functions passed argument model rather model names strings passed argument model_type (#41) Add extensive unit testing","code":""},{"path":"https://venpopov.github.io/bmm/dev/news/index.html","id":"bmm-001","dir":"Changelog","previous_headings":"","what":"bmm 0.0.1","title":"bmm 0.0.1","text":"Initial release version","code":""}]
